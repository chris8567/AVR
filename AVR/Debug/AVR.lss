
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000398  00800100  000015e2  00001676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800498  00800498  00001a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d69  00000000  00000000  00001c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba1  00000000  00000000  000039ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c77  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f8  00000000  00000000  00008208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d9a  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2e  00000000  00000000  0001949a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  0001a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001553  00000000  00000000  0001a480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fa c6       	rjmp	.+3572   	; 0xe32 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ee       	ldi	r30, 0xE2	; 226
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3e       	cpi	r26, 0xEC	; 236
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      ca:	c6 d7       	rcall	.+3980   	; 0x1058 <buttons_init>
	lcd12864_init();
      cc:	0e 94 c8 08 	call	0x1190	; 0x1190 <lcd12864_init>
	init_IO();
      d0:	eb d1       	rcall	.+982    	; 0x4a8 <init_IO>
	emv_ports_init();
      d2:	d7 d1       	rcall	.+942    	; 0x482 <emv_ports_init>
	Timer0_Init();
      d4:	89 d6       	rcall	.+3346   	; 0xde8 <Timer0_Init>
	ADC_init();
      d6:	6f d1       	rcall	.+734    	; 0x3b6 <ADC_init>
	Menu_Init();
      d8:	cd d5       	rcall	.+2970   	; 0xc74 <Menu_Init>
	
	//lcd12864_set_pos(1,1);
	//lcd12864_write_str("ab");
	
	while(1){
	Menu_Poll();
      da:	e0 d5       	rcall	.+3008   	; 0xc9c <Menu_Poll>
      dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x10>

000000de <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	00 d0       	rcall	.+0      	; 0xf0 <Act_Update_Main+0x12>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <Act_Update_Main+0x14>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = PD_Mode;
      f6:	10 91 1e 03 	lds	r17, 0x031E
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 91 a0 04 	lds	r25, 0x04A0
     100:	91 11       	cpse	r25, r1
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	80 93 a0 04 	sts	0x04A0, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	int pressure_diff = (int)ADC_read(PRESSURE);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	6e d1       	rcall	.+732    	; 0x3e8 <ADC_read>
     10c:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fixsfsi>
     110:	6b 01       	movw	r12, r22
     112:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     114:	4a e0       	ldi	r20, 0x0A	; 10
     116:	be 01       	movw	r22, r28
     118:	6f 5f       	subi	r22, 0xFF	; 255
     11a:	7f 4f       	sbci	r23, 0xFF	; 255
     11c:	c6 01       	movw	r24, r12
     11e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__itoa_ncheck>
	itoa(pressure_diff,pdstr,10);
	lcd12864_set_pos(0,1);
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd12864_set_pos>
	switch(mode){
     12a:	12 30       	cpi	r17, 0x02	; 2
     12c:	49 f0       	breq	.+18     	; 0x140 <Act_Update_Main+0x62>
     12e:	13 30       	cpi	r17, 0x03	; 3
     130:	61 f0       	breq	.+24     	; 0x14a <Act_Update_Main+0x6c>
     132:	11 30       	cpi	r17, 0x01	; 1
     134:	79 f4       	brne	.+30     	; 0x154 <Act_Update_Main+0x76>
		case 1:
		lcd12864_write_str(MODE1);
     136:	80 e2       	ldi	r24, 0x20	; 32
     138:	93 e0       	ldi	r25, 0x03	; 3
     13a:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd12864_write_str>
		break;
     13e:	0e c0       	rjmp	.+28     	; 0x15c <Act_Update_Main+0x7e>
		case 2:
		lcd12864_write_str(MODE2);
     140:	84 e2       	ldi	r24, 0x24	; 36
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd12864_write_str>
		break;
     148:	09 c0       	rjmp	.+18     	; 0x15c <Act_Update_Main+0x7e>
		case 3:
		lcd12864_write_str(MODE3);
     14a:	88 e2       	ldi	r24, 0x28	; 40
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd12864_write_str>
		break;
     152:	04 c0       	rjmp	.+8      	; 0x15c <Act_Update_Main+0x7e>
		default:
		lcd12864_write_str(MODE0);
     154:	8c e2       	ldi	r24, 0x2C	; 44
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd12864_write_str>
		break;
	}
	lcd12864_set_pos(4,1);
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	84 e0       	ldi	r24, 0x04	; 4
     160:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd12864_set_pos>
	if(Blowing_State){
     164:	80 91 a1 04 	lds	r24, 0x04A1
     168:	88 23       	and	r24, r24
     16a:	61 f0       	breq	.+24     	; 0x184 <Act_Update_Main+0xa6>
		if(blink_factor)
     16c:	80 91 a0 04 	lds	r24, 0x04A0
     170:	88 23       	and	r24, r24
     172:	21 f0       	breq	.+8      	; 0x17c <Act_Update_Main+0x9e>
		lcd12864_write_char(0x0f);
     174:	8f e0       	ldi	r24, 0x0F	; 15
     176:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
     17a:	0f c0       	rjmp	.+30     	; 0x19a <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     17c:	89 e0       	ldi	r24, 0x09	; 9
     17e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
     182:	0b c0       	rjmp	.+22     	; 0x19a <Act_Update_Main+0xbc>
	}
	else{
		if(blink_factor)
     184:	80 91 a0 04 	lds	r24, 0x04A0
     188:	88 23       	and	r24, r24
     18a:	21 f0       	breq	.+8      	; 0x194 <Act_Update_Main+0xb6>
		lcd12864_write_char(0x07);
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
     192:	03 c0       	rjmp	.+6      	; 0x19a <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     194:	89 e0       	ldi	r24, 0x09	; 9
     196:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	87 e0       	ldi	r24, 0x07	; 7
     19e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd12864_set_pos>
	if(Alarm_State){
     1a2:	80 91 a2 04 	lds	r24, 0x04A2
     1a6:	88 23       	and	r24, r24
     1a8:	61 f0       	breq	.+24     	; 0x1c2 <Act_Update_Main+0xe4>
		if(blink_factor)
     1aa:	80 91 a0 04 	lds	r24, 0x04A0
     1ae:	88 23       	and	r24, r24
     1b0:	21 f0       	breq	.+8      	; 0x1ba <Act_Update_Main+0xdc>
			lcd12864_write_char(0x21);
     1b2:	81 e2       	ldi	r24, 0x21	; 33
     1b4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
     1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <Act_Update_Main+0xea>
		else
			lcd12864_write_char(' ');
     1ba:	80 e2       	ldi	r24, 0x20	; 32
     1bc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
     1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <Act_Update_Main+0xea>
	}
	else{
		lcd12864_write_char(0x02);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	85 e0       	ldi	r24, 0x05	; 5
     1cc:	fa d7       	rcall	.+4084   	; 0x11c2 <lcd12864_set_pos>
	lcd12864_write_str(pdstr);
     1ce:	ce 01       	movw	r24, r28
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd12864_write_str>
	lcd12864_set_pos(3,3);
     1d6:	63 e0       	ldi	r22, 0x03	; 3
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	f3 d7       	rcall	.+4070   	; 0x11c2 <lcd12864_set_pos>
	s++;
     1dc:	80 91 9e 04 	lds	r24, 0x049E
     1e0:	90 91 9f 04 	lds	r25, 0x049F
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	90 93 9f 04 	sts	0x049F, r25
     1ea:	80 93 9e 04 	sts	0x049E, r24
	if(s==60){
     1ee:	cc 97       	sbiw	r24, 0x3c	; 60
     1f0:	69 f4       	brne	.+26     	; 0x20c <Act_Update_Main+0x12e>
		m++; s=0;
     1f2:	80 91 9c 04 	lds	r24, 0x049C
     1f6:	90 91 9d 04 	lds	r25, 0x049D
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 9d 04 	sts	0x049D, r25
     200:	80 93 9c 04 	sts	0x049C, r24
     204:	10 92 9f 04 	sts	0x049F, r1
     208:	10 92 9e 04 	sts	0x049E, r1
	}
	if(m==60){
     20c:	80 91 9c 04 	lds	r24, 0x049C
     210:	90 91 9d 04 	lds	r25, 0x049D
     214:	cc 97       	sbiw	r24, 0x3c	; 60
     216:	69 f4       	brne	.+26     	; 0x232 <Act_Update_Main+0x154>
		hours++; m=0;
     218:	80 91 9a 04 	lds	r24, 0x049A
     21c:	90 91 9b 04 	lds	r25, 0x049B
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	90 93 9b 04 	sts	0x049B, r25
     226:	80 93 9a 04 	sts	0x049A, r24
     22a:	10 92 9d 04 	sts	0x049D, r1
     22e:	10 92 9c 04 	sts	0x049C, r1
	}
	if(hours == 24){
     232:	40 91 9a 04 	lds	r20, 0x049A
     236:	50 91 9b 04 	lds	r21, 0x049B
     23a:	48 31       	cpi	r20, 0x18	; 24
     23c:	51 05       	cpc	r21, r1
     23e:	49 f4       	brne	.+18     	; 0x252 <Act_Update_Main+0x174>
		days++;
     240:	80 91 98 04 	lds	r24, 0x0498
     244:	90 91 99 04 	lds	r25, 0x0499
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	90 93 99 04 	sts	0x0499, r25
     24e:	80 93 98 04 	sts	0x0498, r24
	}
	time[7]=m%10+'0';
     252:	00 91 9c 04 	lds	r16, 0x049C
     256:	10 91 9d 04 	lds	r17, 0x049D
     25a:	e0 e3       	ldi	r30, 0x30	; 48
     25c:	f3 e0       	ldi	r31, 0x03	; 3
     25e:	98 01       	movw	r18, r16
     260:	ad ec       	ldi	r26, 0xCD	; 205
     262:	bc ec       	ldi	r27, 0xCC	; 204
     264:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     268:	96 95       	lsr	r25
     26a:	87 95       	ror	r24
     26c:	96 95       	lsr	r25
     26e:	87 95       	ror	r24
     270:	96 95       	lsr	r25
     272:	87 95       	ror	r24
     274:	9c 01       	movw	r18, r24
     276:	22 0f       	add	r18, r18
     278:	33 1f       	adc	r19, r19
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	82 0f       	add	r24, r18
     288:	93 1f       	adc	r25, r19
     28a:	98 01       	movw	r18, r16
     28c:	28 1b       	sub	r18, r24
     28e:	39 0b       	sbc	r19, r25
     290:	c9 01       	movw	r24, r18
     292:	80 5d       	subi	r24, 0xD0	; 208
     294:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     296:	98 01       	movw	r18, r16
     298:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     29c:	96 95       	lsr	r25
     29e:	87 95       	ror	r24
     2a0:	96 95       	lsr	r25
     2a2:	87 95       	ror	r24
     2a4:	96 95       	lsr	r25
     2a6:	87 95       	ror	r24
     2a8:	80 5d       	subi	r24, 0xD0	; 208
     2aa:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     2ac:	9a 01       	movw	r18, r20
     2ae:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	9c 01       	movw	r18, r24
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	82 0f       	add	r24, r18
     2d2:	93 1f       	adc	r25, r19
     2d4:	9a 01       	movw	r18, r20
     2d6:	28 1b       	sub	r18, r24
     2d8:	39 0b       	sbc	r19, r25
     2da:	c9 01       	movw	r24, r18
     2dc:	80 5d       	subi	r24, 0xD0	; 208
     2de:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     2e0:	9a 01       	movw	r18, r20
     2e2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	96 95       	lsr	r25
     2f0:	87 95       	ror	r24
     2f2:	80 5d       	subi	r24, 0xD0	; 208
     2f4:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     2f6:	40 91 98 04 	lds	r20, 0x0498
     2fa:	50 91 99 04 	lds	r21, 0x0499
     2fe:	9a 01       	movw	r18, r20
     300:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     304:	96 95       	lsr	r25
     306:	87 95       	ror	r24
     308:	96 95       	lsr	r25
     30a:	87 95       	ror	r24
     30c:	96 95       	lsr	r25
     30e:	87 95       	ror	r24
     310:	9c 01       	movw	r18, r24
     312:	22 0f       	add	r18, r18
     314:	33 1f       	adc	r19, r19
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	9a 01       	movw	r18, r20
     328:	28 1b       	sub	r18, r24
     32a:	39 0b       	sbc	r19, r25
     32c:	c9 01       	movw	r24, r18
     32e:	80 5d       	subi	r24, 0xD0	; 208
     330:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     332:	9a 01       	movw	r18, r20
     334:	0e 94 ad 0a 	call	0x155a	; 0x155a <__umulhisi3>
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	96 95       	lsr	r25
     33e:	87 95       	ror	r24
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
     344:	80 5d       	subi	r24, 0xD0	; 208
     346:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     348:	cf 01       	movw	r24, r30
     34a:	64 d7       	rcall	.+3784   	; 0x1214 <lcd12864_write_str>
	
	
	if(pressure_diff > BlowPresureUpperLimit){
     34c:	80 91 1c 03 	lds	r24, 0x031C
     350:	90 91 1d 03 	lds	r25, 0x031D
     354:	8c 15       	cp	r24, r12
     356:	9d 05       	cpc	r25, r13
     358:	28 f4       	brcc	.+10     	; 0x364 <Act_Update_Main+0x286>
		Alarm_State = 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 a2 04 	sts	0x04A2, r24
		Alarm(1);
     360:	ba d0       	rcall	.+372    	; 0x4d6 <Alarm>
     362:	0b c0       	rjmp	.+22     	; 0x37a <Act_Update_Main+0x29c>
	}
	else if(pressure_diff < BlowPresureLowerLimit){
     364:	80 91 1a 03 	lds	r24, 0x031A
     368:	90 91 1b 03 	lds	r25, 0x031B
     36c:	c8 16       	cp	r12, r24
     36e:	d9 06       	cpc	r13, r25
     370:	20 f4       	brcc	.+8      	; 0x37a <Act_Update_Main+0x29c>
		Alarm_State=0;
     372:	10 92 a2 04 	sts	0x04A2, r1
		Alarm(0);
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	ae d0       	rcall	.+348    	; 0x4d6 <Alarm>
	}


}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	08 95       	ret

00000394 <Act_pressure_setting1_display>:

void Act_pressure_setting1_display(void){
	lcd12864_set_pos(6,2);
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	86 e0       	ldi	r24, 0x06	; 6
     398:	14 d7       	rcall	.+3624   	; 0x11c2 <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureUpperLimit);
     39a:	80 91 1c 03 	lds	r24, 0x031C
     39e:	90 91 1d 03 	lds	r25, 0x031D
     3a2:	4c d7       	rcall	.+3736   	; 0x123c <lcd12864_write_int>
	lcd12864_set_pos(6,3);
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	0c d7       	rcall	.+3608   	; 0x11c2 <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureLowerLimit);
     3aa:	80 91 1a 03 	lds	r24, 0x031A
     3ae:	90 91 1b 03 	lds	r25, 0x031B
     3b2:	44 c7       	rjmp	.+3720   	; 0x123c <lcd12864_write_int>
     3b4:	08 95       	ret

000003b6 <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     3b6:	e1 e6       	ldi	r30, 0x61	; 97
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8c 7f       	andi	r24, 0xFC	; 252
     3be:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     3c0:	86 e8       	ldi	r24, 0x86	; 134
     3c2:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     3c4:	80 e1       	ldi	r24, 0x10	; 16
     3c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     3c8:	35 98       	cbi	0x06, 5	; 6
     3ca:	08 95       	ret

000003cc <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     3cc:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     3ce:	34 9b       	sbis	0x06, 4	; 6
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d2:	86 ef       	ldi	r24, 0xF6	; 246
     3d4:	8a 95       	dec	r24
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     3d8:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     3da:	85 b1       	in	r24, 0x05	; 5
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	98 2f       	mov	r25, r24
     3e0:	88 27       	eor	r24, r24

	return result;	
}
     3e2:	82 0f       	add	r24, r18
     3e4:	91 1d       	adc	r25, r1
     3e6:	08 95       	ret

000003e8 <ADC_read>:

float ADC_read(uint8_t target){
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	89 f0       	breq	.+34     	; 0x418 <ADC_read+0x30>
     3f6:	28 f4       	brcc	.+10     	; 0x402 <ADC_read+0x1a>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	41 f0       	breq	.+16     	; 0x40c <ADC_read+0x24>
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	49 f0       	breq	.+18     	; 0x412 <ADC_read+0x2a>
     400:	35 c0       	rjmp	.+106    	; 0x46c <ADC_read+0x84>
     402:	84 30       	cpi	r24, 0x04	; 4
     404:	61 f0       	breq	.+24     	; 0x41e <ADC_read+0x36>
     406:	85 30       	cpi	r24, 0x05	; 5
     408:	69 f0       	breq	.+26     	; 0x424 <ADC_read+0x3c>
     40a:	30 c0       	rjmp	.+96     	; 0x46c <ADC_read+0x84>
		case PRESSURE:
			ADMUX = 0x10;
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	87 b9       	out	0x07, r24	; 7
			break;
     410:	2d c0       	rjmp	.+90     	; 0x46c <ADC_read+0x84>
		case EMV:
			ADMUX = 0b00000100;
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	87 b9       	out	0x07, r24	; 7
			break;
     416:	2a c0       	rjmp	.+84     	; 0x46c <ADC_read+0x84>
		case VIN:
			ADMUX = 0b00000101;
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	87 b9       	out	0x07, r24	; 7
			break;
     41c:	27 c0       	rjmp	.+78     	; 0x46c <ADC_read+0x84>
		case VPP:
			ADMUX = 0b00000110;
     41e:	86 e0       	ldi	r24, 0x06	; 6
     420:	87 b9       	out	0x07, r24	; 7
			break;
     422:	24 c0       	rjmp	.+72     	; 0x46c <ADC_read+0x84>
		case VCC:
			ADMUX = 0b00000111;
     424:	87 e0       	ldi	r24, 0x07	; 7
     426:	87 b9       	out	0x07, r24	; 7
			break;
     428:	21 c0       	rjmp	.+66     	; 0x46c <ADC_read+0x84>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     42a:	d0 df       	rcall	.-96     	; 0x3cc <ADC_readonce>
     42c:	bc 01       	movw	r22, r24
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a2 d7       	rcall	.+3908   	; 0x1378 <__floatunsisf>
     434:	9b 01       	movw	r18, r22
     436:	ac 01       	movw	r20, r24
     438:	c7 01       	movw	r24, r14
     43a:	b6 01       	movw	r22, r12
     43c:	08 d7       	rcall	.+3600   	; 0x124e <__addsf3>
     43e:	6b 01       	movw	r12, r22
     440:	7c 01       	movw	r14, r24
     442:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     444:	91 f7       	brne	.-28     	; 0x42a <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	5e e3       	ldi	r21, 0x3E	; 62
     44e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
	buff/=1024;
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e8       	ldi	r20, 0x80	; 128
     458:	5a e3       	ldi	r21, 0x3A	; 58
     45a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
	buff*=SCALE;
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	4a e7       	ldi	r20, 0x7A	; 122
     464:	54 e4       	ldi	r21, 0x44	; 68
     466:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     46a:	05 c0       	rjmp	.+10     	; 0x476 <ADC_read+0x8e>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     46c:	c8 e0       	ldi	r28, 0x08	; 8
     46e:	c1 2c       	mov	r12, r1
     470:	d1 2c       	mov	r13, r1
     472:	76 01       	movw	r14, r12
     474:	da cf       	rjmp	.-76     	; 0x42a <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     476:	cf 91       	pop	r28
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	08 95       	ret

00000482 <emv_ports_init>:
uint16_t emv_control_word = 0xff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
     482:	87 b3       	in	r24, 0x17	; 23
     484:	80 6e       	ori	r24, 0xE0	; 224
     486:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
     488:	e4 e6       	ldi	r30, 0x64	; 100
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	88 61       	ori	r24, 0x18	; 24
     490:	80 83       	st	Z, r24
	SCK_LOW;
     492:	e5 e6       	ldi	r30, 0x65	; 101
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	80 83       	st	Z, r24
	RCK_LOW;
     49c:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
     49e:	80 81       	ld	r24, Z
     4a0:	80 61       	ori	r24, 0x10	; 16
     4a2:	80 83       	st	Z, r24
	OEn_LOW;
     4a4:	c6 98       	cbi	0x18, 6	; 24
     4a6:	08 95       	ret

000004a8 <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
     4a8:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
     4aa:	e1 e6       	ldi	r30, 0x61	; 97
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 60       	ori	r24, 0x08	; 8
     4b2:	80 83       	st	Z, r24
	DDRG |=_BV(0);
     4b4:	e4 e6       	ldi	r30, 0x64	; 100
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
     4be:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
     4c0:	e2 e6       	ldi	r30, 0x62	; 98
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
     4ca:	e5 e6       	ldi	r30, 0x65	; 101
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	8e 7f       	andi	r24, 0xFE	; 254
     4d2:	80 83       	st	Z, r24
     4d4:	08 95       	ret

000004d6 <Alarm>:
	
}

void Alarm(bool state){
	if(state==ON){
     4d6:	88 23       	and	r24, r24
     4d8:	11 f0       	breq	.+4      	; 0x4de <Alarm+0x8>
		PORTB &=~_BV(0);
     4da:	c0 98       	cbi	0x18, 0	; 24
     4dc:	08 95       	ret
		//PORTG |=_BV(0);
	}
	else{
		PORTB |= _BV(0);
     4de:	c0 9a       	sbi	0x18, 0	; 24
     4e0:	08 95       	ret

000004e2 <DrawScreen>:
uint8_t Get_Workmode(void){
	return PD_Mode;
}

	void DrawScreen(void){
		lcd12864_clear();
     4e2:	6b d6       	rcall	.+3286   	; 0x11ba <lcd12864_clear>
		lcd12864_set_pos(0,1);
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	6c d6       	rcall	.+3288   	; 0x11c2 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     4ea:	80 91 aa 04 	lds	r24, 0x04AA
     4ee:	90 91 ab 04 	lds	r25, 0x04AB
     4f2:	90 d6       	rcall	.+3360   	; 0x1214 <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     4f4:	62 e0       	ldi	r22, 0x02	; 2
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	64 d6       	rcall	.+3272   	; 0x11c2 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     4fa:	80 91 ac 04 	lds	r24, 0x04AC
     4fe:	90 91 ad 04 	lds	r25, 0x04AD
     502:	88 d6       	rcall	.+3344   	; 0x1214 <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     504:	63 e0       	ldi	r22, 0x03	; 3
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	5c d6       	rcall	.+3256   	; 0x11c2 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     50a:	80 91 ae 04 	lds	r24, 0x04AE
     50e:	90 91 af 04 	lds	r25, 0x04AF
     512:	80 d6       	rcall	.+3328   	; 0x1214 <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     514:	64 e0       	ldi	r22, 0x04	; 4
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	54 d6       	rcall	.+3240   	; 0x11c2 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     51a:	80 91 b0 04 	lds	r24, 0x04B0
     51e:	90 91 b1 04 	lds	r25, 0x04B1
     522:	78 d6       	rcall	.+3312   	; 0x1214 <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
     524:	80 91 b2 04 	lds	r24, 0x04B2
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	51 f0       	breq	.+20     	; 0x540 <DrawScreen+0x5e>
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	71 f0       	breq	.+28     	; 0x54c <DrawScreen+0x6a>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	89 f4       	brne	.+34     	; 0x556 <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	44 d6       	rcall	.+3208   	; 0x11c2 <lcd12864_set_pos>
				lcd12864_write_char('*');
     53a:	8a e2       	ldi	r24, 0x2A	; 42
     53c:	5b c6       	rjmp	.+3254   	; 0x11f4 <lcd12864_write_char>
				break;
     53e:	08 95       	ret
			case 2:
				lcd12864_set_pos(0,2);
     540:	62 e0       	ldi	r22, 0x02	; 2
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	3e d6       	rcall	.+3196   	; 0x11c2 <lcd12864_set_pos>
				lcd12864_write_char('*');
     546:	8a e2       	ldi	r24, 0x2A	; 42
     548:	55 c6       	rjmp	.+3242   	; 0x11f4 <lcd12864_write_char>
				break;
     54a:	08 95       	ret
			case 3:
				lcd12864_set_pos(0,3);
     54c:	63 e0       	ldi	r22, 0x03	; 3
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	38 d6       	rcall	.+3184   	; 0x11c2 <lcd12864_set_pos>
				lcd12864_write_char('*');
     552:	8a e2       	ldi	r24, 0x2A	; 42
     554:	4f c6       	rjmp	.+3230   	; 0x11f4 <lcd12864_write_char>
     556:	08 95       	ret

00000558 <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     558:	20 91 00 01 	lds	r18, 0x0100
     55c:	30 91 01 01 	lds	r19, 0x0101
     560:	28 17       	cp	r18, r24
     562:	39 07       	cpc	r19, r25
     564:	59 f0       	breq	.+22     	; 0x57c <FindState+0x24>
     566:	e8 e1       	ldi	r30, 0x18	; 24
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	21 e0       	ldi	r18, 0x01	; 1
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	b9 01       	movw	r22, r18
     570:	40 81       	ld	r20, Z
     572:	51 81       	ldd	r21, Z+1	; 0x01
     574:	48 17       	cp	r20, r24
     576:	59 07       	cpc	r21, r25
     578:	91 f4       	brne	.+36     	; 0x59e <FindState+0x46>
     57a:	02 c0       	rjmp	.+4      	; 0x580 <FindState+0x28>
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     580:	cb 01       	movw	r24, r22
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	68 0f       	add	r22, r24
     588:	79 1f       	adc	r23, r25
     58a:	cb 01       	movw	r24, r22
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	80 50       	subi	r24, 0x00	; 0
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	08 95       	ret
     59e:	2f 5f       	subi	r18, 0xFF	; 255
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	78 96       	adiw	r30, 0x18	; 24
		}
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     5a4:	24 31       	cpi	r18, 0x14	; 20
     5a6:	31 05       	cpc	r19, r1
     5a8:	11 f7       	brne	.-60     	; 0x56e <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     5ae:	08 95       	ret

000005b0 <State_Update>:
		State_Update();
		DrawScreen();
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     5b0:	e0 91 a5 04 	lds	r30, 0x04A5
     5b4:	f0 91 a6 04 	lds	r31, 0x04A6
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	20 e2       	ldi	r18, 0x20	; 32
     5c0:	92 07       	cpc	r25, r18
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <State_Update+0x16>
     5c4:	a4 c1       	rjmp	.+840    	; 0x90e <State_Update+0x35e>
     5c6:	78 f5       	brcc	.+94     	; 0x626 <State_Update+0x76>
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	20 e1       	ldi	r18, 0x10	; 16
     5cc:	92 07       	cpc	r25, r18
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <State_Update+0x22>
     5d0:	ea c0       	rjmp	.+468    	; 0x7a6 <State_Update+0x1f6>
     5d2:	a0 f4       	brcc	.+40     	; 0x5fc <State_Update+0x4c>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	20 e1       	ldi	r18, 0x10	; 16
     5d8:	92 07       	cpc	r25, r18
     5da:	09 f4       	brne	.+2      	; 0x5de <State_Update+0x2e>
     5dc:	78 c0       	rjmp	.+240    	; 0x6ce <State_Update+0x11e>
     5de:	20 f4       	brcc	.+8      	; 0x5e8 <State_Update+0x38>
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <State_Update+0x36>
     5e4:	51 c0       	rjmp	.+162    	; 0x688 <State_Update+0xd8>
     5e6:	08 95       	ret
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	20 e1       	ldi	r18, 0x10	; 16
     5ec:	92 07       	cpc	r25, r18
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <State_Update+0x42>
     5f0:	92 c0       	rjmp	.+292    	; 0x716 <State_Update+0x166>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	90 41       	sbci	r25, 0x10	; 16
     5f6:	09 f4       	brne	.+2      	; 0x5fa <State_Update+0x4a>
     5f8:	b2 c0       	rjmp	.+356    	; 0x75e <State_Update+0x1ae>
     5fa:	08 95       	ret
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	20 e2       	ldi	r18, 0x20	; 32
     600:	92 07       	cpc	r25, r18
     602:	09 f4       	brne	.+2      	; 0x606 <State_Update+0x56>
     604:	18 c1       	rjmp	.+560    	; 0x836 <State_Update+0x286>
     606:	28 f4       	brcc	.+10     	; 0x612 <State_Update+0x62>
     608:	85 30       	cpi	r24, 0x05	; 5
     60a:	90 41       	sbci	r25, 0x10	; 16
     60c:	09 f4       	brne	.+2      	; 0x610 <State_Update+0x60>
     60e:	ef c0       	rjmp	.+478    	; 0x7ee <State_Update+0x23e>
     610:	08 95       	ret
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	20 e2       	ldi	r18, 0x20	; 32
     616:	92 07       	cpc	r25, r18
     618:	09 f4       	brne	.+2      	; 0x61c <State_Update+0x6c>
     61a:	31 c1       	rjmp	.+610    	; 0x87e <State_Update+0x2ce>
     61c:	83 30       	cpi	r24, 0x03	; 3
     61e:	90 42       	sbci	r25, 0x20	; 32
     620:	09 f4       	brne	.+2      	; 0x624 <State_Update+0x74>
     622:	51 c1       	rjmp	.+674    	; 0x8c6 <State_Update+0x316>
     624:	08 95       	ret
     626:	83 30       	cpi	r24, 0x03	; 3
     628:	20 e3       	ldi	r18, 0x30	; 48
     62a:	92 07       	cpc	r25, r18
     62c:	09 f4       	brne	.+2      	; 0x630 <State_Update+0x80>
     62e:	23 c2       	rjmp	.+1094   	; 0xa76 <State_Update+0x4c6>
     630:	88 f4       	brcc	.+34     	; 0x654 <State_Update+0xa4>
     632:	86 30       	cpi	r24, 0x06	; 6
     634:	20 e2       	ldi	r18, 0x20	; 32
     636:	92 07       	cpc	r25, r18
     638:	09 f4       	brne	.+2      	; 0x63c <State_Update+0x8c>
     63a:	b1 c1       	rjmp	.+866    	; 0x99e <State_Update+0x3ee>
     63c:	08 f4       	brcc	.+2      	; 0x640 <State_Update+0x90>
     63e:	8b c1       	rjmp	.+790    	; 0x956 <State_Update+0x3a6>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	20 e3       	ldi	r18, 0x30	; 48
     644:	92 07       	cpc	r25, r18
     646:	09 f4       	brne	.+2      	; 0x64a <State_Update+0x9a>
     648:	ce c1       	rjmp	.+924    	; 0x9e6 <State_Update+0x436>
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	90 43       	sbci	r25, 0x30	; 48
     64e:	09 f4       	brne	.+2      	; 0x652 <State_Update+0xa2>
     650:	ee c1       	rjmp	.+988    	; 0xa2e <State_Update+0x47e>
     652:	08 95       	ret
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	21 e3       	ldi	r18, 0x31	; 49
     658:	92 07       	cpc	r25, r18
     65a:	09 f4       	brne	.+2      	; 0x65e <State_Update+0xae>
     65c:	78 c2       	rjmp	.+1264   	; 0xb4e <State_Update+0x59e>
     65e:	50 f4       	brcc	.+20     	; 0x674 <State_Update+0xc4>
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	20 e3       	ldi	r18, 0x30	; 48
     664:	92 07       	cpc	r25, r18
     666:	09 f4       	brne	.+2      	; 0x66a <State_Update+0xba>
     668:	2a c2       	rjmp	.+1108   	; 0xabe <State_Update+0x50e>
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	90 43       	sbci	r25, 0x30	; 48
     66e:	09 f4       	brne	.+2      	; 0x672 <State_Update+0xc2>
     670:	4a c2       	rjmp	.+1172   	; 0xb06 <State_Update+0x556>
     672:	08 95       	ret
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	21 e3       	ldi	r18, 0x31	; 49
     678:	92 07       	cpc	r25, r18
     67a:	09 f4       	brne	.+2      	; 0x67e <State_Update+0xce>
     67c:	99 c2       	rjmp	.+1330   	; 0xbb0 <State_Update+0x600>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 43       	sbci	r25, 0x31	; 49
     682:	09 f4       	brne	.+2      	; 0x686 <State_Update+0xd6>
     684:	c6 c2       	rjmp	.+1420   	; 0xc12 <State_Update+0x662>
     686:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     688:	80 91 e0 02 	lds	r24, 0x02E0
     68c:	90 91 e1 02 	lds	r25, 0x02E1
     690:	90 93 ab 04 	sts	0x04AB, r25
     694:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     698:	80 91 e2 02 	lds	r24, 0x02E2
     69c:	90 91 e3 02 	lds	r25, 0x02E3
     6a0:	90 93 ad 04 	sts	0x04AD, r25
     6a4:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     6a8:	80 91 e4 02 	lds	r24, 0x02E4
     6ac:	90 91 e5 02 	lds	r25, 0x02E5
     6b0:	90 93 af 04 	sts	0x04AF, r25
     6b4:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     6b8:	80 91 e6 02 	lds	r24, 0x02E6
     6bc:	90 91 e7 02 	lds	r25, 0x02E7
     6c0:	90 93 b1 04 	sts	0x04B1, r25
     6c4:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 0;
     6c8:	10 92 b2 04 	sts	0x04B2, r1
				break;
     6cc:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     6ce:	80 91 ea 02 	lds	r24, 0x02EA
     6d2:	90 91 eb 02 	lds	r25, 0x02EB
     6d6:	90 93 ab 04 	sts	0x04AB, r25
     6da:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     6de:	80 91 ec 02 	lds	r24, 0x02EC
     6e2:	90 91 ed 02 	lds	r25, 0x02ED
     6e6:	90 93 ad 04 	sts	0x04AD, r25
     6ea:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     6ee:	80 91 ee 02 	lds	r24, 0x02EE
     6f2:	90 91 ef 02 	lds	r25, 0x02EF
     6f6:	90 93 af 04 	sts	0x04AF, r25
     6fa:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     6fe:	80 91 18 03 	lds	r24, 0x0318
     702:	90 91 19 03 	lds	r25, 0x0319
     706:	90 93 b1 04 	sts	0x04B1, r25
     70a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 b2 04 	sts	0x04B2, r24
				break;
     714:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     716:	80 91 ea 02 	lds	r24, 0x02EA
     71a:	90 91 eb 02 	lds	r25, 0x02EB
     71e:	90 93 ab 04 	sts	0x04AB, r25
     722:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     726:	80 91 ec 02 	lds	r24, 0x02EC
     72a:	90 91 ed 02 	lds	r25, 0x02ED
     72e:	90 93 ad 04 	sts	0x04AD, r25
     732:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     736:	80 91 ee 02 	lds	r24, 0x02EE
     73a:	90 91 ef 02 	lds	r25, 0x02EF
     73e:	90 93 af 04 	sts	0x04AF, r25
     742:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     746:	80 91 18 03 	lds	r24, 0x0318
     74a:	90 91 19 03 	lds	r25, 0x0319
     74e:	90 93 b1 04 	sts	0x04B1, r25
     752:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	80 93 b2 04 	sts	0x04B2, r24
				break;
     75c:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     75e:	80 91 ea 02 	lds	r24, 0x02EA
     762:	90 91 eb 02 	lds	r25, 0x02EB
     766:	90 93 ab 04 	sts	0x04AB, r25
     76a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     76e:	80 91 ec 02 	lds	r24, 0x02EC
     772:	90 91 ed 02 	lds	r25, 0x02ED
     776:	90 93 ad 04 	sts	0x04AD, r25
     77a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     77e:	80 91 ee 02 	lds	r24, 0x02EE
     782:	90 91 ef 02 	lds	r25, 0x02EF
     786:	90 93 af 04 	sts	0x04AF, r25
     78a:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     78e:	80 91 18 03 	lds	r24, 0x0318
     792:	90 91 19 03 	lds	r25, 0x0319
     796:	90 93 b1 04 	sts	0x04B1, r25
     79a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 3;
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	80 93 b2 04 	sts	0x04B2, r24
				break;
     7a4:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     7a6:	80 91 f0 02 	lds	r24, 0x02F0
     7aa:	90 91 f1 02 	lds	r25, 0x02F1
     7ae:	90 93 ab 04 	sts	0x04AB, r25
     7b2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     7b6:	80 91 f2 02 	lds	r24, 0x02F2
     7ba:	90 91 f3 02 	lds	r25, 0x02F3
     7be:	90 93 ad 04 	sts	0x04AD, r25
     7c2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     7c6:	80 91 e0 02 	lds	r24, 0x02E0
     7ca:	90 91 e1 02 	lds	r25, 0x02E1
     7ce:	90 93 af 04 	sts	0x04AF, r25
     7d2:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7d6:	80 91 18 03 	lds	r24, 0x0318
     7da:	90 91 19 03 	lds	r25, 0x0319
     7de:	90 93 b1 04 	sts	0x04B1, r25
     7e2:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 b2 04 	sts	0x04B2, r24
				break;
     7ec:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     7ee:	80 91 f0 02 	lds	r24, 0x02F0
     7f2:	90 91 f1 02 	lds	r25, 0x02F1
     7f6:	90 93 ab 04 	sts	0x04AB, r25
     7fa:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     7fe:	80 91 f2 02 	lds	r24, 0x02F2
     802:	90 91 f3 02 	lds	r25, 0x02F3
     806:	90 93 ad 04 	sts	0x04AD, r25
     80a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     80e:	80 91 e0 02 	lds	r24, 0x02E0
     812:	90 91 e1 02 	lds	r25, 0x02E1
     816:	90 93 af 04 	sts	0x04AF, r25
     81a:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     81e:	80 91 18 03 	lds	r24, 0x0318
     822:	90 91 19 03 	lds	r25, 0x0319
     826:	90 93 b1 04 	sts	0x04B1, r25
     82a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	80 93 b2 04 	sts	0x04B2, r24
				break;
     834:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     836:	80 91 f4 02 	lds	r24, 0x02F4
     83a:	90 91 f5 02 	lds	r25, 0x02F5
     83e:	90 93 ab 04 	sts	0x04AB, r25
     842:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     846:	80 91 f6 02 	lds	r24, 0x02F6
     84a:	90 91 f7 02 	lds	r25, 0x02F7
     84e:	90 93 ad 04 	sts	0x04AD, r25
     852:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     856:	80 91 f8 02 	lds	r24, 0x02F8
     85a:	90 91 f9 02 	lds	r25, 0x02F9
     85e:	90 93 af 04 	sts	0x04AF, r25
     862:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     866:	80 91 18 03 	lds	r24, 0x0318
     86a:	90 91 19 03 	lds	r25, 0x0319
     86e:	90 93 b1 04 	sts	0x04B1, r25
     872:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 b2 04 	sts	0x04B2, r24
				break;
     87c:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     87e:	80 91 f4 02 	lds	r24, 0x02F4
     882:	90 91 f5 02 	lds	r25, 0x02F5
     886:	90 93 ab 04 	sts	0x04AB, r25
     88a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     88e:	80 91 f6 02 	lds	r24, 0x02F6
     892:	90 91 f7 02 	lds	r25, 0x02F7
     896:	90 93 ad 04 	sts	0x04AD, r25
     89a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     89e:	80 91 f8 02 	lds	r24, 0x02F8
     8a2:	90 91 f9 02 	lds	r25, 0x02F9
     8a6:	90 93 af 04 	sts	0x04AF, r25
     8aa:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8ae:	80 91 18 03 	lds	r24, 0x0318
     8b2:	90 91 19 03 	lds	r25, 0x0319
     8b6:	90 93 b1 04 	sts	0x04B1, r25
     8ba:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	80 93 b2 04 	sts	0x04B2, r24
				break;
     8c4:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8c6:	80 91 f4 02 	lds	r24, 0x02F4
     8ca:	90 91 f5 02 	lds	r25, 0x02F5
     8ce:	90 93 ab 04 	sts	0x04AB, r25
     8d2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     8d6:	80 91 f6 02 	lds	r24, 0x02F6
     8da:	90 91 f7 02 	lds	r25, 0x02F7
     8de:	90 93 ad 04 	sts	0x04AD, r25
     8e2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     8e6:	80 91 f8 02 	lds	r24, 0x02F8
     8ea:	90 91 f9 02 	lds	r25, 0x02F9
     8ee:	90 93 af 04 	sts	0x04AF, r25
     8f2:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8f6:	80 91 18 03 	lds	r24, 0x0318
     8fa:	90 91 19 03 	lds	r25, 0x0319
     8fe:	90 93 b1 04 	sts	0x04B1, r25
     902:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 3;
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	80 93 b2 04 	sts	0x04B2, r24
				break;
     90c:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     90e:	80 91 fa 02 	lds	r24, 0x02FA
     912:	90 91 fb 02 	lds	r25, 0x02FB
     916:	90 93 ab 04 	sts	0x04AB, r25
     91a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     91e:	80 91 fc 02 	lds	r24, 0x02FC
     922:	90 91 fd 02 	lds	r25, 0x02FD
     926:	90 93 ad 04 	sts	0x04AD, r25
     92a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     92e:	80 91 fe 02 	lds	r24, 0x02FE
     932:	90 91 ff 02 	lds	r25, 0x02FF
     936:	90 93 af 04 	sts	0x04AF, r25
     93a:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     93e:	80 91 18 03 	lds	r24, 0x0318
     942:	90 91 19 03 	lds	r25, 0x0319
     946:	90 93 b1 04 	sts	0x04B1, r25
     94a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 b2 04 	sts	0x04B2, r24
				break;
     954:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     956:	80 91 fa 02 	lds	r24, 0x02FA
     95a:	90 91 fb 02 	lds	r25, 0x02FB
     95e:	90 93 ab 04 	sts	0x04AB, r25
     962:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     966:	80 91 fc 02 	lds	r24, 0x02FC
     96a:	90 91 fd 02 	lds	r25, 0x02FD
     96e:	90 93 ad 04 	sts	0x04AD, r25
     972:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     976:	80 91 fe 02 	lds	r24, 0x02FE
     97a:	90 91 ff 02 	lds	r25, 0x02FF
     97e:	90 93 af 04 	sts	0x04AF, r25
     982:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     986:	80 91 18 03 	lds	r24, 0x0318
     98a:	90 91 19 03 	lds	r25, 0x0319
     98e:	90 93 b1 04 	sts	0x04B1, r25
     992:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 b2 04 	sts	0x04B2, r24
				break;
     99c:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     99e:	80 91 fa 02 	lds	r24, 0x02FA
     9a2:	90 91 fb 02 	lds	r25, 0x02FB
     9a6:	90 93 ab 04 	sts	0x04AB, r25
     9aa:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     9ae:	80 91 fc 02 	lds	r24, 0x02FC
     9b2:	90 91 fd 02 	lds	r25, 0x02FD
     9b6:	90 93 ad 04 	sts	0x04AD, r25
     9ba:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9be:	80 91 fe 02 	lds	r24, 0x02FE
     9c2:	90 91 ff 02 	lds	r25, 0x02FF
     9c6:	90 93 af 04 	sts	0x04AF, r25
     9ca:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9ce:	80 91 18 03 	lds	r24, 0x0318
     9d2:	90 91 19 03 	lds	r25, 0x0319
     9d6:	90 93 b1 04 	sts	0x04B1, r25
     9da:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 3;
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	80 93 b2 04 	sts	0x04B2, r24
				break;
     9e4:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     9e6:	80 91 00 03 	lds	r24, 0x0300
     9ea:	90 91 01 03 	lds	r25, 0x0301
     9ee:	90 93 ab 04 	sts	0x04AB, r25
     9f2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     9f6:	80 91 02 03 	lds	r24, 0x0302
     9fa:	90 91 03 03 	lds	r25, 0x0303
     9fe:	90 93 ad 04 	sts	0x04AD, r25
     a02:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a06:	80 91 04 03 	lds	r24, 0x0304
     a0a:	90 91 05 03 	lds	r25, 0x0305
     a0e:	90 93 af 04 	sts	0x04AF, r25
     a12:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a16:	80 91 18 03 	lds	r24, 0x0318
     a1a:	90 91 19 03 	lds	r25, 0x0319
     a1e:	90 93 b1 04 	sts	0x04B1, r25
     a22:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1; 
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 b2 04 	sts	0x04B2, r24
				break;
     a2c:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a2e:	80 91 00 03 	lds	r24, 0x0300
     a32:	90 91 01 03 	lds	r25, 0x0301
     a36:	90 93 ab 04 	sts	0x04AB, r25
     a3a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a3e:	80 91 02 03 	lds	r24, 0x0302
     a42:	90 91 03 03 	lds	r25, 0x0303
     a46:	90 93 ad 04 	sts	0x04AD, r25
     a4a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a4e:	80 91 04 03 	lds	r24, 0x0304
     a52:	90 91 05 03 	lds	r25, 0x0305
     a56:	90 93 af 04 	sts	0x04AF, r25
     a5a:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a5e:	80 91 18 03 	lds	r24, 0x0318
     a62:	90 91 19 03 	lds	r25, 0x0319
     a66:	90 93 b1 04 	sts	0x04B1, r25
     a6a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 b2 04 	sts	0x04B2, r24
				break;
     a74:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a76:	80 91 00 03 	lds	r24, 0x0300
     a7a:	90 91 01 03 	lds	r25, 0x0301
     a7e:	90 93 ab 04 	sts	0x04AB, r25
     a82:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a86:	80 91 02 03 	lds	r24, 0x0302
     a8a:	90 91 03 03 	lds	r25, 0x0303
     a8e:	90 93 ad 04 	sts	0x04AD, r25
     a92:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a96:	80 91 04 03 	lds	r24, 0x0304
     a9a:	90 91 05 03 	lds	r25, 0x0305
     a9e:	90 93 af 04 	sts	0x04AF, r25
     aa2:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     aa6:	80 91 18 03 	lds	r24, 0x0318
     aaa:	90 91 19 03 	lds	r25, 0x0319
     aae:	90 93 b1 04 	sts	0x04B1, r25
     ab2:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 3;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	80 93 b2 04 	sts	0x04B2, r24
				break;
     abc:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     abe:	80 91 06 03 	lds	r24, 0x0306
     ac2:	90 91 07 03 	lds	r25, 0x0307
     ac6:	90 93 ab 04 	sts	0x04AB, r25
     aca:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     ace:	80 91 08 03 	lds	r24, 0x0308
     ad2:	90 91 09 03 	lds	r25, 0x0309
     ad6:	90 93 ad 04 	sts	0x04AD, r25
     ada:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     ade:	80 91 e0 02 	lds	r24, 0x02E0
     ae2:	90 91 e1 02 	lds	r25, 0x02E1
     ae6:	90 93 af 04 	sts	0x04AF, r25
     aea:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     aee:	80 91 18 03 	lds	r24, 0x0318
     af2:	90 91 19 03 	lds	r25, 0x0319
     af6:	90 93 b1 04 	sts	0x04B1, r25
     afa:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 b2 04 	sts	0x04B2, r24
				break;
     b04:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b06:	80 91 06 03 	lds	r24, 0x0306
     b0a:	90 91 07 03 	lds	r25, 0x0307
     b0e:	90 93 ab 04 	sts	0x04AB, r25
     b12:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b16:	80 91 08 03 	lds	r24, 0x0308
     b1a:	90 91 09 03 	lds	r25, 0x0309
     b1e:	90 93 ad 04 	sts	0x04AD, r25
     b22:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b26:	80 91 e0 02 	lds	r24, 0x02E0
     b2a:	90 91 e1 02 	lds	r25, 0x02E1
     b2e:	90 93 af 04 	sts	0x04AF, r25
     b32:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b36:	80 91 18 03 	lds	r24, 0x0318
     b3a:	90 91 19 03 	lds	r25, 0x0319
     b3e:	90 93 b1 04 	sts	0x04B1, r25
     b42:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index = 2;
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	80 93 b2 04 	sts	0x04B2, r24
				break;
     b4c:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
     b4e:	80 91 1e 03 	lds	r24, 0x031E
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	49 f4       	brne	.+18     	; 0xb68 <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
     b56:	80 91 0a 03 	lds	r24, 0x030A
     b5a:	90 91 0b 03 	lds	r25, 0x030B
     b5e:	90 93 ab 04 	sts	0x04AB, r25
     b62:	80 93 aa 04 	sts	0x04AA, r24
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
     b68:	80 91 0c 03 	lds	r24, 0x030C
     b6c:	90 91 0d 03 	lds	r25, 0x030D
     b70:	90 93 ab 04 	sts	0x04AB, r25
     b74:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     b78:	80 91 0e 03 	lds	r24, 0x030E
     b7c:	90 91 0f 03 	lds	r25, 0x030F
     b80:	90 93 ad 04 	sts	0x04AD, r25
     b84:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     b88:	80 91 10 03 	lds	r24, 0x0310
     b8c:	90 91 11 03 	lds	r25, 0x0311
     b90:	90 93 af 04 	sts	0x04AF, r25
     b94:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b98:	80 91 18 03 	lds	r24, 0x0318
     b9c:	90 91 19 03 	lds	r25, 0x0319
     ba0:	90 93 b1 04 	sts	0x04B1, r25
     ba4:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index=1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 b2 04 	sts	0x04B2, r24
				break;
     bae:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
     bb0:	80 91 1e 03 	lds	r24, 0x031E
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	49 f4       	brne	.+18     	; 0xbca <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     bb8:	80 91 0a 03 	lds	r24, 0x030A
     bbc:	90 91 0b 03 	lds	r25, 0x030B
     bc0:	90 93 ab 04 	sts	0x04AB, r25
     bc4:	80 93 aa 04 	sts	0x04AA, r24
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     bca:	80 91 0c 03 	lds	r24, 0x030C
     bce:	90 91 0d 03 	lds	r25, 0x030D
     bd2:	90 93 ab 04 	sts	0x04AB, r25
     bd6:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     bda:	80 91 0e 03 	lds	r24, 0x030E
     bde:	90 91 0f 03 	lds	r25, 0x030F
     be2:	90 93 ad 04 	sts	0x04AD, r25
     be6:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     bea:	80 91 10 03 	lds	r24, 0x0310
     bee:	90 91 11 03 	lds	r25, 0x0311
     bf2:	90 93 af 04 	sts	0x04AF, r25
     bf6:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     bfa:	80 91 18 03 	lds	r24, 0x0318
     bfe:	90 91 19 03 	lds	r25, 0x0319
     c02:	90 93 b1 04 	sts	0x04B1, r25
     c06:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index=2;
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	80 93 b2 04 	sts	0x04B2, r24
				break;
     c10:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
     c12:	80 91 1e 03 	lds	r24, 0x031E
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	49 f4       	brne	.+18     	; 0xc2c <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c1a:	80 91 0a 03 	lds	r24, 0x030A
     c1e:	90 91 0b 03 	lds	r25, 0x030B
     c22:	90 93 ab 04 	sts	0x04AB, r25
     c26:	80 93 aa 04 	sts	0x04AA, r24
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     c2c:	80 91 0c 03 	lds	r24, 0x030C
     c30:	90 91 0d 03 	lds	r25, 0x030D
     c34:	90 93 ab 04 	sts	0x04AB, r25
     c38:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     c3c:	80 91 0e 03 	lds	r24, 0x030E
     c40:	90 91 0f 03 	lds	r25, 0x030F
     c44:	90 93 ad 04 	sts	0x04AD, r25
     c48:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     c4c:	80 91 10 03 	lds	r24, 0x0310
     c50:	90 91 11 03 	lds	r25, 0x0311
     c54:	90 93 af 04 	sts	0x04AF, r25
     c58:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c5c:	80 91 18 03 	lds	r24, 0x0318
     c60:	90 91 19 03 	lds	r25, 0x0319
     c64:	90 93 b1 04 	sts	0x04B1, r25
     c68:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.white_index=3;
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	80 93 b2 04 	sts	0x04B2, r24
     c72:	08 95       	ret

00000c74 <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	6f dc       	rcall	.-1826   	; 0x558 <FindState>
     c7a:	90 93 a6 04 	sts	0x04A6, r25
     c7e:	80 93 a5 04 	sts	0x04A5, r24
	
		Current_TimerFunc = SYS_State->Timer_Action;
     c82:	fc 01       	movw	r30, r24
     c84:	86 89       	ldd	r24, Z+22	; 0x16
     c86:	97 89       	ldd	r25, Z+23	; 0x17
     c88:	90 93 a4 04 	sts	0x04A4, r25
     c8c:	80 93 a3 04 	sts	0x04A3, r24
		
		Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);
     c90:	68 ee       	ldi	r22, 0xE8	; 232
     c92:	73 e0       	ldi	r23, 0x03	; 3
     c94:	39 d1       	rcall	.+626    	; 0xf08 <Timer0_RegisterCallbackFunction>
		State_Update();
     c96:	8c dc       	rcall	.-1768   	; 0x5b0 <State_Update>
		DrawScreen();
     c98:	24 cc       	rjmp	.-1976   	; 0x4e2 <DrawScreen>
     c9a:	08 95       	ret

00000c9c <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
     c9c:	45 d2       	rcall	.+1162   	; 0x1128 <getkey>
		switch(key){
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	71 f0       	breq	.+28     	; 0xcbe <Menu_Poll+0x22>
     ca2:	38 f4       	brcc	.+14     	; 0xcb2 <Menu_Poll+0x16>
     ca4:	88 23       	and	r24, r24
     ca6:	09 f4       	brne	.+2      	; 0xcaa <Menu_Poll+0xe>
     ca8:	3a c0       	rjmp	.+116    	; 0xd1e <Menu_Poll+0x82>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <Menu_Poll+0x14>
     cae:	4f c0       	rjmp	.+158    	; 0xd4e <Menu_Poll+0xb2>
     cb0:	7e c0       	rjmp	.+252    	; 0xdae <Menu_Poll+0x112>
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	e1 f0       	breq	.+56     	; 0xcee <Menu_Poll+0x52>
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	09 f4       	brne	.+2      	; 0xcbc <Menu_Poll+0x20>
     cba:	61 c0       	rjmp	.+194    	; 0xd7e <Menu_Poll+0xe2>
     cbc:	78 c0       	rjmp	.+240    	; 0xdae <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
     cbe:	e0 91 a5 04 	lds	r30, 0x04A5
     cc2:	f0 91 a6 04 	lds	r31, 0x04A6
     cc6:	02 88       	ldd	r0, Z+18	; 0x12
     cc8:	f3 89       	ldd	r31, Z+19	; 0x13
     cca:	e0 2d       	mov	r30, r0
     ccc:	30 97       	sbiw	r30, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <Menu_Poll+0x36>
					SYS_State->Right_Action();
     cd0:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
     cd2:	e0 91 a5 04 	lds	r30, 0x04A5
     cd6:	f0 91 a6 04 	lds	r31, 0x04A6
     cda:	80 85       	ldd	r24, Z+8	; 0x08
     cdc:	91 85       	ldd	r25, Z+9	; 0x09
     cde:	3c dc       	rcall	.-1928   	; 0x558 <FindState>
     ce0:	90 93 a6 04 	sts	0x04A6, r25
     ce4:	80 93 a5 04 	sts	0x04A5, r24
				State_Update();
     ce8:	63 dc       	rcall	.-1850   	; 0x5b0 <State_Update>
				DrawScreen();
     cea:	fb db       	rcall	.-2058   	; 0x4e2 <DrawScreen>
				break;
     cec:	62 c0       	rjmp	.+196    	; 0xdb2 <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
     cee:	e0 91 a5 04 	lds	r30, 0x04A5
     cf2:	f0 91 a6 04 	lds	r31, 0x04A6
     cf6:	00 88       	ldd	r0, Z+16	; 0x10
     cf8:	f1 89       	ldd	r31, Z+17	; 0x11
     cfa:	e0 2d       	mov	r30, r0
     cfc:	30 97       	sbiw	r30, 0x00	; 0
     cfe:	09 f0       	breq	.+2      	; 0xd02 <Menu_Poll+0x66>
					SYS_State->Left_Action();
     d00:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
     d02:	e0 91 a5 04 	lds	r30, 0x04A5
     d06:	f0 91 a6 04 	lds	r31, 0x04A6
     d0a:	86 81       	ldd	r24, Z+6	; 0x06
     d0c:	97 81       	ldd	r25, Z+7	; 0x07
     d0e:	24 dc       	rcall	.-1976   	; 0x558 <FindState>
     d10:	90 93 a6 04 	sts	0x04A6, r25
     d14:	80 93 a5 04 	sts	0x04A5, r24
				State_Update();
     d18:	4b dc       	rcall	.-1898   	; 0x5b0 <State_Update>
				DrawScreen();
     d1a:	e3 db       	rcall	.-2106   	; 0x4e2 <DrawScreen>
				break;
     d1c:	4a c0       	rjmp	.+148    	; 0xdb2 <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
     d1e:	e0 91 a5 04 	lds	r30, 0x04A5
     d22:	f0 91 a6 04 	lds	r31, 0x04A6
     d26:	04 84       	ldd	r0, Z+12	; 0x0c
     d28:	f5 85       	ldd	r31, Z+13	; 0x0d
     d2a:	e0 2d       	mov	r30, r0
     d2c:	30 97       	sbiw	r30, 0x00	; 0
     d2e:	09 f0       	breq	.+2      	; 0xd32 <Menu_Poll+0x96>
				SYS_State->Up_Action();
     d30:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
     d32:	e0 91 a5 04 	lds	r30, 0x04A5
     d36:	f0 91 a6 04 	lds	r31, 0x04A6
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	0c dc       	rcall	.-2024   	; 0x558 <FindState>
     d40:	90 93 a6 04 	sts	0x04A6, r25
     d44:	80 93 a5 04 	sts	0x04A5, r24
				State_Update();
     d48:	33 dc       	rcall	.-1946   	; 0x5b0 <State_Update>
				DrawScreen();
     d4a:	cb db       	rcall	.-2154   	; 0x4e2 <DrawScreen>
				break;
     d4c:	32 c0       	rjmp	.+100    	; 0xdb2 <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
     d4e:	e0 91 a5 04 	lds	r30, 0x04A5
     d52:	f0 91 a6 04 	lds	r31, 0x04A6
     d56:	06 84       	ldd	r0, Z+14	; 0x0e
     d58:	f7 85       	ldd	r31, Z+15	; 0x0f
     d5a:	e0 2d       	mov	r30, r0
     d5c:	30 97       	sbiw	r30, 0x00	; 0
     d5e:	09 f0       	breq	.+2      	; 0xd62 <Menu_Poll+0xc6>
				SYS_State->Down_Action();
     d60:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
     d62:	e0 91 a5 04 	lds	r30, 0x04A5
     d66:	f0 91 a6 04 	lds	r31, 0x04A6
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	95 81       	ldd	r25, Z+5	; 0x05
     d6e:	f4 db       	rcall	.-2072   	; 0x558 <FindState>
     d70:	90 93 a6 04 	sts	0x04A6, r25
     d74:	80 93 a5 04 	sts	0x04A5, r24
				State_Update();
     d78:	1b dc       	rcall	.-1994   	; 0x5b0 <State_Update>
				DrawScreen();
     d7a:	b3 db       	rcall	.-2202   	; 0x4e2 <DrawScreen>
				break;
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
     d7e:	e0 91 a5 04 	lds	r30, 0x04A5
     d82:	f0 91 a6 04 	lds	r31, 0x04A6
     d86:	04 88       	ldd	r0, Z+20	; 0x14
     d88:	f5 89       	ldd	r31, Z+21	; 0x15
     d8a:	e0 2d       	mov	r30, r0
     d8c:	30 97       	sbiw	r30, 0x00	; 0
     d8e:	09 f0       	breq	.+2      	; 0xd92 <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
     d90:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
     d92:	e0 91 a5 04 	lds	r30, 0x04A5
     d96:	f0 91 a6 04 	lds	r31, 0x04A6
     d9a:	82 85       	ldd	r24, Z+10	; 0x0a
     d9c:	93 85       	ldd	r25, Z+11	; 0x0b
     d9e:	dc db       	rcall	.-2120   	; 0x558 <FindState>
     da0:	90 93 a6 04 	sts	0x04A6, r25
     da4:	80 93 a5 04 	sts	0x04A5, r24
				State_Update();
     da8:	03 dc       	rcall	.-2042   	; 0x5b0 <State_Update>
				DrawScreen();
     daa:	9b db       	rcall	.-2250   	; 0x4e2 <DrawScreen>
				break;
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
     dae:	8f 3f       	cpi	r24, 0xFF	; 255
     db0:	d1 f0       	breq	.+52     	; 0xde6 <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
     db2:	80 91 a3 04 	lds	r24, 0x04A3
     db6:	90 91 a4 04 	lds	r25, 0x04A4
     dba:	fb d0       	rcall	.+502    	; 0xfb2 <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
     dbc:	e0 91 a5 04 	lds	r30, 0x04A5
     dc0:	f0 91 a6 04 	lds	r31, 0x04A6
     dc4:	06 88       	ldd	r0, Z+22	; 0x16
     dc6:	f7 89       	ldd	r31, Z+23	; 0x17
     dc8:	e0 2d       	mov	r30, r0
     dca:	f0 93 a4 04 	sts	0x04A4, r31
     dce:	e0 93 a3 04 	sts	0x04A3, r30
			if(Current_TimerFunc != NULL){
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	41 f0       	breq	.+16     	; 0xde6 <Menu_Poll+0x14a>
			Current_TimerFunc();
     dd6:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
     dd8:	68 ee       	ldi	r22, 0xE8	; 232
     dda:	73 e0       	ldi	r23, 0x03	; 3
     ddc:	80 91 a3 04 	lds	r24, 0x04A3
     de0:	90 91 a4 04 	lds	r25, 0x04A4
     de4:	91 c0       	rjmp	.+290    	; 0xf08 <Timer0_RegisterCallbackFunction>
     de6:	08 95       	ret

00000de8 <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
     de8:	eb eb       	ldi	r30, 0xBB	; 187
     dea:	f4 e0       	ldi	r31, 0x04	; 4
     dec:	8b ee       	ldi	r24, 0xEB	; 235
     dee:	94 e0       	ldi	r25, 0x04	; 4
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
     df0:	11 82       	std	Z+1, r1	; 0x01
     df2:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
     df4:	13 82       	std	Z+3, r1	; 0x03
     df6:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
     df8:	15 82       	std	Z+5, r1	; 0x05
     dfa:	14 82       	std	Z+4, r1	; 0x04
     dfc:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
     dfe:	e8 17       	cp	r30, r24
     e00:	f9 07       	cpc	r31, r25
     e02:	b1 f7       	brne	.-20     	; 0xdf0 <Timer0_Init+0x8>
     e04:	e3 eb       	ldi	r30, 0xB3	; 179
     e06:	f4 e0       	ldi	r31, 0x04	; 4
     e08:	8b eb       	ldi	r24, 0xBB	; 187
     e0a:	94 e0       	ldi	r25, 0x04	; 4
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
     e0c:	2f ef       	ldi	r18, 0xFF	; 255
     e0e:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     e10:	e8 17       	cp	r30, r24
     e12:	f9 07       	cpc	r31, r25
     e14:	e1 f7       	brne	.-8      	; 0xe0e <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
     e16:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
     e18:	83 b7       	in	r24, 0x33	; 51
     e1a:	87 60       	ori	r24, 0x07	; 7
     e1c:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
     e1e:	88 eb       	ldi	r24, 0xB8	; 184
     e20:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
     e22:	86 b7       	in	r24, 0x36	; 54
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
     e28:	87 b7       	in	r24, 0x37	; 55
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	87 bf       	out	0x37, r24	; 55
			sei();
     e2e:	78 94       	sei
     e30:	08 95       	ret

00000e32 <__vector_15>:
}


ISR(TIMER0_COMP_vect){
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	0b b6       	in	r0, 0x3b	; 59
     e3e:	0f 92       	push	r0
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
     e60:	88 eb       	ldi	r24, 0xB8	; 184
     e62:	82 bf       	out	0x32, r24	; 50
     e64:	cb eb       	ldi	r28, 0xBB	; 187
     e66:	d4 e0       	ldi	r29, 0x04	; 4
     e68:	0b ee       	ldi	r16, 0xEB	; 235
     e6a:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
     e6c:	88 81       	ld	r24, Y
     e6e:	99 81       	ldd	r25, Y+1	; 0x01
     e70:	89 2b       	or	r24, r25
     e72:	81 f0       	breq	.+32     	; 0xe94 <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	9d 81       	ldd	r25, Y+5	; 0x05
     e78:	2a 81       	ldd	r18, Y+2	; 0x02
     e7a:	3b 81       	ldd	r19, Y+3	; 0x03
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	31 f4       	brne	.+12     	; 0xe8e <__vector_15+0x5c>
				EventList[i].counter = 0;
     e82:	1d 82       	std	Y+5, r1	; 0x05
     e84:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
     e86:	e8 81       	ld	r30, Y
     e88:	f9 81       	ldd	r31, Y+1	; 0x01
     e8a:	09 95       	icall
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	9d 83       	std	Y+5, r25	; 0x05
     e92:	8c 83       	std	Y+4, r24	; 0x04
     e94:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
     e96:	c0 17       	cp	r28, r16
     e98:	d1 07       	cpc	r29, r17
     e9a:	41 f7       	brne	.-48     	; 0xe6c <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
     e9c:	80 91 a7 04 	lds	r24, 0x04A7
     ea0:	90 91 a8 04 	lds	r25, 0x04A8
     ea4:	9c 01       	movw	r18, r24
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	30 93 a8 04 	sts	0x04A8, r19
     eae:	20 93 a7 04 	sts	0x04A7, r18
     eb2:	84 36       	cpi	r24, 0x64	; 100
     eb4:	91 05       	cpc	r25, r1
     eb6:	89 f4       	brne	.+34     	; 0xeda <__vector_15+0xa8>
     eb8:	e3 eb       	ldi	r30, 0xB3	; 179
     eba:	f4 e0       	ldi	r31, 0x04	; 4
     ebc:	8b eb       	ldi	r24, 0xBB	; 187
     ebe:	94 e0       	ldi	r25, 0x04	; 4
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
     ec0:	20 81       	ld	r18, Z
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	2e 3f       	cpi	r18, 0xFE	; 254
     ec6:	08 f4       	brcc	.+2      	; 0xeca <__vector_15+0x98>
				CountDownTimers[i]--;
     ec8:	20 83       	st	Z, r18
     eca:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
     ecc:	e8 17       	cp	r30, r24
     ece:	f9 07       	cpc	r31, r25
     ed0:	b9 f7       	brne	.-18     	; 0xec0 <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
     ed2:	10 92 a8 04 	sts	0x04A8, r1
     ed6:	10 92 a7 04 	sts	0x04A7, r1
	}
	
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	0f 90       	pop	r0
     efc:	0b be       	out	0x3b, r0	; 59
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
     f04:	1f 90       	pop	r1
     f06:	18 95       	reti

00000f08 <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
     f0c:	6a 30       	cpi	r22, 0x0A	; 10
     f0e:	71 05       	cpc	r23, r1
     f10:	10 f4       	brcc	.+4      	; 0xf16 <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
     f12:	6a e0       	ldi	r22, 0x0A	; 10
     f14:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     f16:	c0 91 bb 04 	lds	r28, 0x04BB
     f1a:	d0 91 bc 04 	lds	r29, 0x04BC
     f1e:	c8 17       	cp	r28, r24
     f20:	d9 07       	cpc	r29, r25
     f22:	09 f4       	brne	.+2      	; 0xf26 <Timer0_RegisterCallbackFunction+0x1e>
     f24:	3e c0       	rjmp	.+124    	; 0xfa2 <Timer0_RegisterCallbackFunction+0x9a>
     f26:	ab ee       	ldi	r26, 0xEB	; 235
     f28:	b4 e0       	ldi	r27, 0x04	; 4
     f2a:	e1 ec       	ldi	r30, 0xC1	; 193
     f2c:	f4 e0       	ldi	r31, 0x04	; 4
     f2e:	40 81       	ld	r20, Z
     f30:	51 81       	ldd	r21, Z+1	; 0x01
     f32:	48 17       	cp	r20, r24
     f34:	59 07       	cpc	r21, r25
     f36:	b9 f1       	breq	.+110    	; 0xfa6 <Timer0_RegisterCallbackFunction+0x9e>
     f38:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     f3a:	ea 17       	cp	r30, r26
     f3c:	fb 07       	cpc	r31, r27
     f3e:	b9 f7       	brne	.-18     	; 0xf2e <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
     f40:	cd 2b       	or	r28, r29
     f42:	51 f0       	breq	.+20     	; 0xf58 <Timer0_RegisterCallbackFunction+0x50>
     f44:	e1 ec       	ldi	r30, 0xC1	; 193
     f46:	f4 e0       	ldi	r31, 0x04	; 4
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	ea 01       	movw	r28, r20
     f4e:	a0 81       	ld	r26, Z
     f50:	b1 81       	ldd	r27, Z+1	; 0x01
     f52:	ab 2b       	or	r26, r27
     f54:	f9 f4       	brne	.+62     	; 0xf94 <Timer0_RegisterCallbackFunction+0x8c>
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <Timer0_RegisterCallbackFunction+0x54>
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
     f5c:	ae 01       	movw	r20, r28
     f5e:	44 0f       	add	r20, r20
     f60:	55 1f       	adc	r21, r21
     f62:	fa 01       	movw	r30, r20
     f64:	ec 0f       	add	r30, r28
     f66:	fd 1f       	adc	r31, r29
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	e5 54       	subi	r30, 0x45	; 69
     f6e:	fb 4f       	sbci	r31, 0xFB	; 251
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
     f74:	9b 01       	movw	r18, r22
     f76:	ad ec       	ldi	r26, 0xCD	; 205
     f78:	bc ec       	ldi	r27, 0xCC	; 204
     f7a:	ef d2       	rcall	.+1502   	; 0x155a <__umulhisi3>
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	93 83       	std	Z+3, r25	; 0x03
     f8a:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
     f8c:	15 82       	std	Z+5, r1	; 0x05
     f8e:	14 82       	std	Z+4, r1	; 0x04
			return true;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0c c0       	rjmp	.+24     	; 0xfac <Timer0_RegisterCallbackFunction+0xa4>
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     f9a:	48 30       	cpi	r20, 0x08	; 8
     f9c:	51 05       	cpc	r21, r1
     f9e:	b1 f6       	brne	.-84     	; 0xf4c <Timer0_RegisterCallbackFunction+0x44>
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <Timer0_RegisterCallbackFunction+0xa4>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
     faa:	80 e0       	ldi	r24, 0x00	; 0
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     fb2:	20 91 bb 04 	lds	r18, 0x04BB
     fb6:	30 91 bc 04 	lds	r19, 0x04BC
     fba:	28 17       	cp	r18, r24
     fbc:	39 07       	cpc	r19, r25
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <Timer0_RemoveCallbackFunction+0x24>
     fc0:	e1 ec       	ldi	r30, 0xC1	; 193
     fc2:	f4 e0       	ldi	r31, 0x04	; 4
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	b9 01       	movw	r22, r18
     fca:	40 81       	ld	r20, Z
     fcc:	51 81       	ldd	r21, Z+1	; 0x01
     fce:	48 17       	cp	r20, r24
     fd0:	59 07       	cpc	r21, r25
     fd2:	e1 f4       	brne	.+56     	; 0x100c <Timer0_RemoveCallbackFunction+0x5a>
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <Timer0_RemoveCallbackFunction+0x28>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
     fda:	cb 01       	movw	r24, r22
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	fc 01       	movw	r30, r24
     fe2:	e6 0f       	add	r30, r22
     fe4:	f7 1f       	adc	r31, r23
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	e5 54       	subi	r30, 0x45	; 69
     fec:	fb 4f       	sbci	r31, 0xFB	; 251
     fee:	11 82       	std	Z+1, r1	; 0x01
     ff0:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
     ff2:	13 82       	std	Z+3, r1	; 0x03
     ff4:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
     ff6:	68 0f       	add	r22, r24
     ff8:	79 1f       	adc	r23, r25
     ffa:	fb 01       	movw	r30, r22
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e5 54       	subi	r30, 0x45	; 69
    1002:	fb 4f       	sbci	r31, 0xFB	; 251
    1004:	15 82       	std	Z+5, r1	; 0x05
    1006:	14 82       	std	Z+4, r1	; 0x04
			return true;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1012:	28 30       	cpi	r18, 0x08	; 8
    1014:	31 05       	cpc	r19, r1
    1016:	c1 f6       	brne	.-80     	; 0xfc8 <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    1018:	80 e0       	ldi	r24, 0x00	; 0
}
    101a:	08 95       	ret

0000101c <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
    101c:	80 91 b3 04 	lds	r24, 0x04B3
    1020:	8f 3f       	cpi	r24, 0xFF	; 255
    1022:	51 f0       	breq	.+20     	; 0x1038 <Timer0_AllocateCountdownTimer+0x1c>
    1024:	e4 eb       	ldi	r30, 0xB4	; 180
    1026:	f4 e0       	ldi	r31, 0x04	; 4
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	82 2f       	mov	r24, r18
    102e:	a9 01       	movw	r20, r18
    1030:	91 91       	ld	r25, Z+
    1032:	9f 3f       	cpi	r25, 0xFF	; 255
    1034:	51 f4       	brne	.+20     	; 0x104a <Timer0_AllocateCountdownTimer+0x2e>
    1036:	03 c0       	rjmp	.+6      	; 0x103e <Timer0_AllocateCountdownTimer+0x22>
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    103c:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
    103e:	fa 01       	movw	r30, r20
    1040:	ed 54       	subi	r30, 0x4D	; 77
    1042:	fb 4f       	sbci	r31, 0xFB	; 251
    1044:	10 82       	st	Z, r1
		return i+1;
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	08 95       	ret
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    104e:	28 30       	cpi	r18, 0x08	; 8
    1050:	31 05       	cpc	r19, r1
    1052:	61 f7       	brne	.-40     	; 0x102c <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
    1054:	80 e0       	ldi	r24, 0x00	; 0
}
    1056:	08 95       	ret

00001058 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
    1058:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
    105e:	ea e6       	ldi	r30, 0x6A	; 106
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
    1068:	89 b7       	in	r24, 0x39	; 57
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
    106e:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
    1070:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
    1072:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
    1074:	d3 df       	rcall	.-90     	; 0x101c <Timer0_AllocateCountdownTimer>
    1076:	80 93 eb 04 	sts	0x04EB, r24
    107a:	08 95       	ret

0000107c <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
    107c:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
    107e:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1080:	80 fd       	sbrc	r24, 0
    1082:	15 c0       	rjmp	.+42     	; 0x10ae <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    1084:	81 fd       	sbrc	r24, 1
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    1088:	82 fd       	sbrc	r24, 2
    108a:	15 c0       	rjmp	.+42     	; 0x10b6 <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    108c:	83 fd       	sbrc	r24, 3
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1090:	84 fd       	sbrc	r24, 4
    1092:	15 c0       	rjmp	.+42     	; 0x10be <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    1094:	85 fd       	sbrc	r24, 5
    1096:	15 c0       	rjmp	.+42     	; 0x10c2 <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    1098:	86 fd       	sbrc	r24, 6
    109a:	15 c0       	rjmp	.+42     	; 0x10c6 <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    109c:	88 23       	and	r24, r24
    109e:	d4 f4       	brge	.+52     	; 0x10d4 <button_interrupt+0x58>
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    10a2:	90 93 1f 03 	sts	0x031F, r25
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 a9 04 	sts	0x04A9, r24
    10ac:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    10ae:	95 e0       	ldi	r25, 0x05	; 5
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    10ca:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    10cc:	80 91 a9 04 	lds	r24, 0x04A9
    10d0:	88 23       	and	r24, r24
    10d2:	39 f3       	breq	.-50     	; 0x10a2 <button_interrupt+0x26>
    10d4:	08 95       	ret

000010d6 <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	0b b6       	in	r0, 0x3b	; 59
    10e2:	0f 92       	push	r0
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
cli();	
    10fc:	f8 94       	cli
button_interrupt();
    10fe:	be df       	rcall	.-132    	; 0x107c <button_interrupt>
sei();
    1100:	78 94       	sei
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0b be       	out	0x3b, r0	; 59
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    1128:	f8 94       	cli
	if(KEY_VALID){
    112a:	80 91 a9 04 	lds	r24, 0x04A9
    112e:	88 23       	and	r24, r24
    1130:	29 f0       	breq	.+10     	; 0x113c <getkey+0x14>
		k = KEY;
    1132:	80 91 1f 03 	lds	r24, 0x031F
		KEY_VALID = false;
    1136:	10 92 a9 04 	sts	0x04A9, r1
    113a:	01 c0       	rjmp	.+2      	; 0x113e <getkey+0x16>
		
	}
	else k=KEY_NULL;
    113c:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    113e:	78 94       	sei
	
	return k;
	
	
	
    1140:	08 95       	ret

00001142 <lcd12864_send_data>:
	lcd12864_write_char('.');
	float digi = v - (int)v;
	digi*=100;
	itoa((int)digi,str,10);
	lcd12864_write_str(str);
}
    1142:	98 e0       	ldi	r25, 0x08	; 8
    1144:	88 23       	and	r24, r24
    1146:	14 f4       	brge	.+4      	; 0x114c <lcd12864_send_data+0xa>
    1148:	1c 9a       	sbi	0x03, 4	; 3
    114a:	01 c0       	rjmp	.+2      	; 0x114e <lcd12864_send_data+0xc>
    114c:	1c 98       	cbi	0x03, 4	; 3
    114e:	88 0f       	add	r24, r24
    1150:	1b 9a       	sbi	0x03, 3	; 3
    1152:	00 00       	nop
    1154:	00 00       	nop
    1156:	00 00       	nop
    1158:	1b 98       	cbi	0x03, 3	; 3
    115a:	91 50       	subi	r25, 0x01	; 1
    115c:	99 f7       	brne	.-26     	; 0x1144 <lcd12864_send_data+0x2>
    115e:	08 95       	ret

00001160 <lcd12864_wait_busy>:
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	86 36       	cpi	r24, 0x66	; 102
    1168:	22 e0       	ldi	r18, 0x02	; 2
    116a:	92 07       	cpc	r25, r18
    116c:	d9 f7       	brne	.-10     	; 0x1164 <lcd12864_wait_busy+0x4>
    116e:	08 95       	ret

00001170 <lcd12864_send_cmd>:
    1170:	cf 93       	push	r28
    1172:	c8 2f       	mov	r28, r24
    1174:	1e 9a       	sbi	0x03, 6	; 3
    1176:	f4 df       	rcall	.-24     	; 0x1160 <lcd12864_wait_busy>
    1178:	88 ef       	ldi	r24, 0xF8	; 248
    117a:	e3 df       	rcall	.-58     	; 0x1142 <lcd12864_send_data>
    117c:	8c 2f       	mov	r24, r28
    117e:	80 7f       	andi	r24, 0xF0	; 240
    1180:	e0 df       	rcall	.-64     	; 0x1142 <lcd12864_send_data>
    1182:	8c 2f       	mov	r24, r28
    1184:	82 95       	swap	r24
    1186:	80 7f       	andi	r24, 0xF0	; 240
    1188:	dc df       	rcall	.-72     	; 0x1142 <lcd12864_send_data>
    118a:	1e 98       	cbi	0x03, 6	; 3
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <lcd12864_init>:
    1190:	82 b1       	in	r24, 0x02	; 2
    1192:	88 6f       	ori	r24, 0xF8	; 248
    1194:	82 b9       	out	0x02, r24	; 2
    1196:	1d 9a       	sbi	0x03, 5	; 3
    1198:	1f 98       	cbi	0x03, 7	; 3
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	81 15       	cp	r24, r1
    11a2:	20 e3       	ldi	r18, 0x30	; 48
    11a4:	92 07       	cpc	r25, r18
    11a6:	d9 f7       	brne	.-10     	; 0x119e <lcd12864_init+0xe>
    11a8:	80 e3       	ldi	r24, 0x30	; 48
    11aa:	e2 df       	rcall	.-60     	; 0x1170 <lcd12864_send_cmd>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	e0 df       	rcall	.-64     	; 0x1170 <lcd12864_send_cmd>
    11b0:	86 e0       	ldi	r24, 0x06	; 6
    11b2:	de df       	rcall	.-68     	; 0x1170 <lcd12864_send_cmd>
    11b4:	8c e0       	ldi	r24, 0x0C	; 12
    11b6:	dc cf       	rjmp	.-72     	; 0x1170 <lcd12864_send_cmd>
    11b8:	08 95       	ret

000011ba <lcd12864_clear>:
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	d9 df       	rcall	.-78     	; 0x1170 <lcd12864_send_cmd>
    11be:	d0 cf       	rjmp	.-96     	; 0x1160 <lcd12864_wait_busy>
    11c0:	08 95       	ret

000011c2 <lcd12864_set_pos>:
    11c2:	62 30       	cpi	r22, 0x02	; 2
    11c4:	89 f0       	breq	.+34     	; 0x11e8 <lcd12864_set_pos+0x26>
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <lcd12864_set_pos+0xc>
    11c8:	61 30       	cpi	r22, 0x01	; 1
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <lcd12864_set_pos+0x16>
    11cc:	0b c0       	rjmp	.+22     	; 0x11e4 <lcd12864_set_pos+0x22>
    11ce:	63 30       	cpi	r22, 0x03	; 3
    11d0:	29 f0       	breq	.+10     	; 0x11dc <lcd12864_set_pos+0x1a>
    11d2:	64 30       	cpi	r22, 0x04	; 4
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <lcd12864_set_pos+0x1e>
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <lcd12864_set_pos+0x22>
    11d8:	90 e8       	ldi	r25, 0x80	; 128
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <lcd12864_set_pos+0x28>
    11dc:	98 e8       	ldi	r25, 0x88	; 136
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <lcd12864_set_pos+0x28>
    11e0:	98 e9       	ldi	r25, 0x98	; 152
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <lcd12864_set_pos+0x28>
    11e4:	98 e9       	ldi	r25, 0x98	; 152
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <lcd12864_set_pos+0x28>
    11e8:	90 e9       	ldi	r25, 0x90	; 144
    11ea:	81 31       	cpi	r24, 0x11	; 17
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <lcd12864_set_pos+0x30>
    11ee:	89 0f       	add	r24, r25
    11f0:	bf cf       	rjmp	.-130    	; 0x1170 <lcd12864_send_cmd>
    11f2:	08 95       	ret

000011f4 <lcd12864_write_char>:
    11f4:	cf 93       	push	r28
    11f6:	c8 2f       	mov	r28, r24
    11f8:	1e 9a       	sbi	0x03, 6	; 3
    11fa:	b2 df       	rcall	.-156    	; 0x1160 <lcd12864_wait_busy>
    11fc:	8a ef       	ldi	r24, 0xFA	; 250
    11fe:	a1 df       	rcall	.-190    	; 0x1142 <lcd12864_send_data>
    1200:	8c 2f       	mov	r24, r28
    1202:	80 7f       	andi	r24, 0xF0	; 240
    1204:	9e df       	rcall	.-196    	; 0x1142 <lcd12864_send_data>
    1206:	8c 2f       	mov	r24, r28
    1208:	82 95       	swap	r24
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	9a df       	rcall	.-204    	; 0x1142 <lcd12864_send_data>
    120e:	1e 98       	cbi	0x03, 6	; 3
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <lcd12864_write_str>:
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	88 81       	ld	r24, Y
    121e:	88 23       	and	r24, r24
    1220:	49 f0       	breq	.+18     	; 0x1234 <lcd12864_write_str+0x20>
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	e7 df       	rcall	.-50     	; 0x11f4 <lcd12864_write_char>
    1226:	1f 5f       	subi	r17, 0xFF	; 255
    1228:	fe 01       	movw	r30, r28
    122a:	e1 0f       	add	r30, r17
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	81 11       	cpse	r24, r1
    1232:	f8 cf       	rjmp	.-16     	; 0x1224 <lcd12864_write_str+0x10>
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	08 95       	ret

0000123c <lcd12864_write_int>:
    123c:	4a e0       	ldi	r20, 0x0A	; 10
    123e:	62 e4       	ldi	r22, 0x42	; 66
    1240:	73 e0       	ldi	r23, 0x03	; 3
    1242:	9a d1       	rcall	.+820    	; 0x1578 <__itoa_ncheck>


void lcd12864_write_int(int v){
	char *str="    ";
	itoa(v,str,10);
	lcd12864_write_str(str);
    1244:	82 e4       	ldi	r24, 0x42	; 66
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	e5 cf       	rjmp	.-54     	; 0x1214 <lcd12864_write_str>
    124a:	08 95       	ret

0000124c <__subsf3>:
    124c:	50 58       	subi	r21, 0x80	; 128

0000124e <__addsf3>:
    124e:	bb 27       	eor	r27, r27
    1250:	aa 27       	eor	r26, r26
    1252:	0e d0       	rcall	.+28     	; 0x1270 <__addsf3x>
    1254:	e5 c0       	rjmp	.+458    	; 0x1420 <__fp_round>
    1256:	d6 d0       	rcall	.+428    	; 0x1404 <__fp_pscA>
    1258:	30 f0       	brcs	.+12     	; 0x1266 <__addsf3+0x18>
    125a:	db d0       	rcall	.+438    	; 0x1412 <__fp_pscB>
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__addsf3+0x18>
    125e:	31 f4       	brne	.+12     	; 0x126c <__addsf3+0x1e>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	11 f4       	brne	.+4      	; 0x1268 <__addsf3+0x1a>
    1264:	1e f4       	brtc	.+6      	; 0x126c <__addsf3+0x1e>
    1266:	cb c0       	rjmp	.+406    	; 0x13fe <__fp_nan>
    1268:	0e f4       	brtc	.+2      	; 0x126c <__addsf3+0x1e>
    126a:	e0 95       	com	r30
    126c:	e7 fb       	bst	r30, 7
    126e:	c1 c0       	rjmp	.+386    	; 0x13f2 <__fp_inf>

00001270 <__addsf3x>:
    1270:	e9 2f       	mov	r30, r25
    1272:	e7 d0       	rcall	.+462    	; 0x1442 <__fp_split3>
    1274:	80 f3       	brcs	.-32     	; 0x1256 <__addsf3+0x8>
    1276:	ba 17       	cp	r27, r26
    1278:	62 07       	cpc	r22, r18
    127a:	73 07       	cpc	r23, r19
    127c:	84 07       	cpc	r24, r20
    127e:	95 07       	cpc	r25, r21
    1280:	18 f0       	brcs	.+6      	; 0x1288 <__addsf3x+0x18>
    1282:	71 f4       	brne	.+28     	; 0x12a0 <__addsf3x+0x30>
    1284:	9e f5       	brtc	.+102    	; 0x12ec <__addsf3x+0x7c>
    1286:	ff c0       	rjmp	.+510    	; 0x1486 <__fp_zero>
    1288:	0e f4       	brtc	.+2      	; 0x128c <__addsf3x+0x1c>
    128a:	e0 95       	com	r30
    128c:	0b 2e       	mov	r0, r27
    128e:	ba 2f       	mov	r27, r26
    1290:	a0 2d       	mov	r26, r0
    1292:	0b 01       	movw	r0, r22
    1294:	b9 01       	movw	r22, r18
    1296:	90 01       	movw	r18, r0
    1298:	0c 01       	movw	r0, r24
    129a:	ca 01       	movw	r24, r20
    129c:	a0 01       	movw	r20, r0
    129e:	11 24       	eor	r1, r1
    12a0:	ff 27       	eor	r31, r31
    12a2:	59 1b       	sub	r21, r25
    12a4:	99 f0       	breq	.+38     	; 0x12cc <__addsf3x+0x5c>
    12a6:	59 3f       	cpi	r21, 0xF9	; 249
    12a8:	50 f4       	brcc	.+20     	; 0x12be <__addsf3x+0x4e>
    12aa:	50 3e       	cpi	r21, 0xE0	; 224
    12ac:	68 f1       	brcs	.+90     	; 0x1308 <__addsf3x+0x98>
    12ae:	1a 16       	cp	r1, r26
    12b0:	f0 40       	sbci	r31, 0x00	; 0
    12b2:	a2 2f       	mov	r26, r18
    12b4:	23 2f       	mov	r18, r19
    12b6:	34 2f       	mov	r19, r20
    12b8:	44 27       	eor	r20, r20
    12ba:	58 5f       	subi	r21, 0xF8	; 248
    12bc:	f3 cf       	rjmp	.-26     	; 0x12a4 <__addsf3x+0x34>
    12be:	46 95       	lsr	r20
    12c0:	37 95       	ror	r19
    12c2:	27 95       	ror	r18
    12c4:	a7 95       	ror	r26
    12c6:	f0 40       	sbci	r31, 0x00	; 0
    12c8:	53 95       	inc	r21
    12ca:	c9 f7       	brne	.-14     	; 0x12be <__addsf3x+0x4e>
    12cc:	7e f4       	brtc	.+30     	; 0x12ec <__addsf3x+0x7c>
    12ce:	1f 16       	cp	r1, r31
    12d0:	ba 0b       	sbc	r27, r26
    12d2:	62 0b       	sbc	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	ba f0       	brmi	.+46     	; 0x1308 <__addsf3x+0x98>
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	a1 f0       	breq	.+40     	; 0x1306 <__addsf3x+0x96>
    12de:	ff 0f       	add	r31, r31
    12e0:	bb 1f       	adc	r27, r27
    12e2:	66 1f       	adc	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	c2 f7       	brpl	.-16     	; 0x12da <__addsf3x+0x6a>
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <__addsf3x+0x98>
    12ec:	ba 0f       	add	r27, r26
    12ee:	62 1f       	adc	r22, r18
    12f0:	73 1f       	adc	r23, r19
    12f2:	84 1f       	adc	r24, r20
    12f4:	48 f4       	brcc	.+18     	; 0x1308 <__addsf3x+0x98>
    12f6:	87 95       	ror	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f7 95       	ror	r31
    1300:	9e 3f       	cpi	r25, 0xFE	; 254
    1302:	08 f0       	brcs	.+2      	; 0x1306 <__addsf3x+0x96>
    1304:	b3 cf       	rjmp	.-154    	; 0x126c <__addsf3+0x1e>
    1306:	93 95       	inc	r25
    1308:	88 0f       	add	r24, r24
    130a:	08 f0       	brcs	.+2      	; 0x130e <__addsf3x+0x9e>
    130c:	99 27       	eor	r25, r25
    130e:	ee 0f       	add	r30, r30
    1310:	97 95       	ror	r25
    1312:	87 95       	ror	r24
    1314:	08 95       	ret

00001316 <__fixsfsi>:
    1316:	04 d0       	rcall	.+8      	; 0x1320 <__fixunssfsi>
    1318:	68 94       	set
    131a:	b1 11       	cpse	r27, r1
    131c:	b5 c0       	rjmp	.+362    	; 0x1488 <__fp_szero>
    131e:	08 95       	ret

00001320 <__fixunssfsi>:
    1320:	98 d0       	rcall	.+304    	; 0x1452 <__fp_splitA>
    1322:	88 f0       	brcs	.+34     	; 0x1346 <__fixunssfsi+0x26>
    1324:	9f 57       	subi	r25, 0x7F	; 127
    1326:	90 f0       	brcs	.+36     	; 0x134c <__fixunssfsi+0x2c>
    1328:	b9 2f       	mov	r27, r25
    132a:	99 27       	eor	r25, r25
    132c:	b7 51       	subi	r27, 0x17	; 23
    132e:	a0 f0       	brcs	.+40     	; 0x1358 <__fixunssfsi+0x38>
    1330:	d1 f0       	breq	.+52     	; 0x1366 <__fixunssfsi+0x46>
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	1a f0       	brmi	.+6      	; 0x1342 <__fixunssfsi+0x22>
    133c:	ba 95       	dec	r27
    133e:	c9 f7       	brne	.-14     	; 0x1332 <__fixunssfsi+0x12>
    1340:	12 c0       	rjmp	.+36     	; 0x1366 <__fixunssfsi+0x46>
    1342:	b1 30       	cpi	r27, 0x01	; 1
    1344:	81 f0       	breq	.+32     	; 0x1366 <__fixunssfsi+0x46>
    1346:	9f d0       	rcall	.+318    	; 0x1486 <__fp_zero>
    1348:	b1 e0       	ldi	r27, 0x01	; 1
    134a:	08 95       	ret
    134c:	9c c0       	rjmp	.+312    	; 0x1486 <__fp_zero>
    134e:	67 2f       	mov	r22, r23
    1350:	78 2f       	mov	r23, r24
    1352:	88 27       	eor	r24, r24
    1354:	b8 5f       	subi	r27, 0xF8	; 248
    1356:	39 f0       	breq	.+14     	; 0x1366 <__fixunssfsi+0x46>
    1358:	b9 3f       	cpi	r27, 0xF9	; 249
    135a:	cc f3       	brlt	.-14     	; 0x134e <__fixunssfsi+0x2e>
    135c:	86 95       	lsr	r24
    135e:	77 95       	ror	r23
    1360:	67 95       	ror	r22
    1362:	b3 95       	inc	r27
    1364:	d9 f7       	brne	.-10     	; 0x135c <__fixunssfsi+0x3c>
    1366:	3e f4       	brtc	.+14     	; 0x1376 <__fixunssfsi+0x56>
    1368:	90 95       	com	r25
    136a:	80 95       	com	r24
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	08 95       	ret

00001378 <__floatunsisf>:
    1378:	e8 94       	clt
    137a:	09 c0       	rjmp	.+18     	; 0x138e <__floatsisf+0x12>

0000137c <__floatsisf>:
    137c:	97 fb       	bst	r25, 7
    137e:	3e f4       	brtc	.+14     	; 0x138e <__floatsisf+0x12>
    1380:	90 95       	com	r25
    1382:	80 95       	com	r24
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	99 23       	and	r25, r25
    1390:	a9 f0       	breq	.+42     	; 0x13bc <__floatsisf+0x40>
    1392:	f9 2f       	mov	r31, r25
    1394:	96 e9       	ldi	r25, 0x96	; 150
    1396:	bb 27       	eor	r27, r27
    1398:	93 95       	inc	r25
    139a:	f6 95       	lsr	r31
    139c:	87 95       	ror	r24
    139e:	77 95       	ror	r23
    13a0:	67 95       	ror	r22
    13a2:	b7 95       	ror	r27
    13a4:	f1 11       	cpse	r31, r1
    13a6:	f8 cf       	rjmp	.-16     	; 0x1398 <__floatsisf+0x1c>
    13a8:	fa f4       	brpl	.+62     	; 0x13e8 <__floatsisf+0x6c>
    13aa:	bb 0f       	add	r27, r27
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__floatsisf+0x36>
    13ae:	60 ff       	sbrs	r22, 0
    13b0:	1b c0       	rjmp	.+54     	; 0x13e8 <__floatsisf+0x6c>
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	16 c0       	rjmp	.+44     	; 0x13e8 <__floatsisf+0x6c>
    13bc:	88 23       	and	r24, r24
    13be:	11 f0       	breq	.+4      	; 0x13c4 <__floatsisf+0x48>
    13c0:	96 e9       	ldi	r25, 0x96	; 150
    13c2:	11 c0       	rjmp	.+34     	; 0x13e6 <__floatsisf+0x6a>
    13c4:	77 23       	and	r23, r23
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <__floatsisf+0x54>
    13c8:	9e e8       	ldi	r25, 0x8E	; 142
    13ca:	87 2f       	mov	r24, r23
    13cc:	76 2f       	mov	r23, r22
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <__floatsisf+0x5e>
    13d0:	66 23       	and	r22, r22
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <__floatsisf+0x74>
    13d4:	96 e8       	ldi	r25, 0x86	; 134
    13d6:	86 2f       	mov	r24, r22
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	2a f0       	brmi	.+10     	; 0x13e8 <__floatsisf+0x6c>
    13de:	9a 95       	dec	r25
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	da f7       	brpl	.-10     	; 0x13de <__floatsisf+0x62>
    13e8:	88 0f       	add	r24, r24
    13ea:	96 95       	lsr	r25
    13ec:	87 95       	ror	r24
    13ee:	97 f9       	bld	r25, 7
    13f0:	08 95       	ret

000013f2 <__fp_inf>:
    13f2:	97 f9       	bld	r25, 7
    13f4:	9f 67       	ori	r25, 0x7F	; 127
    13f6:	80 e8       	ldi	r24, 0x80	; 128
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	08 95       	ret

000013fe <__fp_nan>:
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	80 ec       	ldi	r24, 0xC0	; 192
    1402:	08 95       	ret

00001404 <__fp_pscA>:
    1404:	00 24       	eor	r0, r0
    1406:	0a 94       	dec	r0
    1408:	16 16       	cp	r1, r22
    140a:	17 06       	cpc	r1, r23
    140c:	18 06       	cpc	r1, r24
    140e:	09 06       	cpc	r0, r25
    1410:	08 95       	ret

00001412 <__fp_pscB>:
    1412:	00 24       	eor	r0, r0
    1414:	0a 94       	dec	r0
    1416:	12 16       	cp	r1, r18
    1418:	13 06       	cpc	r1, r19
    141a:	14 06       	cpc	r1, r20
    141c:	05 06       	cpc	r0, r21
    141e:	08 95       	ret

00001420 <__fp_round>:
    1420:	09 2e       	mov	r0, r25
    1422:	03 94       	inc	r0
    1424:	00 0c       	add	r0, r0
    1426:	11 f4       	brne	.+4      	; 0x142c <__fp_round+0xc>
    1428:	88 23       	and	r24, r24
    142a:	52 f0       	brmi	.+20     	; 0x1440 <__fp_round+0x20>
    142c:	bb 0f       	add	r27, r27
    142e:	40 f4       	brcc	.+16     	; 0x1440 <__fp_round+0x20>
    1430:	bf 2b       	or	r27, r31
    1432:	11 f4       	brne	.+4      	; 0x1438 <__fp_round+0x18>
    1434:	60 ff       	sbrs	r22, 0
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <__fp_round+0x20>
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	08 95       	ret

00001442 <__fp_split3>:
    1442:	57 fd       	sbrc	r21, 7
    1444:	90 58       	subi	r25, 0x80	; 128
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	59 f0       	breq	.+22     	; 0x1462 <__fp_splitA+0x10>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	71 f0       	breq	.+28     	; 0x146c <__fp_splitA+0x1a>
    1450:	47 95       	ror	r20

00001452 <__fp_splitA>:
    1452:	88 0f       	add	r24, r24
    1454:	97 fb       	bst	r25, 7
    1456:	99 1f       	adc	r25, r25
    1458:	61 f0       	breq	.+24     	; 0x1472 <__fp_splitA+0x20>
    145a:	9f 3f       	cpi	r25, 0xFF	; 255
    145c:	79 f0       	breq	.+30     	; 0x147c <__fp_splitA+0x2a>
    145e:	87 95       	ror	r24
    1460:	08 95       	ret
    1462:	12 16       	cp	r1, r18
    1464:	13 06       	cpc	r1, r19
    1466:	14 06       	cpc	r1, r20
    1468:	55 1f       	adc	r21, r21
    146a:	f2 cf       	rjmp	.-28     	; 0x1450 <__fp_split3+0xe>
    146c:	46 95       	lsr	r20
    146e:	f1 df       	rcall	.-30     	; 0x1452 <__fp_splitA>
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <__fp_splitA+0x30>
    1472:	16 16       	cp	r1, r22
    1474:	17 06       	cpc	r1, r23
    1476:	18 06       	cpc	r1, r24
    1478:	99 1f       	adc	r25, r25
    147a:	f1 cf       	rjmp	.-30     	; 0x145e <__fp_splitA+0xc>
    147c:	86 95       	lsr	r24
    147e:	71 05       	cpc	r23, r1
    1480:	61 05       	cpc	r22, r1
    1482:	08 94       	sec
    1484:	08 95       	ret

00001486 <__fp_zero>:
    1486:	e8 94       	clt

00001488 <__fp_szero>:
    1488:	bb 27       	eor	r27, r27
    148a:	66 27       	eor	r22, r22
    148c:	77 27       	eor	r23, r23
    148e:	cb 01       	movw	r24, r22
    1490:	97 f9       	bld	r25, 7
    1492:	08 95       	ret

00001494 <__mulsf3>:
    1494:	0b d0       	rcall	.+22     	; 0x14ac <__mulsf3x>
    1496:	c4 cf       	rjmp	.-120    	; 0x1420 <__fp_round>
    1498:	b5 df       	rcall	.-150    	; 0x1404 <__fp_pscA>
    149a:	28 f0       	brcs	.+10     	; 0x14a6 <__mulsf3+0x12>
    149c:	ba df       	rcall	.-140    	; 0x1412 <__fp_pscB>
    149e:	18 f0       	brcs	.+6      	; 0x14a6 <__mulsf3+0x12>
    14a0:	95 23       	and	r25, r21
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__mulsf3+0x12>
    14a4:	a6 cf       	rjmp	.-180    	; 0x13f2 <__fp_inf>
    14a6:	ab cf       	rjmp	.-170    	; 0x13fe <__fp_nan>
    14a8:	11 24       	eor	r1, r1
    14aa:	ee cf       	rjmp	.-36     	; 0x1488 <__fp_szero>

000014ac <__mulsf3x>:
    14ac:	ca df       	rcall	.-108    	; 0x1442 <__fp_split3>
    14ae:	a0 f3       	brcs	.-24     	; 0x1498 <__mulsf3+0x4>

000014b0 <__mulsf3_pse>:
    14b0:	95 9f       	mul	r25, r21
    14b2:	d1 f3       	breq	.-12     	; 0x14a8 <__mulsf3+0x14>
    14b4:	95 0f       	add	r25, r21
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	55 1f       	adc	r21, r21
    14ba:	62 9f       	mul	r22, r18
    14bc:	f0 01       	movw	r30, r0
    14be:	72 9f       	mul	r23, r18
    14c0:	bb 27       	eor	r27, r27
    14c2:	f0 0d       	add	r31, r0
    14c4:	b1 1d       	adc	r27, r1
    14c6:	63 9f       	mul	r22, r19
    14c8:	aa 27       	eor	r26, r26
    14ca:	f0 0d       	add	r31, r0
    14cc:	b1 1d       	adc	r27, r1
    14ce:	aa 1f       	adc	r26, r26
    14d0:	64 9f       	mul	r22, r20
    14d2:	66 27       	eor	r22, r22
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	66 1f       	adc	r22, r22
    14da:	82 9f       	mul	r24, r18
    14dc:	22 27       	eor	r18, r18
    14de:	b0 0d       	add	r27, r0
    14e0:	a1 1d       	adc	r26, r1
    14e2:	62 1f       	adc	r22, r18
    14e4:	73 9f       	mul	r23, r19
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	62 1f       	adc	r22, r18
    14ec:	83 9f       	mul	r24, r19
    14ee:	a0 0d       	add	r26, r0
    14f0:	61 1d       	adc	r22, r1
    14f2:	22 1f       	adc	r18, r18
    14f4:	74 9f       	mul	r23, r20
    14f6:	33 27       	eor	r19, r19
    14f8:	a0 0d       	add	r26, r0
    14fa:	61 1d       	adc	r22, r1
    14fc:	23 1f       	adc	r18, r19
    14fe:	84 9f       	mul	r24, r20
    1500:	60 0d       	add	r22, r0
    1502:	21 1d       	adc	r18, r1
    1504:	82 2f       	mov	r24, r18
    1506:	76 2f       	mov	r23, r22
    1508:	6a 2f       	mov	r22, r26
    150a:	11 24       	eor	r1, r1
    150c:	9f 57       	subi	r25, 0x7F	; 127
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	8a f0       	brmi	.+34     	; 0x1534 <__mulsf3_pse+0x84>
    1512:	e1 f0       	breq	.+56     	; 0x154c <__mulsf3_pse+0x9c>
    1514:	88 23       	and	r24, r24
    1516:	4a f0       	brmi	.+18     	; 0x152a <__mulsf3_pse+0x7a>
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	bb 1f       	adc	r27, r27
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__mulsf3_pse+0x64>
    152a:	9e 3f       	cpi	r25, 0xFE	; 254
    152c:	51 05       	cpc	r21, r1
    152e:	70 f0       	brcs	.+28     	; 0x154c <__mulsf3_pse+0x9c>
    1530:	60 cf       	rjmp	.-320    	; 0x13f2 <__fp_inf>
    1532:	aa cf       	rjmp	.-172    	; 0x1488 <__fp_szero>
    1534:	5f 3f       	cpi	r21, 0xFF	; 255
    1536:	ec f3       	brlt	.-6      	; 0x1532 <__mulsf3_pse+0x82>
    1538:	98 3e       	cpi	r25, 0xE8	; 232
    153a:	dc f3       	brlt	.-10     	; 0x1532 <__mulsf3_pse+0x82>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f7 95       	ror	r31
    1546:	e7 95       	ror	r30
    1548:	9f 5f       	subi	r25, 0xFF	; 255
    154a:	c1 f7       	brne	.-16     	; 0x153c <__mulsf3_pse+0x8c>
    154c:	fe 2b       	or	r31, r30
    154e:	88 0f       	add	r24, r24
    1550:	91 1d       	adc	r25, r1
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret

0000155a <__umulhisi3>:
    155a:	a2 9f       	mul	r26, r18
    155c:	b0 01       	movw	r22, r0
    155e:	b3 9f       	mul	r27, r19
    1560:	c0 01       	movw	r24, r0
    1562:	a3 9f       	mul	r26, r19
    1564:	70 0d       	add	r23, r0
    1566:	81 1d       	adc	r24, r1
    1568:	11 24       	eor	r1, r1
    156a:	91 1d       	adc	r25, r1
    156c:	b2 9f       	mul	r27, r18
    156e:	70 0d       	add	r23, r0
    1570:	81 1d       	adc	r24, r1
    1572:	11 24       	eor	r1, r1
    1574:	91 1d       	adc	r25, r1
    1576:	08 95       	ret

00001578 <__itoa_ncheck>:
    1578:	bb 27       	eor	r27, r27
    157a:	4a 30       	cpi	r20, 0x0A	; 10
    157c:	31 f4       	brne	.+12     	; 0x158a <__itoa_ncheck+0x12>
    157e:	99 23       	and	r25, r25
    1580:	22 f4       	brpl	.+8      	; 0x158a <__itoa_ncheck+0x12>
    1582:	bd e2       	ldi	r27, 0x2D	; 45
    1584:	90 95       	com	r25
    1586:	81 95       	neg	r24
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	01 c0       	rjmp	.+2      	; 0x158e <__utoa_common>

0000158c <__utoa_ncheck>:
    158c:	bb 27       	eor	r27, r27

0000158e <__utoa_common>:
    158e:	fb 01       	movw	r30, r22
    1590:	55 27       	eor	r21, r21
    1592:	aa 27       	eor	r26, r26
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	aa 1f       	adc	r26, r26
    159a:	a4 17       	cp	r26, r20
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <__utoa_common+0x14>
    159e:	a4 1b       	sub	r26, r20
    15a0:	83 95       	inc	r24
    15a2:	50 51       	subi	r21, 0x10	; 16
    15a4:	b9 f7       	brne	.-18     	; 0x1594 <__utoa_common+0x6>
    15a6:	a0 5d       	subi	r26, 0xD0	; 208
    15a8:	aa 33       	cpi	r26, 0x3A	; 58
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <__utoa_common+0x20>
    15ac:	a9 5d       	subi	r26, 0xD9	; 217
    15ae:	a1 93       	st	Z+, r26
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	79 f7       	brne	.-34     	; 0x1592 <__utoa_common+0x4>
    15b4:	b1 11       	cpse	r27, r1
    15b6:	b1 93       	st	Z+, r27
    15b8:	11 92       	st	Z+, r1
    15ba:	cb 01       	movw	r24, r22
    15bc:	00 c0       	rjmp	.+0      	; 0x15be <strrev>

000015be <strrev>:
    15be:	dc 01       	movw	r26, r24
    15c0:	fc 01       	movw	r30, r24
    15c2:	67 2f       	mov	r22, r23
    15c4:	71 91       	ld	r23, Z+
    15c6:	77 23       	and	r23, r23
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <strrev+0x4>
    15ca:	32 97       	sbiw	r30, 0x02	; 2
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <strrev+0x18>
    15ce:	7c 91       	ld	r23, X
    15d0:	6d 93       	st	X+, r22
    15d2:	70 83       	st	Z, r23
    15d4:	62 91       	ld	r22, -Z
    15d6:	ae 17       	cp	r26, r30
    15d8:	bf 07       	cpc	r27, r31
    15da:	c8 f3       	brcs	.-14     	; 0x15ce <strrev+0x10>
    15dc:	08 95       	ret

000015de <_exit>:
    15de:	f8 94       	cli

000015e0 <__stop_program>:
    15e0:	ff cf       	rjmp	.-2      	; 0x15e0 <__stop_program>


AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039a  00800100  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080049a  0080049a  00001bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f84  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be3  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003dcc  00000000  00000000  000049c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000530  00000000  00000000  00008790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010dd4  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001222  00000000  00000000  00019a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  0001acb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001553  00000000  00000000  0001ae76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c7       	rjmp	.+3706   	; 0xeb8 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ea       	ldi	r30, 0xAE	; 174
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 39       	cpi	r26, 0x9A	; 154
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	aa e9       	ldi	r26, 0x9A	; 154
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3e       	cpi	r26, 0xEE	; 238
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      ca:	0e 94 6f 08 	call	0x10de	; 0x10de <buttons_init>
	lcd12864_init();
      ce:	0e 94 0e 09 	call	0x121c	; 0x121c <lcd12864_init>
	init_IO();
      d2:	24 d2       	rcall	.+1096   	; 0x51c <init_IO>
	emv_ports_init();
      d4:	0f d2       	rcall	.+1054   	; 0x4f4 <emv_ports_init>
	Timer0_Init();
      d6:	cb d6       	rcall	.+3478   	; 0xe6e <Timer0_Init>
	ADC_init();
      d8:	7d d1       	rcall	.+762    	; 0x3d4 <ADC_init>
	Menu_Init();
      da:	06 d6       	rcall	.+3084   	; 0xce8 <Menu_Init>
	
	
	//lcd12864_set_pos(1,1);
	//lcd12864_write_str("ab");
	lcd12864_SetWhite(2,1,8,0);
      dc:	20 e0       	ldi	r18, 0x00	; 0
      de:	48 e0       	ldi	r20, 0x08	; 8
      e0:	61 e0       	ldi	r22, 0x01	; 1
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <lcd12864_SetWhite>
	lcd12864_SetWhite(2,2,8,1);
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	48 e0       	ldi	r20, 0x08	; 8
      ec:	62 e0       	ldi	r22, 0x02	; 2
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <lcd12864_SetWhite>
	while(1){
	Menu_Poll();
      f4:	16 d6       	rcall	.+3116   	; 0xd22 <Menu_Poll>
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0x2a>

000000f8 <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	00 d0       	rcall	.+0      	; 0x10a <Act_Update_Main+0x12>
     10a:	00 d0       	rcall	.+0      	; 0x10c <Act_Update_Main+0x14>
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = PD_Mode;
     110:	10 91 20 03 	lds	r17, 0x0320
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 91 a2 04 	lds	r25, 0x04A2
     11a:	91 11       	cpse	r25, r1
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	80 93 a2 04 	sts	0x04A2, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	int pressure_diff = (int)ADC_read(PRESSURE);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	70 d1       	rcall	.+736    	; 0x406 <ADC_read>
     126:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__fixsfsi>
     12a:	6b 01       	movw	r12, r22
     12c:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     12e:	4a e0       	ldi	r20, 0x0A	; 10
     130:	be 01       	movw	r22, r28
     132:	6f 5f       	subi	r22, 0xFF	; 255
     134:	7f 4f       	sbci	r23, 0xFF	; 255
     136:	c6 01       	movw	r24, r12
     138:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__itoa_ncheck>
	itoa(pressure_diff,pdstr,10);
	lcd12864_set_pos(0,1);
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd12864_set_pos>
	switch(mode){
     144:	12 30       	cpi	r17, 0x02	; 2
     146:	49 f0       	breq	.+18     	; 0x15a <Act_Update_Main+0x62>
     148:	13 30       	cpi	r17, 0x03	; 3
     14a:	61 f0       	breq	.+24     	; 0x164 <Act_Update_Main+0x6c>
     14c:	11 30       	cpi	r17, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <Act_Update_Main+0x76>
		case 1:
		lcd12864_write_str(MODE1);
     150:	82 e2       	ldi	r24, 0x22	; 34
     152:	93 e0       	ldi	r25, 0x03	; 3
     154:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd12864_write_str>
		break;
     158:	0e c0       	rjmp	.+28     	; 0x176 <Act_Update_Main+0x7e>
		case 2:
		lcd12864_write_str(MODE2);
     15a:	86 e2       	ldi	r24, 0x26	; 38
     15c:	93 e0       	ldi	r25, 0x03	; 3
     15e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd12864_write_str>
		break;
     162:	09 c0       	rjmp	.+18     	; 0x176 <Act_Update_Main+0x7e>
		case 3:
		lcd12864_write_str(MODE3);
     164:	8a e2       	ldi	r24, 0x2A	; 42
     166:	93 e0       	ldi	r25, 0x03	; 3
     168:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd12864_write_str>
		break;
     16c:	04 c0       	rjmp	.+8      	; 0x176 <Act_Update_Main+0x7e>
		default:
		lcd12864_write_str(MODE0);
     16e:	8e e2       	ldi	r24, 0x2E	; 46
     170:	93 e0       	ldi	r25, 0x03	; 3
     172:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd12864_write_str>
		break;
	}
	
	lcd12864_set_pos(4,1);
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd12864_set_pos>
	if(Blowing_State){
     17e:	80 91 a3 04 	lds	r24, 0x04A3
     182:	88 23       	and	r24, r24
     184:	61 f0       	breq	.+24     	; 0x19e <Act_Update_Main+0xa6>
		if(blink_factor)
     186:	80 91 a2 04 	lds	r24, 0x04A2
     18a:	88 23       	and	r24, r24
     18c:	21 f0       	breq	.+8      	; 0x196 <Act_Update_Main+0x9e>
		lcd12864_write_char(0x0f);
     18e:	8f e0       	ldi	r24, 0x0F	; 15
     190:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
     194:	0f c0       	rjmp	.+30     	; 0x1b4 <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
     19c:	0b c0       	rjmp	.+22     	; 0x1b4 <Act_Update_Main+0xbc>
	}
	else{
		if(blink_factor)
     19e:	80 91 a2 04 	lds	r24, 0x04A2
     1a2:	88 23       	and	r24, r24
     1a4:	21 f0       	breq	.+8      	; 0x1ae <Act_Update_Main+0xb6>
		lcd12864_write_char(0x07);
     1a6:	87 e0       	ldi	r24, 0x07	; 7
     1a8:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     1ae:	89 e0       	ldi	r24, 0x09	; 9
     1b0:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd12864_set_pos>
	if(Alarm_State){
     1bc:	80 91 a4 04 	lds	r24, 0x04A4
     1c0:	88 23       	and	r24, r24
     1c2:	61 f0       	breq	.+24     	; 0x1dc <Act_Update_Main+0xe4>
		if(blink_factor)
     1c4:	80 91 a2 04 	lds	r24, 0x04A2
     1c8:	88 23       	and	r24, r24
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <Act_Update_Main+0xdc>
			lcd12864_write_char(0x21);
     1cc:	81 e2       	ldi	r24, 0x21	; 33
     1ce:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
     1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <Act_Update_Main+0xea>
		else
			lcd12864_write_char(' ');
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <Act_Update_Main+0xea>
	}
	else{
		lcd12864_write_char(0x02);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     1e2:	62 e0       	ldi	r22, 0x02	; 2
     1e4:	85 e0       	ldi	r24, 0x05	; 5
     1e6:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd12864_set_pos>
	lcd12864_write_str(pdstr);
     1ea:	ce 01       	movw	r24, r28
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd12864_write_str>
	lcd12864_set_pos(3,3);
     1f2:	63 e0       	ldi	r22, 0x03	; 3
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd12864_set_pos>
	s++;
     1fa:	80 91 a0 04 	lds	r24, 0x04A0
     1fe:	90 91 a1 04 	lds	r25, 0x04A1
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 a1 04 	sts	0x04A1, r25
     208:	80 93 a0 04 	sts	0x04A0, r24
	if(s==60){
     20c:	cc 97       	sbiw	r24, 0x3c	; 60
     20e:	69 f4       	brne	.+26     	; 0x22a <Act_Update_Main+0x132>
		m++; s=0;
     210:	80 91 9e 04 	lds	r24, 0x049E
     214:	90 91 9f 04 	lds	r25, 0x049F
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	90 93 9f 04 	sts	0x049F, r25
     21e:	80 93 9e 04 	sts	0x049E, r24
     222:	10 92 a1 04 	sts	0x04A1, r1
     226:	10 92 a0 04 	sts	0x04A0, r1
	}
	if(m==60){
     22a:	80 91 9e 04 	lds	r24, 0x049E
     22e:	90 91 9f 04 	lds	r25, 0x049F
     232:	cc 97       	sbiw	r24, 0x3c	; 60
     234:	69 f4       	brne	.+26     	; 0x250 <Act_Update_Main+0x158>
		hours++; m=0;
     236:	80 91 9c 04 	lds	r24, 0x049C
     23a:	90 91 9d 04 	lds	r25, 0x049D
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	90 93 9d 04 	sts	0x049D, r25
     244:	80 93 9c 04 	sts	0x049C, r24
     248:	10 92 9f 04 	sts	0x049F, r1
     24c:	10 92 9e 04 	sts	0x049E, r1
	}
	if(hours == 24){
     250:	40 91 9c 04 	lds	r20, 0x049C
     254:	50 91 9d 04 	lds	r21, 0x049D
     258:	48 31       	cpi	r20, 0x18	; 24
     25a:	51 05       	cpc	r21, r1
     25c:	49 f4       	brne	.+18     	; 0x270 <Act_Update_Main+0x178>
		days++;
     25e:	80 91 9a 04 	lds	r24, 0x049A
     262:	90 91 9b 04 	lds	r25, 0x049B
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	90 93 9b 04 	sts	0x049B, r25
     26c:	80 93 9a 04 	sts	0x049A, r24
	}
	time[7]=m%10+'0';
     270:	00 91 9e 04 	lds	r16, 0x049E
     274:	10 91 9f 04 	lds	r17, 0x049F
     278:	e2 e3       	ldi	r30, 0x32	; 50
     27a:	f3 e0       	ldi	r31, 0x03	; 3
     27c:	98 01       	movw	r18, r16
     27e:	ad ec       	ldi	r26, 0xCD	; 205
     280:	bc ec       	ldi	r27, 0xCC	; 204
     282:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	96 95       	lsr	r25
     290:	87 95       	ror	r24
     292:	9c 01       	movw	r18, r24
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	98 01       	movw	r18, r16
     2aa:	28 1b       	sub	r18, r24
     2ac:	39 0b       	sbc	r19, r25
     2ae:	c9 01       	movw	r24, r18
     2b0:	80 5d       	subi	r24, 0xD0	; 208
     2b2:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     2b4:	98 01       	movw	r18, r16
     2b6:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	96 95       	lsr	r25
     2c0:	87 95       	ror	r24
     2c2:	96 95       	lsr	r25
     2c4:	87 95       	ror	r24
     2c6:	80 5d       	subi	r24, 0xD0	; 208
     2c8:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     2ca:	9a 01       	movw	r18, r20
     2cc:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     2d0:	96 95       	lsr	r25
     2d2:	87 95       	ror	r24
     2d4:	96 95       	lsr	r25
     2d6:	87 95       	ror	r24
     2d8:	96 95       	lsr	r25
     2da:	87 95       	ror	r24
     2dc:	9c 01       	movw	r18, r24
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	9a 01       	movw	r18, r20
     2f4:	28 1b       	sub	r18, r24
     2f6:	39 0b       	sbc	r19, r25
     2f8:	c9 01       	movw	r24, r18
     2fa:	80 5d       	subi	r24, 0xD0	; 208
     2fc:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     2fe:	9a 01       	movw	r18, r20
     300:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     304:	96 95       	lsr	r25
     306:	87 95       	ror	r24
     308:	96 95       	lsr	r25
     30a:	87 95       	ror	r24
     30c:	96 95       	lsr	r25
     30e:	87 95       	ror	r24
     310:	80 5d       	subi	r24, 0xD0	; 208
     312:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     314:	40 91 9a 04 	lds	r20, 0x049A
     318:	50 91 9b 04 	lds	r21, 0x049B
     31c:	9a 01       	movw	r18, r20
     31e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     322:	96 95       	lsr	r25
     324:	87 95       	ror	r24
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	9c 01       	movw	r18, r24
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	9a 01       	movw	r18, r20
     346:	28 1b       	sub	r18, r24
     348:	39 0b       	sbc	r19, r25
     34a:	c9 01       	movw	r24, r18
     34c:	80 5d       	subi	r24, 0xD0	; 208
     34e:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     350:	9a 01       	movw	r18, r20
     352:	0e 94 93 0b 	call	0x1726	; 0x1726 <__umulhisi3>
     356:	96 95       	lsr	r25
     358:	87 95       	ror	r24
     35a:	96 95       	lsr	r25
     35c:	87 95       	ror	r24
     35e:	96 95       	lsr	r25
     360:	87 95       	ror	r24
     362:	80 5d       	subi	r24, 0xD0	; 208
     364:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     366:	cf 01       	movw	r24, r30
     368:	9f d7       	rcall	.+3902   	; 0x12a8 <lcd12864_write_str>
	
	
	if(pressure_diff > BlowPresureUpperLimit){
     36a:	80 91 1e 03 	lds	r24, 0x031E
     36e:	90 91 1f 03 	lds	r25, 0x031F
     372:	8c 15       	cp	r24, r12
     374:	9d 05       	cpc	r25, r13
     376:	28 f4       	brcc	.+10     	; 0x382 <Act_Update_Main+0x28a>
		Alarm_State = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 a4 04 	sts	0x04A4, r24
		Alarm(1);
     37e:	e5 d0       	rcall	.+458    	; 0x54a <Alarm>
     380:	0b c0       	rjmp	.+22     	; 0x398 <Act_Update_Main+0x2a0>
	}
	else if(pressure_diff < BlowPresureLowerLimit){
     382:	80 91 1c 03 	lds	r24, 0x031C
     386:	90 91 1d 03 	lds	r25, 0x031D
     38a:	c8 16       	cp	r12, r24
     38c:	d9 06       	cpc	r13, r25
     38e:	20 f4       	brcc	.+8      	; 0x398 <Act_Update_Main+0x2a0>
		Alarm_State=0;
     390:	10 92 a4 04 	sts	0x04A4, r1
		Alarm(0);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	d9 d0       	rcall	.+434    	; 0x54a <Alarm>
	}


}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	08 95       	ret

000003b2 <Act_pressure_setting1_display>:

void Act_pressure_setting1_display(void){
	lcd12864_set_pos(6,2);
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	4f d7       	rcall	.+3742   	; 0x1256 <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureUpperLimit);
     3b8:	80 91 1e 03 	lds	r24, 0x031E
     3bc:	90 91 1f 03 	lds	r25, 0x031F
     3c0:	87 d7       	rcall	.+3854   	; 0x12d0 <lcd12864_write_int>
	lcd12864_set_pos(6,3);
     3c2:	63 e0       	ldi	r22, 0x03	; 3
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	47 d7       	rcall	.+3726   	; 0x1256 <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureLowerLimit);
     3c8:	80 91 1c 03 	lds	r24, 0x031C
     3cc:	90 91 1d 03 	lds	r25, 0x031D
     3d0:	7f c7       	rjmp	.+3838   	; 0x12d0 <lcd12864_write_int>
     3d2:	08 95       	ret

000003d4 <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     3d4:	e1 e6       	ldi	r30, 0x61	; 97
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8c 7f       	andi	r24, 0xFC	; 252
     3dc:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     3de:	86 e8       	ldi	r24, 0x86	; 134
     3e0:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     3e6:	35 98       	cbi	0x06, 5	; 6
     3e8:	08 95       	ret

000003ea <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     3ea:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     3ec:	34 9b       	sbis	0x06, 4	; 6
     3ee:	fe cf       	rjmp	.-4      	; 0x3ec <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f0:	86 ef       	ldi	r24, 0xF6	; 246
     3f2:	8a 95       	dec	r24
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     3f6:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     3f8:	85 b1       	in	r24, 0x05	; 5
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	98 2f       	mov	r25, r24
     3fe:	88 27       	eor	r24, r24

	return result;	
}
     400:	82 0f       	add	r24, r18
     402:	91 1d       	adc	r25, r1
     404:	08 95       	ret

00000406 <ADC_read>:

float ADC_read(uint8_t target){
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	89 f0       	breq	.+34     	; 0x436 <ADC_read+0x30>
     414:	28 f4       	brcc	.+10     	; 0x420 <ADC_read+0x1a>
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	41 f0       	breq	.+16     	; 0x42a <ADC_read+0x24>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	49 f0       	breq	.+18     	; 0x430 <ADC_read+0x2a>
     41e:	36 c0       	rjmp	.+108    	; 0x48c <ADC_read+0x86>
     420:	84 30       	cpi	r24, 0x04	; 4
     422:	61 f0       	breq	.+24     	; 0x43c <ADC_read+0x36>
     424:	85 30       	cpi	r24, 0x05	; 5
     426:	69 f0       	breq	.+26     	; 0x442 <ADC_read+0x3c>
     428:	31 c0       	rjmp	.+98     	; 0x48c <ADC_read+0x86>
		case PRESSURE:
			ADMUX = 0x10;
     42a:	80 e1       	ldi	r24, 0x10	; 16
     42c:	87 b9       	out	0x07, r24	; 7
			break;
     42e:	2e c0       	rjmp	.+92     	; 0x48c <ADC_read+0x86>
		case EMV:
			ADMUX = 0b00000100;
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	87 b9       	out	0x07, r24	; 7
			break;
     434:	2b c0       	rjmp	.+86     	; 0x48c <ADC_read+0x86>
		case VIN:
			ADMUX = 0b00000101;
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	87 b9       	out	0x07, r24	; 7
			break;
     43a:	28 c0       	rjmp	.+80     	; 0x48c <ADC_read+0x86>
		case VPP:
			ADMUX = 0b00000110;
     43c:	86 e0       	ldi	r24, 0x06	; 6
     43e:	87 b9       	out	0x07, r24	; 7
			break;
     440:	25 c0       	rjmp	.+74     	; 0x48c <ADC_read+0x86>
		case VCC:
			ADMUX = 0b00000111;
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	87 b9       	out	0x07, r24	; 7
			break;
     446:	22 c0       	rjmp	.+68     	; 0x48c <ADC_read+0x86>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     448:	d0 df       	rcall	.-96     	; 0x3ea <ADC_readonce>
     44a:	bc 01       	movw	r22, r24
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__floatunsisf>
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	c7 01       	movw	r24, r14
     45a:	b6 01       	movw	r22, r12
     45c:	de d7       	rcall	.+4028   	; 0x141a <__addsf3>
     45e:	6b 01       	movw	r12, r22
     460:	7c 01       	movw	r14, r24
     462:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     464:	89 f7       	brne	.-30     	; 0x448 <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	5e e3       	ldi	r21, 0x3E	; 62
     46e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
	buff/=1024;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e8       	ldi	r20, 0x80	; 128
     478:	5a e3       	ldi	r21, 0x3A	; 58
     47a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
	buff*=SCALE;
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	4a e7       	ldi	r20, 0x7A	; 122
     484:	54 e4       	ldi	r21, 0x44	; 68
     486:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     48a:	05 c0       	rjmp	.+10     	; 0x496 <ADC_read+0x90>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     48c:	c8 e0       	ldi	r28, 0x08	; 8
     48e:	c1 2c       	mov	r12, r1
     490:	d1 2c       	mov	r13, r1
     492:	76 01       	movw	r14, r12
     494:	d9 cf       	rjmp	.-78     	; 0x448 <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     496:	cf 91       	pop	r28
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	08 95       	ret

000004a2 <emv_refresh>:
	
}

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;
     4a2:	80 91 00 01 	lds	r24, 0x0100
     4a6:	90 91 01 01 	lds	r25, 0x0101
     4aa:	20 e1       	ldi	r18, 0x10	; 16
	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
		else DATA_LOW;
		buffer <<=1;
		_delay_us(10);
		SCK_HIGH; 
     4ac:	e5 e6       	ldi	r30, 0x65	; 101
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
     4b0:	99 23       	and	r25, r25
     4b2:	14 f4       	brge	.+4      	; 0x4b8 <emv_refresh+0x16>
     4b4:	c5 9a       	sbi	0x18, 5	; 24
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <emv_refresh+0x18>
		else DATA_LOW;
     4b8:	c5 98       	cbi	0x18, 5	; 24
		buffer <<=1;
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	38 e1       	ldi	r19, 0x18	; 24
     4c0:	3a 95       	dec	r19
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <emv_refresh+0x1e>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <emv_refresh+0x24>
		_delay_us(10);
		SCK_HIGH; 
     4c6:	30 81       	ld	r19, Z
     4c8:	38 60       	ori	r19, 0x08	; 8
     4ca:	30 83       	st	Z, r19
     4cc:	38 e1       	ldi	r19, 0x18	; 24
     4ce:	3a 95       	dec	r19
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <emv_refresh+0x2c>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <emv_refresh+0x32>
		_delay_us(10);
		SCK_LOW;
     4d4:	30 81       	ld	r19, Z
     4d6:	37 7f       	andi	r19, 0xF7	; 247
     4d8:	30 83       	st	Z, r19
     4da:	38 e1       	ldi	r19, 0x18	; 24
     4dc:	3a 95       	dec	r19
     4de:	f1 f7       	brne	.-4      	; 0x4dc <emv_refresh+0x3a>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <emv_refresh+0x40>
     4e2:	21 50       	subi	r18, 0x01	; 1

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
     4e4:	29 f7       	brne	.-54     	; 0x4b0 <emv_refresh+0xe>
		SCK_HIGH; 
		_delay_us(10);
		SCK_LOW;
		_delay_us(10);
	}
	RCK_HIGH;
     4e6:	c7 9a       	sbi	0x18, 7	; 24
     4e8:	88 e1       	ldi	r24, 0x18	; 24
     4ea:	8a 95       	dec	r24
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <emv_refresh+0x48>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <emv_refresh+0x4e>
	_delay_us(10);
	RCK_LOW;
     4f0:	c7 98       	cbi	0x18, 7	; 24
     4f2:	08 95       	ret

000004f4 <emv_ports_init>:
uint16_t emv_control_word = 0xffff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
     4f4:	87 b3       	in	r24, 0x17	; 23
     4f6:	80 6e       	ori	r24, 0xE0	; 224
     4f8:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
     4fa:	e4 e6       	ldi	r30, 0x64	; 100
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	88 61       	ori	r24, 0x18	; 24
     502:	80 83       	st	Z, r24
	SCK_LOW;
     504:	e5 e6       	ldi	r30, 0x65	; 101
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	87 7f       	andi	r24, 0xF7	; 247
     50c:	80 83       	st	Z, r24
	RCK_LOW;
     50e:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
     510:	80 81       	ld	r24, Z
     512:	80 61       	ori	r24, 0x10	; 16
     514:	80 83       	st	Z, r24
	OEn_LOW;
     516:	c6 98       	cbi	0x18, 6	; 24

	emv_refresh();
     518:	c4 cf       	rjmp	.-120    	; 0x4a2 <emv_refresh>
     51a:	08 95       	ret

0000051c <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
     51c:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
     51e:	e1 e6       	ldi	r30, 0x61	; 97
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 60       	ori	r24, 0x08	; 8
     526:	80 83       	st	Z, r24
	DDRG |=_BV(0);
     528:	e4 e6       	ldi	r30, 0x64	; 100
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	81 60       	ori	r24, 0x01	; 1
     530:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
     532:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
     534:	e2 e6       	ldi	r30, 0x62	; 98
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
     53e:	e5 e6       	ldi	r30, 0x65	; 101
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	8e 7f       	andi	r24, 0xFE	; 254
     546:	80 83       	st	Z, r24
     548:	08 95       	ret

0000054a <Alarm>:
	
}

void Alarm(bool state){
	if(state==ON){
     54a:	88 23       	and	r24, r24
     54c:	11 f0       	breq	.+4      	; 0x552 <Alarm+0x8>
		PORTB &=~_BV(0);
     54e:	c0 98       	cbi	0x18, 0	; 24
     550:	08 95       	ret
		//PORTG |=_BV(0);
	}
	else{
		PORTB |= _BV(0);
     552:	c0 9a       	sbi	0x18, 0	; 24
     554:	08 95       	ret

00000556 <DrawScreen>:
uint8_t Get_Workmode(void){
	return PD_Mode;
}

	void DrawScreen(void){
		lcd12864_clear();
     556:	7b d6       	rcall	.+3318   	; 0x124e <lcd12864_clear>
		lcd12864_set_pos(0,1);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	7c d6       	rcall	.+3320   	; 0x1256 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     55e:	80 91 ac 04 	lds	r24, 0x04AC
     562:	90 91 ad 04 	lds	r25, 0x04AD
     566:	a0 d6       	rcall	.+3392   	; 0x12a8 <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	74 d6       	rcall	.+3304   	; 0x1256 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     56e:	80 91 ae 04 	lds	r24, 0x04AE
     572:	90 91 af 04 	lds	r25, 0x04AF
     576:	98 d6       	rcall	.+3376   	; 0x12a8 <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     578:	63 e0       	ldi	r22, 0x03	; 3
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	6c d6       	rcall	.+3288   	; 0x1256 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     57e:	80 91 b0 04 	lds	r24, 0x04B0
     582:	90 91 b1 04 	lds	r25, 0x04B1
     586:	90 d6       	rcall	.+3360   	; 0x12a8 <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     588:	64 e0       	ldi	r22, 0x04	; 4
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	64 d6       	rcall	.+3272   	; 0x1256 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     58e:	80 91 b2 04 	lds	r24, 0x04B2
     592:	90 91 b3 04 	lds	r25, 0x04B3
     596:	88 d6       	rcall	.+3344   	; 0x12a8 <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
     598:	80 91 b4 04 	lds	r24, 0x04B4
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	51 f0       	breq	.+20     	; 0x5b4 <DrawScreen+0x5e>
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	71 f0       	breq	.+28     	; 0x5c0 <DrawScreen+0x6a>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	89 f4       	brne	.+34     	; 0x5ca <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	54 d6       	rcall	.+3240   	; 0x1256 <lcd12864_set_pos>
				lcd12864_write_char('*');
     5ae:	8a e2       	ldi	r24, 0x2A	; 42
     5b0:	6b c6       	rjmp	.+3286   	; 0x1288 <lcd12864_write_char>
				break;
     5b2:	08 95       	ret
			case 2:
				lcd12864_set_pos(0,2);
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	4e d6       	rcall	.+3228   	; 0x1256 <lcd12864_set_pos>
				lcd12864_write_char('*');
     5ba:	8a e2       	ldi	r24, 0x2A	; 42
     5bc:	65 c6       	rjmp	.+3274   	; 0x1288 <lcd12864_write_char>
				break;
     5be:	08 95       	ret
			case 3:
				lcd12864_set_pos(0,3);
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	48 d6       	rcall	.+3216   	; 0x1256 <lcd12864_set_pos>
				lcd12864_write_char('*');
     5c6:	8a e2       	ldi	r24, 0x2A	; 42
     5c8:	5f c6       	rjmp	.+3262   	; 0x1288 <lcd12864_write_char>
     5ca:	08 95       	ret

000005cc <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     5cc:	20 91 02 01 	lds	r18, 0x0102
     5d0:	30 91 03 01 	lds	r19, 0x0103
     5d4:	28 17       	cp	r18, r24
     5d6:	39 07       	cpc	r19, r25
     5d8:	59 f0       	breq	.+22     	; 0x5f0 <FindState+0x24>
     5da:	ea e1       	ldi	r30, 0x1A	; 26
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	40 81       	ld	r20, Z
     5e6:	51 81       	ldd	r21, Z+1	; 0x01
     5e8:	48 17       	cp	r20, r24
     5ea:	59 07       	cpc	r21, r25
     5ec:	91 f4       	brne	.+36     	; 0x612 <FindState+0x46>
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <FindState+0x28>
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     5f4:	cb 01       	movw	r24, r22
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	68 0f       	add	r22, r24
     5fc:	79 1f       	adc	r23, r25
     5fe:	cb 01       	movw	r24, r22
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	8e 5f       	subi	r24, 0xFE	; 254
     60e:	9e 4f       	sbci	r25, 0xFE	; 254
     610:	08 95       	ret
     612:	2f 5f       	subi	r18, 0xFF	; 255
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	78 96       	adiw	r30, 0x18	; 24
		}
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     618:	24 31       	cpi	r18, 0x14	; 20
     61a:	31 05       	cpc	r19, r1
     61c:	11 f7       	brne	.-60     	; 0x5e2 <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     622:	08 95       	ret

00000624 <State_Update>:
		State_Update();
		DrawScreen();
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     624:	e0 91 a7 04 	lds	r30, 0x04A7
     628:	f0 91 a8 04 	lds	r31, 0x04A8
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	20 e2       	ldi	r18, 0x20	; 32
     634:	92 07       	cpc	r25, r18
     636:	09 f4       	brne	.+2      	; 0x63a <State_Update+0x16>
     638:	a4 c1       	rjmp	.+840    	; 0x982 <State_Update+0x35e>
     63a:	78 f5       	brcc	.+94     	; 0x69a <State_Update+0x76>
     63c:	84 30       	cpi	r24, 0x04	; 4
     63e:	20 e1       	ldi	r18, 0x10	; 16
     640:	92 07       	cpc	r25, r18
     642:	09 f4       	brne	.+2      	; 0x646 <State_Update+0x22>
     644:	ea c0       	rjmp	.+468    	; 0x81a <State_Update+0x1f6>
     646:	a0 f4       	brcc	.+40     	; 0x670 <State_Update+0x4c>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	20 e1       	ldi	r18, 0x10	; 16
     64c:	92 07       	cpc	r25, r18
     64e:	09 f4       	brne	.+2      	; 0x652 <State_Update+0x2e>
     650:	78 c0       	rjmp	.+240    	; 0x742 <State_Update+0x11e>
     652:	20 f4       	brcc	.+8      	; 0x65c <State_Update+0x38>
     654:	89 2b       	or	r24, r25
     656:	09 f4       	brne	.+2      	; 0x65a <State_Update+0x36>
     658:	51 c0       	rjmp	.+162    	; 0x6fc <State_Update+0xd8>
     65a:	08 95       	ret
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	20 e1       	ldi	r18, 0x10	; 16
     660:	92 07       	cpc	r25, r18
     662:	09 f4       	brne	.+2      	; 0x666 <State_Update+0x42>
     664:	92 c0       	rjmp	.+292    	; 0x78a <State_Update+0x166>
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	90 41       	sbci	r25, 0x10	; 16
     66a:	09 f4       	brne	.+2      	; 0x66e <State_Update+0x4a>
     66c:	b2 c0       	rjmp	.+356    	; 0x7d2 <State_Update+0x1ae>
     66e:	08 95       	ret
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	20 e2       	ldi	r18, 0x20	; 32
     674:	92 07       	cpc	r25, r18
     676:	09 f4       	brne	.+2      	; 0x67a <State_Update+0x56>
     678:	18 c1       	rjmp	.+560    	; 0x8aa <State_Update+0x286>
     67a:	28 f4       	brcc	.+10     	; 0x686 <State_Update+0x62>
     67c:	85 30       	cpi	r24, 0x05	; 5
     67e:	90 41       	sbci	r25, 0x10	; 16
     680:	09 f4       	brne	.+2      	; 0x684 <State_Update+0x60>
     682:	ef c0       	rjmp	.+478    	; 0x862 <State_Update+0x23e>
     684:	08 95       	ret
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	20 e2       	ldi	r18, 0x20	; 32
     68a:	92 07       	cpc	r25, r18
     68c:	09 f4       	brne	.+2      	; 0x690 <State_Update+0x6c>
     68e:	31 c1       	rjmp	.+610    	; 0x8f2 <State_Update+0x2ce>
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	90 42       	sbci	r25, 0x20	; 32
     694:	09 f4       	brne	.+2      	; 0x698 <State_Update+0x74>
     696:	51 c1       	rjmp	.+674    	; 0x93a <State_Update+0x316>
     698:	08 95       	ret
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	20 e3       	ldi	r18, 0x30	; 48
     69e:	92 07       	cpc	r25, r18
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <State_Update+0x80>
     6a2:	23 c2       	rjmp	.+1094   	; 0xaea <State_Update+0x4c6>
     6a4:	88 f4       	brcc	.+34     	; 0x6c8 <State_Update+0xa4>
     6a6:	86 30       	cpi	r24, 0x06	; 6
     6a8:	20 e2       	ldi	r18, 0x20	; 32
     6aa:	92 07       	cpc	r25, r18
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <State_Update+0x8c>
     6ae:	b1 c1       	rjmp	.+866    	; 0xa12 <State_Update+0x3ee>
     6b0:	08 f4       	brcc	.+2      	; 0x6b4 <State_Update+0x90>
     6b2:	8b c1       	rjmp	.+790    	; 0x9ca <State_Update+0x3a6>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	20 e3       	ldi	r18, 0x30	; 48
     6b8:	92 07       	cpc	r25, r18
     6ba:	09 f4       	brne	.+2      	; 0x6be <State_Update+0x9a>
     6bc:	ce c1       	rjmp	.+924    	; 0xa5a <State_Update+0x436>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	90 43       	sbci	r25, 0x30	; 48
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <State_Update+0xa2>
     6c4:	ee c1       	rjmp	.+988    	; 0xaa2 <State_Update+0x47e>
     6c6:	08 95       	ret
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	21 e3       	ldi	r18, 0x31	; 49
     6cc:	92 07       	cpc	r25, r18
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <State_Update+0xae>
     6d0:	78 c2       	rjmp	.+1264   	; 0xbc2 <State_Update+0x59e>
     6d2:	50 f4       	brcc	.+20     	; 0x6e8 <State_Update+0xc4>
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	20 e3       	ldi	r18, 0x30	; 48
     6d8:	92 07       	cpc	r25, r18
     6da:	09 f4       	brne	.+2      	; 0x6de <State_Update+0xba>
     6dc:	2a c2       	rjmp	.+1108   	; 0xb32 <State_Update+0x50e>
     6de:	85 30       	cpi	r24, 0x05	; 5
     6e0:	90 43       	sbci	r25, 0x30	; 48
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <State_Update+0xc2>
     6e4:	4a c2       	rjmp	.+1172   	; 0xb7a <State_Update+0x556>
     6e6:	08 95       	ret
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	21 e3       	ldi	r18, 0x31	; 49
     6ec:	92 07       	cpc	r25, r18
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <State_Update+0xce>
     6f0:	99 c2       	rjmp	.+1330   	; 0xc24 <State_Update+0x600>
     6f2:	83 30       	cpi	r24, 0x03	; 3
     6f4:	91 43       	sbci	r25, 0x31	; 49
     6f6:	09 f4       	brne	.+2      	; 0x6fa <State_Update+0xd6>
     6f8:	c6 c2       	rjmp	.+1420   	; 0xc86 <State_Update+0x662>
     6fa:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     6fc:	80 91 e2 02 	lds	r24, 0x02E2
     700:	90 91 e3 02 	lds	r25, 0x02E3
     704:	90 93 ad 04 	sts	0x04AD, r25
     708:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     70c:	80 91 e4 02 	lds	r24, 0x02E4
     710:	90 91 e5 02 	lds	r25, 0x02E5
     714:	90 93 af 04 	sts	0x04AF, r25
     718:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     71c:	80 91 e6 02 	lds	r24, 0x02E6
     720:	90 91 e7 02 	lds	r25, 0x02E7
     724:	90 93 b1 04 	sts	0x04B1, r25
     728:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     72c:	80 91 e8 02 	lds	r24, 0x02E8
     730:	90 91 e9 02 	lds	r25, 0x02E9
     734:	90 93 b3 04 	sts	0x04B3, r25
     738:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 0;
     73c:	10 92 b4 04 	sts	0x04B4, r1
				break;
     740:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     742:	80 91 ec 02 	lds	r24, 0x02EC
     746:	90 91 ed 02 	lds	r25, 0x02ED
     74a:	90 93 ad 04 	sts	0x04AD, r25
     74e:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     752:	80 91 ee 02 	lds	r24, 0x02EE
     756:	90 91 ef 02 	lds	r25, 0x02EF
     75a:	90 93 af 04 	sts	0x04AF, r25
     75e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     762:	80 91 f0 02 	lds	r24, 0x02F0
     766:	90 91 f1 02 	lds	r25, 0x02F1
     76a:	90 93 b1 04 	sts	0x04B1, r25
     76e:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     772:	80 91 1a 03 	lds	r24, 0x031A
     776:	90 91 1b 03 	lds	r25, 0x031B
     77a:	90 93 b3 04 	sts	0x04B3, r25
     77e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 b4 04 	sts	0x04B4, r24
				break;
     788:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     78a:	80 91 ec 02 	lds	r24, 0x02EC
     78e:	90 91 ed 02 	lds	r25, 0x02ED
     792:	90 93 ad 04 	sts	0x04AD, r25
     796:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     79a:	80 91 ee 02 	lds	r24, 0x02EE
     79e:	90 91 ef 02 	lds	r25, 0x02EF
     7a2:	90 93 af 04 	sts	0x04AF, r25
     7a6:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     7aa:	80 91 f0 02 	lds	r24, 0x02F0
     7ae:	90 91 f1 02 	lds	r25, 0x02F1
     7b2:	90 93 b1 04 	sts	0x04B1, r25
     7b6:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7ba:	80 91 1a 03 	lds	r24, 0x031A
     7be:	90 91 1b 03 	lds	r25, 0x031B
     7c2:	90 93 b3 04 	sts	0x04B3, r25
     7c6:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	80 93 b4 04 	sts	0x04B4, r24
				break;
     7d0:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     7d2:	80 91 ec 02 	lds	r24, 0x02EC
     7d6:	90 91 ed 02 	lds	r25, 0x02ED
     7da:	90 93 ad 04 	sts	0x04AD, r25
     7de:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     7e2:	80 91 ee 02 	lds	r24, 0x02EE
     7e6:	90 91 ef 02 	lds	r25, 0x02EF
     7ea:	90 93 af 04 	sts	0x04AF, r25
     7ee:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     7f2:	80 91 f0 02 	lds	r24, 0x02F0
     7f6:	90 91 f1 02 	lds	r25, 0x02F1
     7fa:	90 93 b1 04 	sts	0x04B1, r25
     7fe:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     802:	80 91 1a 03 	lds	r24, 0x031A
     806:	90 91 1b 03 	lds	r25, 0x031B
     80a:	90 93 b3 04 	sts	0x04B3, r25
     80e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 3;
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	80 93 b4 04 	sts	0x04B4, r24
				break;
     818:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     81a:	80 91 f2 02 	lds	r24, 0x02F2
     81e:	90 91 f3 02 	lds	r25, 0x02F3
     822:	90 93 ad 04 	sts	0x04AD, r25
     826:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     82a:	80 91 f4 02 	lds	r24, 0x02F4
     82e:	90 91 f5 02 	lds	r25, 0x02F5
     832:	90 93 af 04 	sts	0x04AF, r25
     836:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     83a:	80 91 e2 02 	lds	r24, 0x02E2
     83e:	90 91 e3 02 	lds	r25, 0x02E3
     842:	90 93 b1 04 	sts	0x04B1, r25
     846:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     84a:	80 91 1a 03 	lds	r24, 0x031A
     84e:	90 91 1b 03 	lds	r25, 0x031B
     852:	90 93 b3 04 	sts	0x04B3, r25
     856:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 b4 04 	sts	0x04B4, r24
				break;
     860:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     862:	80 91 f2 02 	lds	r24, 0x02F2
     866:	90 91 f3 02 	lds	r25, 0x02F3
     86a:	90 93 ad 04 	sts	0x04AD, r25
     86e:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     872:	80 91 f4 02 	lds	r24, 0x02F4
     876:	90 91 f5 02 	lds	r25, 0x02F5
     87a:	90 93 af 04 	sts	0x04AF, r25
     87e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     882:	80 91 e2 02 	lds	r24, 0x02E2
     886:	90 91 e3 02 	lds	r25, 0x02E3
     88a:	90 93 b1 04 	sts	0x04B1, r25
     88e:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     892:	80 91 1a 03 	lds	r24, 0x031A
     896:	90 91 1b 03 	lds	r25, 0x031B
     89a:	90 93 b3 04 	sts	0x04B3, r25
     89e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	80 93 b4 04 	sts	0x04B4, r24
				break;
     8a8:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8aa:	80 91 f6 02 	lds	r24, 0x02F6
     8ae:	90 91 f7 02 	lds	r25, 0x02F7
     8b2:	90 93 ad 04 	sts	0x04AD, r25
     8b6:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     8ba:	80 91 f8 02 	lds	r24, 0x02F8
     8be:	90 91 f9 02 	lds	r25, 0x02F9
     8c2:	90 93 af 04 	sts	0x04AF, r25
     8c6:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     8ca:	80 91 fa 02 	lds	r24, 0x02FA
     8ce:	90 91 fb 02 	lds	r25, 0x02FB
     8d2:	90 93 b1 04 	sts	0x04B1, r25
     8d6:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8da:	80 91 1a 03 	lds	r24, 0x031A
     8de:	90 91 1b 03 	lds	r25, 0x031B
     8e2:	90 93 b3 04 	sts	0x04B3, r25
     8e6:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 b4 04 	sts	0x04B4, r24
				break;
     8f0:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8f2:	80 91 f6 02 	lds	r24, 0x02F6
     8f6:	90 91 f7 02 	lds	r25, 0x02F7
     8fa:	90 93 ad 04 	sts	0x04AD, r25
     8fe:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     902:	80 91 f8 02 	lds	r24, 0x02F8
     906:	90 91 f9 02 	lds	r25, 0x02F9
     90a:	90 93 af 04 	sts	0x04AF, r25
     90e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     912:	80 91 fa 02 	lds	r24, 0x02FA
     916:	90 91 fb 02 	lds	r25, 0x02FB
     91a:	90 93 b1 04 	sts	0x04B1, r25
     91e:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     922:	80 91 1a 03 	lds	r24, 0x031A
     926:	90 91 1b 03 	lds	r25, 0x031B
     92a:	90 93 b3 04 	sts	0x04B3, r25
     92e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	80 93 b4 04 	sts	0x04B4, r24
				break;
     938:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     93a:	80 91 f6 02 	lds	r24, 0x02F6
     93e:	90 91 f7 02 	lds	r25, 0x02F7
     942:	90 93 ad 04 	sts	0x04AD, r25
     946:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     94a:	80 91 f8 02 	lds	r24, 0x02F8
     94e:	90 91 f9 02 	lds	r25, 0x02F9
     952:	90 93 af 04 	sts	0x04AF, r25
     956:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     95a:	80 91 fa 02 	lds	r24, 0x02FA
     95e:	90 91 fb 02 	lds	r25, 0x02FB
     962:	90 93 b1 04 	sts	0x04B1, r25
     966:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     96a:	80 91 1a 03 	lds	r24, 0x031A
     96e:	90 91 1b 03 	lds	r25, 0x031B
     972:	90 93 b3 04 	sts	0x04B3, r25
     976:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 3;
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	80 93 b4 04 	sts	0x04B4, r24
				break;
     980:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     982:	80 91 fc 02 	lds	r24, 0x02FC
     986:	90 91 fd 02 	lds	r25, 0x02FD
     98a:	90 93 ad 04 	sts	0x04AD, r25
     98e:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     992:	80 91 fe 02 	lds	r24, 0x02FE
     996:	90 91 ff 02 	lds	r25, 0x02FF
     99a:	90 93 af 04 	sts	0x04AF, r25
     99e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9a2:	80 91 00 03 	lds	r24, 0x0300
     9a6:	90 91 01 03 	lds	r25, 0x0301
     9aa:	90 93 b1 04 	sts	0x04B1, r25
     9ae:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9b2:	80 91 1a 03 	lds	r24, 0x031A
     9b6:	90 91 1b 03 	lds	r25, 0x031B
     9ba:	90 93 b3 04 	sts	0x04B3, r25
     9be:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 b4 04 	sts	0x04B4, r24
				break;
     9c8:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     9ca:	80 91 fc 02 	lds	r24, 0x02FC
     9ce:	90 91 fd 02 	lds	r25, 0x02FD
     9d2:	90 93 ad 04 	sts	0x04AD, r25
     9d6:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     9da:	80 91 fe 02 	lds	r24, 0x02FE
     9de:	90 91 ff 02 	lds	r25, 0x02FF
     9e2:	90 93 af 04 	sts	0x04AF, r25
     9e6:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9ea:	80 91 00 03 	lds	r24, 0x0300
     9ee:	90 91 01 03 	lds	r25, 0x0301
     9f2:	90 93 b1 04 	sts	0x04B1, r25
     9f6:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9fa:	80 91 1a 03 	lds	r24, 0x031A
     9fe:	90 91 1b 03 	lds	r25, 0x031B
     a02:	90 93 b3 04 	sts	0x04B3, r25
     a06:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	80 93 b4 04 	sts	0x04B4, r24
				break;
     a10:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     a12:	80 91 fc 02 	lds	r24, 0x02FC
     a16:	90 91 fd 02 	lds	r25, 0x02FD
     a1a:	90 93 ad 04 	sts	0x04AD, r25
     a1e:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     a22:	80 91 fe 02 	lds	r24, 0x02FE
     a26:	90 91 ff 02 	lds	r25, 0x02FF
     a2a:	90 93 af 04 	sts	0x04AF, r25
     a2e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     a32:	80 91 00 03 	lds	r24, 0x0300
     a36:	90 91 01 03 	lds	r25, 0x0301
     a3a:	90 93 b1 04 	sts	0x04B1, r25
     a3e:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a42:	80 91 1a 03 	lds	r24, 0x031A
     a46:	90 91 1b 03 	lds	r25, 0x031B
     a4a:	90 93 b3 04 	sts	0x04B3, r25
     a4e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 3;
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	80 93 b4 04 	sts	0x04B4, r24
				break;
     a58:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a5a:	80 91 02 03 	lds	r24, 0x0302
     a5e:	90 91 03 03 	lds	r25, 0x0303
     a62:	90 93 ad 04 	sts	0x04AD, r25
     a66:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a6a:	80 91 04 03 	lds	r24, 0x0304
     a6e:	90 91 05 03 	lds	r25, 0x0305
     a72:	90 93 af 04 	sts	0x04AF, r25
     a76:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a7a:	80 91 06 03 	lds	r24, 0x0306
     a7e:	90 91 07 03 	lds	r25, 0x0307
     a82:	90 93 b1 04 	sts	0x04B1, r25
     a86:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a8a:	80 91 1a 03 	lds	r24, 0x031A
     a8e:	90 91 1b 03 	lds	r25, 0x031B
     a92:	90 93 b3 04 	sts	0x04B3, r25
     a96:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1; 
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 b4 04 	sts	0x04B4, r24
				break;
     aa0:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     aa2:	80 91 02 03 	lds	r24, 0x0302
     aa6:	90 91 03 03 	lds	r25, 0x0303
     aaa:	90 93 ad 04 	sts	0x04AD, r25
     aae:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     ab2:	80 91 04 03 	lds	r24, 0x0304
     ab6:	90 91 05 03 	lds	r25, 0x0305
     aba:	90 93 af 04 	sts	0x04AF, r25
     abe:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     ac2:	80 91 06 03 	lds	r24, 0x0306
     ac6:	90 91 07 03 	lds	r25, 0x0307
     aca:	90 93 b1 04 	sts	0x04B1, r25
     ace:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ad2:	80 91 1a 03 	lds	r24, 0x031A
     ad6:	90 91 1b 03 	lds	r25, 0x031B
     ada:	90 93 b3 04 	sts	0x04B3, r25
     ade:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	80 93 b4 04 	sts	0x04B4, r24
				break;
     ae8:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     aea:	80 91 02 03 	lds	r24, 0x0302
     aee:	90 91 03 03 	lds	r25, 0x0303
     af2:	90 93 ad 04 	sts	0x04AD, r25
     af6:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     afa:	80 91 04 03 	lds	r24, 0x0304
     afe:	90 91 05 03 	lds	r25, 0x0305
     b02:	90 93 af 04 	sts	0x04AF, r25
     b06:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     b0a:	80 91 06 03 	lds	r24, 0x0306
     b0e:	90 91 07 03 	lds	r25, 0x0307
     b12:	90 93 b1 04 	sts	0x04B1, r25
     b16:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b1a:	80 91 1a 03 	lds	r24, 0x031A
     b1e:	90 91 1b 03 	lds	r25, 0x031B
     b22:	90 93 b3 04 	sts	0x04B3, r25
     b26:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 3;
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	80 93 b4 04 	sts	0x04B4, r24
				break;
     b30:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b32:	80 91 08 03 	lds	r24, 0x0308
     b36:	90 91 09 03 	lds	r25, 0x0309
     b3a:	90 93 ad 04 	sts	0x04AD, r25
     b3e:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b42:	80 91 0a 03 	lds	r24, 0x030A
     b46:	90 91 0b 03 	lds	r25, 0x030B
     b4a:	90 93 af 04 	sts	0x04AF, r25
     b4e:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b52:	80 91 e2 02 	lds	r24, 0x02E2
     b56:	90 91 e3 02 	lds	r25, 0x02E3
     b5a:	90 93 b1 04 	sts	0x04B1, r25
     b5e:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b62:	80 91 1a 03 	lds	r24, 0x031A
     b66:	90 91 1b 03 	lds	r25, 0x031B
     b6a:	90 93 b3 04 	sts	0x04B3, r25
     b6e:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 b4 04 	sts	0x04B4, r24
				break;
     b78:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b7a:	80 91 08 03 	lds	r24, 0x0308
     b7e:	90 91 09 03 	lds	r25, 0x0309
     b82:	90 93 ad 04 	sts	0x04AD, r25
     b86:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b8a:	80 91 0a 03 	lds	r24, 0x030A
     b8e:	90 91 0b 03 	lds	r25, 0x030B
     b92:	90 93 af 04 	sts	0x04AF, r25
     b96:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b9a:	80 91 e2 02 	lds	r24, 0x02E2
     b9e:	90 91 e3 02 	lds	r25, 0x02E3
     ba2:	90 93 b1 04 	sts	0x04B1, r25
     ba6:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     baa:	80 91 1a 03 	lds	r24, 0x031A
     bae:	90 91 1b 03 	lds	r25, 0x031B
     bb2:	90 93 b3 04 	sts	0x04B3, r25
     bb6:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index = 2;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 b4 04 	sts	0x04B4, r24
				break;
     bc0:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
     bc2:	80 91 20 03 	lds	r24, 0x0320
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	49 f4       	brne	.+18     	; 0xbdc <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
     bca:	80 91 0c 03 	lds	r24, 0x030C
     bce:	90 91 0d 03 	lds	r25, 0x030D
     bd2:	90 93 ad 04 	sts	0x04AD, r25
     bd6:	80 93 ac 04 	sts	0x04AC, r24
     bda:	08 c0       	rjmp	.+16     	; 0xbec <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
     bdc:	80 91 0e 03 	lds	r24, 0x030E
     be0:	90 91 0f 03 	lds	r25, 0x030F
     be4:	90 93 ad 04 	sts	0x04AD, r25
     be8:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     bec:	80 91 10 03 	lds	r24, 0x0310
     bf0:	90 91 11 03 	lds	r25, 0x0311
     bf4:	90 93 af 04 	sts	0x04AF, r25
     bf8:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     bfc:	80 91 12 03 	lds	r24, 0x0312
     c00:	90 91 13 03 	lds	r25, 0x0313
     c04:	90 93 b1 04 	sts	0x04B1, r25
     c08:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c0c:	80 91 1a 03 	lds	r24, 0x031A
     c10:	90 91 1b 03 	lds	r25, 0x031B
     c14:	90 93 b3 04 	sts	0x04B3, r25
     c18:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index=1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 b4 04 	sts	0x04B4, r24
				break;
     c22:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
     c24:	80 91 20 03 	lds	r24, 0x0320
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	49 f4       	brne	.+18     	; 0xc3e <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c2c:	80 91 0c 03 	lds	r24, 0x030C
     c30:	90 91 0d 03 	lds	r25, 0x030D
     c34:	90 93 ad 04 	sts	0x04AD, r25
     c38:	80 93 ac 04 	sts	0x04AC, r24
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     c3e:	80 91 0e 03 	lds	r24, 0x030E
     c42:	90 91 0f 03 	lds	r25, 0x030F
     c46:	90 93 ad 04 	sts	0x04AD, r25
     c4a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     c4e:	80 91 10 03 	lds	r24, 0x0310
     c52:	90 91 11 03 	lds	r25, 0x0311
     c56:	90 93 af 04 	sts	0x04AF, r25
     c5a:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     c5e:	80 91 12 03 	lds	r24, 0x0312
     c62:	90 91 13 03 	lds	r25, 0x0313
     c66:	90 93 b1 04 	sts	0x04B1, r25
     c6a:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c6e:	80 91 1a 03 	lds	r24, 0x031A
     c72:	90 91 1b 03 	lds	r25, 0x031B
     c76:	90 93 b3 04 	sts	0x04B3, r25
     c7a:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index=2;
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	80 93 b4 04 	sts	0x04B4, r24
				break;
     c84:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
     c86:	80 91 20 03 	lds	r24, 0x0320
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	49 f4       	brne	.+18     	; 0xca0 <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c8e:	80 91 0c 03 	lds	r24, 0x030C
     c92:	90 91 0d 03 	lds	r25, 0x030D
     c96:	90 93 ad 04 	sts	0x04AD, r25
     c9a:	80 93 ac 04 	sts	0x04AC, r24
     c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     ca0:	80 91 0e 03 	lds	r24, 0x030E
     ca4:	90 91 0f 03 	lds	r25, 0x030F
     ca8:	90 93 ad 04 	sts	0x04AD, r25
     cac:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     cb0:	80 91 10 03 	lds	r24, 0x0310
     cb4:	90 91 11 03 	lds	r25, 0x0311
     cb8:	90 93 af 04 	sts	0x04AF, r25
     cbc:	80 93 ae 04 	sts	0x04AE, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     cc0:	80 91 12 03 	lds	r24, 0x0312
     cc4:	90 91 13 03 	lds	r25, 0x0313
     cc8:	90 93 b1 04 	sts	0x04B1, r25
     ccc:	80 93 b0 04 	sts	0x04B0, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     cd0:	80 91 1a 03 	lds	r24, 0x031A
     cd4:	90 91 1b 03 	lds	r25, 0x031B
     cd8:	90 93 b3 04 	sts	0x04B3, r25
     cdc:	80 93 b2 04 	sts	0x04B2, r24
				SYS_Screen_Buffer.white_index=3;
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	80 93 b4 04 	sts	0x04B4, r24
     ce6:	08 95       	ret

00000ce8 <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	6f dc       	rcall	.-1826   	; 0x5cc <FindState>
     cee:	90 93 a8 04 	sts	0x04A8, r25
     cf2:	80 93 a7 04 	sts	0x04A7, r24
	
		Current_TimerFunc = SYS_State->Timer_Action;
     cf6:	dc 01       	movw	r26, r24
     cf8:	56 96       	adiw	r26, 0x16	; 22
     cfa:	ed 91       	ld	r30, X+
     cfc:	fc 91       	ld	r31, X
     cfe:	57 97       	sbiw	r26, 0x17	; 23
     d00:	f0 93 a6 04 	sts	0x04A6, r31
     d04:	e0 93 a5 04 	sts	0x04A5, r30
		Current_TimerFunc();
     d08:	09 95       	icall
		Timer0_RegisterCallbackFunction(SYS_State->Timer_Action,1000);
     d0a:	e0 91 a7 04 	lds	r30, 0x04A7
     d0e:	f0 91 a8 04 	lds	r31, 0x04A8
     d12:	68 ee       	ldi	r22, 0xE8	; 232
     d14:	73 e0       	ldi	r23, 0x03	; 3
     d16:	86 89       	ldd	r24, Z+22	; 0x16
     d18:	97 89       	ldd	r25, Z+23	; 0x17
     d1a:	39 d1       	rcall	.+626    	; 0xf8e <Timer0_RegisterCallbackFunction>
		State_Update();
     d1c:	83 dc       	rcall	.-1786   	; 0x624 <State_Update>
		DrawScreen();
     d1e:	1b cc       	rjmp	.-1994   	; 0x556 <DrawScreen>
     d20:	08 95       	ret

00000d22 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
     d22:	45 d2       	rcall	.+1162   	; 0x11ae <getkey>
		switch(key){
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	71 f0       	breq	.+28     	; 0xd44 <Menu_Poll+0x22>
     d28:	38 f4       	brcc	.+14     	; 0xd38 <Menu_Poll+0x16>
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <Menu_Poll+0xe>
     d2e:	3a c0       	rjmp	.+116    	; 0xda4 <Menu_Poll+0x82>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	09 f4       	brne	.+2      	; 0xd36 <Menu_Poll+0x14>
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <Menu_Poll+0xb2>
     d36:	7e c0       	rjmp	.+252    	; 0xe34 <Menu_Poll+0x112>
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	e1 f0       	breq	.+56     	; 0xd74 <Menu_Poll+0x52>
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	09 f4       	brne	.+2      	; 0xd42 <Menu_Poll+0x20>
     d40:	61 c0       	rjmp	.+194    	; 0xe04 <Menu_Poll+0xe2>
     d42:	78 c0       	rjmp	.+240    	; 0xe34 <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
     d44:	e0 91 a7 04 	lds	r30, 0x04A7
     d48:	f0 91 a8 04 	lds	r31, 0x04A8
     d4c:	02 88       	ldd	r0, Z+18	; 0x12
     d4e:	f3 89       	ldd	r31, Z+19	; 0x13
     d50:	e0 2d       	mov	r30, r0
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	09 f0       	breq	.+2      	; 0xd58 <Menu_Poll+0x36>
					SYS_State->Right_Action();
     d56:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
     d58:	e0 91 a7 04 	lds	r30, 0x04A7
     d5c:	f0 91 a8 04 	lds	r31, 0x04A8
     d60:	80 85       	ldd	r24, Z+8	; 0x08
     d62:	91 85       	ldd	r25, Z+9	; 0x09
     d64:	33 dc       	rcall	.-1946   	; 0x5cc <FindState>
     d66:	90 93 a8 04 	sts	0x04A8, r25
     d6a:	80 93 a7 04 	sts	0x04A7, r24
				State_Update();
     d6e:	5a dc       	rcall	.-1868   	; 0x624 <State_Update>
				DrawScreen();
     d70:	f2 db       	rcall	.-2076   	; 0x556 <DrawScreen>
				break;
     d72:	62 c0       	rjmp	.+196    	; 0xe38 <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
     d74:	e0 91 a7 04 	lds	r30, 0x04A7
     d78:	f0 91 a8 04 	lds	r31, 0x04A8
     d7c:	00 88       	ldd	r0, Z+16	; 0x10
     d7e:	f1 89       	ldd	r31, Z+17	; 0x11
     d80:	e0 2d       	mov	r30, r0
     d82:	30 97       	sbiw	r30, 0x00	; 0
     d84:	09 f0       	breq	.+2      	; 0xd88 <Menu_Poll+0x66>
					SYS_State->Left_Action();
     d86:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
     d88:	e0 91 a7 04 	lds	r30, 0x04A7
     d8c:	f0 91 a8 04 	lds	r31, 0x04A8
     d90:	86 81       	ldd	r24, Z+6	; 0x06
     d92:	97 81       	ldd	r25, Z+7	; 0x07
     d94:	1b dc       	rcall	.-1994   	; 0x5cc <FindState>
     d96:	90 93 a8 04 	sts	0x04A8, r25
     d9a:	80 93 a7 04 	sts	0x04A7, r24
				State_Update();
     d9e:	42 dc       	rcall	.-1916   	; 0x624 <State_Update>
				DrawScreen();
     da0:	da db       	rcall	.-2124   	; 0x556 <DrawScreen>
				break;
     da2:	4a c0       	rjmp	.+148    	; 0xe38 <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
     da4:	e0 91 a7 04 	lds	r30, 0x04A7
     da8:	f0 91 a8 04 	lds	r31, 0x04A8
     dac:	04 84       	ldd	r0, Z+12	; 0x0c
     dae:	f5 85       	ldd	r31, Z+13	; 0x0d
     db0:	e0 2d       	mov	r30, r0
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	09 f0       	breq	.+2      	; 0xdb8 <Menu_Poll+0x96>
				SYS_State->Up_Action();
     db6:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
     db8:	e0 91 a7 04 	lds	r30, 0x04A7
     dbc:	f0 91 a8 04 	lds	r31, 0x04A8
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	03 dc       	rcall	.-2042   	; 0x5cc <FindState>
     dc6:	90 93 a8 04 	sts	0x04A8, r25
     dca:	80 93 a7 04 	sts	0x04A7, r24
				State_Update();
     dce:	2a dc       	rcall	.-1964   	; 0x624 <State_Update>
				DrawScreen();
     dd0:	c2 db       	rcall	.-2172   	; 0x556 <DrawScreen>
				break;
     dd2:	32 c0       	rjmp	.+100    	; 0xe38 <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
     dd4:	e0 91 a7 04 	lds	r30, 0x04A7
     dd8:	f0 91 a8 04 	lds	r31, 0x04A8
     ddc:	06 84       	ldd	r0, Z+14	; 0x0e
     dde:	f7 85       	ldd	r31, Z+15	; 0x0f
     de0:	e0 2d       	mov	r30, r0
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <Menu_Poll+0xc6>
				SYS_State->Down_Action();
     de6:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
     de8:	e0 91 a7 04 	lds	r30, 0x04A7
     dec:	f0 91 a8 04 	lds	r31, 0x04A8
     df0:	84 81       	ldd	r24, Z+4	; 0x04
     df2:	95 81       	ldd	r25, Z+5	; 0x05
     df4:	eb db       	rcall	.-2090   	; 0x5cc <FindState>
     df6:	90 93 a8 04 	sts	0x04A8, r25
     dfa:	80 93 a7 04 	sts	0x04A7, r24
				State_Update();
     dfe:	12 dc       	rcall	.-2012   	; 0x624 <State_Update>
				DrawScreen();
     e00:	aa db       	rcall	.-2220   	; 0x556 <DrawScreen>
				break;
     e02:	1a c0       	rjmp	.+52     	; 0xe38 <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
     e04:	e0 91 a7 04 	lds	r30, 0x04A7
     e08:	f0 91 a8 04 	lds	r31, 0x04A8
     e0c:	04 88       	ldd	r0, Z+20	; 0x14
     e0e:	f5 89       	ldd	r31, Z+21	; 0x15
     e10:	e0 2d       	mov	r30, r0
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	09 f0       	breq	.+2      	; 0xe18 <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
     e16:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
     e18:	e0 91 a7 04 	lds	r30, 0x04A7
     e1c:	f0 91 a8 04 	lds	r31, 0x04A8
     e20:	82 85       	ldd	r24, Z+10	; 0x0a
     e22:	93 85       	ldd	r25, Z+11	; 0x0b
     e24:	d3 db       	rcall	.-2138   	; 0x5cc <FindState>
     e26:	90 93 a8 04 	sts	0x04A8, r25
     e2a:	80 93 a7 04 	sts	0x04A7, r24
				State_Update();
     e2e:	fa db       	rcall	.-2060   	; 0x624 <State_Update>
				DrawScreen();
     e30:	92 db       	rcall	.-2268   	; 0x556 <DrawScreen>
				break;
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	d1 f0       	breq	.+52     	; 0xe6c <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
     e38:	80 91 a5 04 	lds	r24, 0x04A5
     e3c:	90 91 a6 04 	lds	r25, 0x04A6
     e40:	fb d0       	rcall	.+502    	; 0x1038 <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
     e42:	e0 91 a7 04 	lds	r30, 0x04A7
     e46:	f0 91 a8 04 	lds	r31, 0x04A8
     e4a:	06 88       	ldd	r0, Z+22	; 0x16
     e4c:	f7 89       	ldd	r31, Z+23	; 0x17
     e4e:	e0 2d       	mov	r30, r0
     e50:	f0 93 a6 04 	sts	0x04A6, r31
     e54:	e0 93 a5 04 	sts	0x04A5, r30
			if(Current_TimerFunc != NULL){
     e58:	30 97       	sbiw	r30, 0x00	; 0
     e5a:	41 f0       	breq	.+16     	; 0xe6c <Menu_Poll+0x14a>
			Current_TimerFunc();
     e5c:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
     e5e:	68 ee       	ldi	r22, 0xE8	; 232
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	80 91 a5 04 	lds	r24, 0x04A5
     e66:	90 91 a6 04 	lds	r25, 0x04A6
     e6a:	91 c0       	rjmp	.+290    	; 0xf8e <Timer0_RegisterCallbackFunction>
     e6c:	08 95       	ret

00000e6e <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
     e6e:	ed eb       	ldi	r30, 0xBD	; 189
     e70:	f4 e0       	ldi	r31, 0x04	; 4
     e72:	8d ee       	ldi	r24, 0xED	; 237
     e74:	94 e0       	ldi	r25, 0x04	; 4
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
     e76:	11 82       	std	Z+1, r1	; 0x01
     e78:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
     e7a:	13 82       	std	Z+3, r1	; 0x03
     e7c:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	14 82       	std	Z+4, r1	; 0x04
     e82:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
     e84:	e8 17       	cp	r30, r24
     e86:	f9 07       	cpc	r31, r25
     e88:	b1 f7       	brne	.-20     	; 0xe76 <Timer0_Init+0x8>
     e8a:	e5 eb       	ldi	r30, 0xB5	; 181
     e8c:	f4 e0       	ldi	r31, 0x04	; 4
     e8e:	8d eb       	ldi	r24, 0xBD	; 189
     e90:	94 e0       	ldi	r25, 0x04	; 4
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
     e92:	2f ef       	ldi	r18, 0xFF	; 255
     e94:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     e96:	e8 17       	cp	r30, r24
     e98:	f9 07       	cpc	r31, r25
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
     e9c:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
     e9e:	83 b7       	in	r24, 0x33	; 51
     ea0:	87 60       	ori	r24, 0x07	; 7
     ea2:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
     ea4:	88 eb       	ldi	r24, 0xB8	; 184
     ea6:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
     ea8:	86 b7       	in	r24, 0x36	; 54
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
     eae:	87 b7       	in	r24, 0x37	; 55
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	87 bf       	out	0x37, r24	; 55
			sei();
     eb4:	78 94       	sei
     eb6:	08 95       	ret

00000eb8 <__vector_15>:
}


ISR(TIMER0_COMP_vect){
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	0b b6       	in	r0, 0x3b	; 59
     ec4:	0f 92       	push	r0
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
     ee6:	88 eb       	ldi	r24, 0xB8	; 184
     ee8:	82 bf       	out	0x32, r24	; 50
     eea:	cd eb       	ldi	r28, 0xBD	; 189
     eec:	d4 e0       	ldi	r29, 0x04	; 4
     eee:	0d ee       	ldi	r16, 0xED	; 237
     ef0:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
     ef2:	88 81       	ld	r24, Y
     ef4:	99 81       	ldd	r25, Y+1	; 0x01
     ef6:	89 2b       	or	r24, r25
     ef8:	81 f0       	breq	.+32     	; 0xf1a <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	2a 81       	ldd	r18, Y+2	; 0x02
     f00:	3b 81       	ldd	r19, Y+3	; 0x03
     f02:	82 17       	cp	r24, r18
     f04:	93 07       	cpc	r25, r19
     f06:	31 f4       	brne	.+12     	; 0xf14 <__vector_15+0x5c>
				EventList[i].counter = 0;
     f08:	1d 82       	std	Y+5, r1	; 0x05
     f0a:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
     f0c:	e8 81       	ld	r30, Y
     f0e:	f9 81       	ldd	r31, Y+1	; 0x01
     f10:	09 95       	icall
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	9d 83       	std	Y+5, r25	; 0x05
     f18:	8c 83       	std	Y+4, r24	; 0x04
     f1a:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
     f1c:	c0 17       	cp	r28, r16
     f1e:	d1 07       	cpc	r29, r17
     f20:	41 f7       	brne	.-48     	; 0xef2 <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
     f22:	80 91 a9 04 	lds	r24, 0x04A9
     f26:	90 91 aa 04 	lds	r25, 0x04AA
     f2a:	9c 01       	movw	r18, r24
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	30 93 aa 04 	sts	0x04AA, r19
     f34:	20 93 a9 04 	sts	0x04A9, r18
     f38:	84 36       	cpi	r24, 0x64	; 100
     f3a:	91 05       	cpc	r25, r1
     f3c:	89 f4       	brne	.+34     	; 0xf60 <__vector_15+0xa8>
     f3e:	e5 eb       	ldi	r30, 0xB5	; 181
     f40:	f4 e0       	ldi	r31, 0x04	; 4
     f42:	8d eb       	ldi	r24, 0xBD	; 189
     f44:	94 e0       	ldi	r25, 0x04	; 4
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
     f46:	20 81       	ld	r18, Z
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	2e 3f       	cpi	r18, 0xFE	; 254
     f4c:	08 f4       	brcc	.+2      	; 0xf50 <__vector_15+0x98>
				CountDownTimers[i]--;
     f4e:	20 83       	st	Z, r18
     f50:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
     f52:	e8 17       	cp	r30, r24
     f54:	f9 07       	cpc	r31, r25
     f56:	b9 f7       	brne	.-18     	; 0xf46 <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
     f58:	10 92 aa 04 	sts	0x04AA, r1
     f5c:	10 92 a9 04 	sts	0x04A9, r1
	}
	
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	0f 90       	pop	r0
     f82:	0b be       	out	0x3b, r0	; 59
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
     f92:	6a 30       	cpi	r22, 0x0A	; 10
     f94:	71 05       	cpc	r23, r1
     f96:	10 f4       	brcc	.+4      	; 0xf9c <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
     f98:	6a e0       	ldi	r22, 0x0A	; 10
     f9a:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     f9c:	c0 91 bd 04 	lds	r28, 0x04BD
     fa0:	d0 91 be 04 	lds	r29, 0x04BE
     fa4:	c8 17       	cp	r28, r24
     fa6:	d9 07       	cpc	r29, r25
     fa8:	09 f4       	brne	.+2      	; 0xfac <Timer0_RegisterCallbackFunction+0x1e>
     faa:	3e c0       	rjmp	.+124    	; 0x1028 <Timer0_RegisterCallbackFunction+0x9a>
     fac:	ad ee       	ldi	r26, 0xED	; 237
     fae:	b4 e0       	ldi	r27, 0x04	; 4
     fb0:	e3 ec       	ldi	r30, 0xC3	; 195
     fb2:	f4 e0       	ldi	r31, 0x04	; 4
     fb4:	40 81       	ld	r20, Z
     fb6:	51 81       	ldd	r21, Z+1	; 0x01
     fb8:	48 17       	cp	r20, r24
     fba:	59 07       	cpc	r21, r25
     fbc:	b9 f1       	breq	.+110    	; 0x102c <Timer0_RegisterCallbackFunction+0x9e>
     fbe:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     fc0:	ea 17       	cp	r30, r26
     fc2:	fb 07       	cpc	r31, r27
     fc4:	b9 f7       	brne	.-18     	; 0xfb4 <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
     fc6:	cd 2b       	or	r28, r29
     fc8:	51 f0       	breq	.+20     	; 0xfde <Timer0_RegisterCallbackFunction+0x50>
     fca:	e3 ec       	ldi	r30, 0xC3	; 195
     fcc:	f4 e0       	ldi	r31, 0x04	; 4
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	ea 01       	movw	r28, r20
     fd4:	a0 81       	ld	r26, Z
     fd6:	b1 81       	ldd	r27, Z+1	; 0x01
     fd8:	ab 2b       	or	r26, r27
     fda:	f9 f4       	brne	.+62     	; 0x101a <Timer0_RegisterCallbackFunction+0x8c>
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <Timer0_RegisterCallbackFunction+0x54>
     fde:	c0 e0       	ldi	r28, 0x00	; 0
     fe0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
     fe2:	ae 01       	movw	r20, r28
     fe4:	44 0f       	add	r20, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	fa 01       	movw	r30, r20
     fea:	ec 0f       	add	r30, r28
     fec:	fd 1f       	adc	r31, r29
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e3 54       	subi	r30, 0x43	; 67
     ff4:	fb 4f       	sbci	r31, 0xFB	; 251
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
     ffa:	9b 01       	movw	r18, r22
     ffc:	ad ec       	ldi	r26, 0xCD	; 205
     ffe:	bc ec       	ldi	r27, 0xCC	; 204
    1000:	92 d3       	rcall	.+1828   	; 0x1726 <__umulhisi3>
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	93 83       	std	Z+3, r25	; 0x03
    1010:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
    1012:	15 82       	std	Z+5, r1	; 0x05
    1014:	14 82       	std	Z+4, r1	; 0x04
			return true;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <Timer0_RegisterCallbackFunction+0xa4>
    101a:	4f 5f       	subi	r20, 0xFF	; 255
    101c:	5f 4f       	sbci	r21, 0xFF	; 255
    101e:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1020:	48 30       	cpi	r20, 0x08	; 8
    1022:	51 05       	cpc	r21, r1
    1024:	b1 f6       	brne	.-84     	; 0xfd2 <Timer0_RegisterCallbackFunction+0x44>
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <Timer0_RegisterCallbackFunction+0xa4>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    1030:	80 e0       	ldi	r24, 0x00	; 0
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
    1038:	20 91 bd 04 	lds	r18, 0x04BD
    103c:	30 91 be 04 	lds	r19, 0x04BE
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	59 f0       	breq	.+22     	; 0x105c <Timer0_RemoveCallbackFunction+0x24>
    1046:	e3 ec       	ldi	r30, 0xC3	; 195
    1048:	f4 e0       	ldi	r31, 0x04	; 4
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	b9 01       	movw	r22, r18
    1050:	40 81       	ld	r20, Z
    1052:	51 81       	ldd	r21, Z+1	; 0x01
    1054:	48 17       	cp	r20, r24
    1056:	59 07       	cpc	r21, r25
    1058:	e1 f4       	brne	.+56     	; 0x1092 <Timer0_RemoveCallbackFunction+0x5a>
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <Timer0_RemoveCallbackFunction+0x28>
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
    1060:	cb 01       	movw	r24, r22
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	fc 01       	movw	r30, r24
    1068:	e6 0f       	add	r30, r22
    106a:	f7 1f       	adc	r31, r23
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	e3 54       	subi	r30, 0x43	; 67
    1072:	fb 4f       	sbci	r31, 0xFB	; 251
    1074:	11 82       	std	Z+1, r1	; 0x01
    1076:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
    107c:	68 0f       	add	r22, r24
    107e:	79 1f       	adc	r23, r25
    1080:	fb 01       	movw	r30, r22
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e3 54       	subi	r30, 0x43	; 67
    1088:	fb 4f       	sbci	r31, 0xFB	; 251
    108a:	15 82       	std	Z+5, r1	; 0x05
    108c:	14 82       	std	Z+4, r1	; 0x04
			return true;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1098:	28 30       	cpi	r18, 0x08	; 8
    109a:	31 05       	cpc	r19, r1
    109c:	c1 f6       	brne	.-80     	; 0x104e <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    109e:	80 e0       	ldi	r24, 0x00	; 0
}
    10a0:	08 95       	ret

000010a2 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
    10a2:	80 91 b5 04 	lds	r24, 0x04B5
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	51 f0       	breq	.+20     	; 0x10be <Timer0_AllocateCountdownTimer+0x1c>
    10aa:	e6 eb       	ldi	r30, 0xB6	; 182
    10ac:	f4 e0       	ldi	r31, 0x04	; 4
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	82 2f       	mov	r24, r18
    10b4:	a9 01       	movw	r20, r18
    10b6:	91 91       	ld	r25, Z+
    10b8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ba:	51 f4       	brne	.+20     	; 0x10d0 <Timer0_AllocateCountdownTimer+0x2e>
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <Timer0_AllocateCountdownTimer+0x22>
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10c2:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
    10c4:	fa 01       	movw	r30, r20
    10c6:	eb 54       	subi	r30, 0x4B	; 75
    10c8:	fb 4f       	sbci	r31, 0xFB	; 251
    10ca:	10 82       	st	Z, r1
		return i+1;
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	08 95       	ret
    10d0:	2f 5f       	subi	r18, 0xFF	; 255
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10d4:	28 30       	cpi	r18, 0x08	; 8
    10d6:	31 05       	cpc	r19, r1
    10d8:	61 f7       	brne	.-40     	; 0x10b2 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
    10da:	80 e0       	ldi	r24, 0x00	; 0
}
    10dc:	08 95       	ret

000010de <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
    10de:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
    10e4:	ea e6       	ldi	r30, 0x6A	; 106
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
    10ee:	89 b7       	in	r24, 0x39	; 57
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
    10f4:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
    10f6:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
    10f8:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
    10fa:	d3 df       	rcall	.-90     	; 0x10a2 <Timer0_AllocateCountdownTimer>
    10fc:	80 93 ed 04 	sts	0x04ED, r24
    1100:	08 95       	ret

00001102 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
    1102:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
    1104:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1106:	80 fd       	sbrc	r24, 0
    1108:	15 c0       	rjmp	.+42     	; 0x1134 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    110a:	81 fd       	sbrc	r24, 1
    110c:	15 c0       	rjmp	.+42     	; 0x1138 <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    110e:	82 fd       	sbrc	r24, 2
    1110:	15 c0       	rjmp	.+42     	; 0x113c <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1112:	83 fd       	sbrc	r24, 3
    1114:	15 c0       	rjmp	.+42     	; 0x1140 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1116:	84 fd       	sbrc	r24, 4
    1118:	15 c0       	rjmp	.+42     	; 0x1144 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    111a:	85 fd       	sbrc	r24, 5
    111c:	15 c0       	rjmp	.+42     	; 0x1148 <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    111e:	86 fd       	sbrc	r24, 6
    1120:	15 c0       	rjmp	.+42     	; 0x114c <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1122:	88 23       	and	r24, r24
    1124:	d4 f4       	brge	.+52     	; 0x115a <button_interrupt+0x58>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    1128:	90 93 21 03 	sts	0x0321, r25
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 ab 04 	sts	0x04AB, r24
    1132:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1134:	95 e0       	ldi	r25, 0x05	; 5
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    1138:	97 e0       	ldi	r25, 0x07	; 7
    113a:	0b c0       	rjmp	.+22     	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    113c:	94 e0       	ldi	r25, 0x04	; 4
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1150:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    1152:	80 91 ab 04 	lds	r24, 0x04AB
    1156:	88 23       	and	r24, r24
    1158:	39 f3       	breq	.-50     	; 0x1128 <button_interrupt+0x26>
    115a:	08 95       	ret

0000115c <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	0b b6       	in	r0, 0x3b	; 59
    1168:	0f 92       	push	r0
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
cli();	
    1182:	f8 94       	cli
button_interrupt();
    1184:	be df       	rcall	.-132    	; 0x1102 <button_interrupt>
sei();
    1186:	78 94       	sei
}
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	bf 91       	pop	r27
    118e:	af 91       	pop	r26
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	7f 91       	pop	r23
    1196:	6f 91       	pop	r22
    1198:	5f 91       	pop	r21
    119a:	4f 91       	pop	r20
    119c:	3f 91       	pop	r19
    119e:	2f 91       	pop	r18
    11a0:	0f 90       	pop	r0
    11a2:	0b be       	out	0x3b, r0	; 59
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	0f 90       	pop	r0
    11aa:	1f 90       	pop	r1
    11ac:	18 95       	reti

000011ae <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    11ae:	f8 94       	cli
	if(KEY_VALID){
    11b0:	80 91 ab 04 	lds	r24, 0x04AB
    11b4:	88 23       	and	r24, r24
    11b6:	29 f0       	breq	.+10     	; 0x11c2 <getkey+0x14>
		k = KEY;
    11b8:	80 91 21 03 	lds	r24, 0x0321
		KEY_VALID = false;
    11bc:	10 92 ab 04 	sts	0x04AB, r1
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <getkey+0x16>
		
	}
	else k=KEY_NULL;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    11c4:	78 94       	sei
	
	return k;
	
	
	
    11c6:	08 95       	ret

000011c8 <lcd12864_send_data>:
	lcd12864_write_char('.');
	float digi = v - (int)v;
	digi*=100;
	itoa((int)digi,str,10);
	lcd12864_write_str(str);
}
    11c8:	98 e0       	ldi	r25, 0x08	; 8
    11ca:	88 23       	and	r24, r24
    11cc:	14 f4       	brge	.+4      	; 0x11d2 <lcd12864_send_data+0xa>
    11ce:	1c 9a       	sbi	0x03, 4	; 3
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <lcd12864_send_data+0xc>
    11d2:	1c 98       	cbi	0x03, 4	; 3
    11d4:	88 0f       	add	r24, r24
    11d6:	1b 9a       	sbi	0x03, 3	; 3
    11d8:	00 00       	nop
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	1b 98       	cbi	0x03, 3	; 3
    11e0:	00 00       	nop
    11e2:	00 00       	nop
    11e4:	00 00       	nop
    11e6:	91 50       	subi	r25, 0x01	; 1
    11e8:	81 f7       	brne	.-32     	; 0x11ca <lcd12864_send_data+0x2>
    11ea:	08 95       	ret

000011ec <lcd12864_wait_busy>:
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	87 3d       	cpi	r24, 0xD7	; 215
    11f4:	23 e0       	ldi	r18, 0x03	; 3
    11f6:	92 07       	cpc	r25, r18
    11f8:	d9 f7       	brne	.-10     	; 0x11f0 <lcd12864_wait_busy+0x4>
    11fa:	08 95       	ret

000011fc <lcd12864_send_cmd>:
    11fc:	cf 93       	push	r28
    11fe:	c8 2f       	mov	r28, r24
    1200:	1e 9a       	sbi	0x03, 6	; 3
    1202:	88 ef       	ldi	r24, 0xF8	; 248
    1204:	e1 df       	rcall	.-62     	; 0x11c8 <lcd12864_send_data>
    1206:	8c 2f       	mov	r24, r28
    1208:	80 7f       	andi	r24, 0xF0	; 240
    120a:	de df       	rcall	.-68     	; 0x11c8 <lcd12864_send_data>
    120c:	8c 2f       	mov	r24, r28
    120e:	82 95       	swap	r24
    1210:	80 7f       	andi	r24, 0xF0	; 240
    1212:	da df       	rcall	.-76     	; 0x11c8 <lcd12864_send_data>
    1214:	eb df       	rcall	.-42     	; 0x11ec <lcd12864_wait_busy>
    1216:	1e 98       	cbi	0x03, 6	; 3
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <lcd12864_init>:
    121c:	82 b1       	in	r24, 0x02	; 2
    121e:	88 6f       	ori	r24, 0xF8	; 248
    1220:	82 b9       	out	0x02, r24	; 2
    1222:	1d 9a       	sbi	0x03, 5	; 3
    1224:	1f 98       	cbi	0x03, 7	; 3
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	81 15       	cp	r24, r1
    122e:	20 e3       	ldi	r18, 0x30	; 48
    1230:	92 07       	cpc	r25, r18
    1232:	d9 f7       	brne	.-10     	; 0x122a <lcd12864_init+0xe>
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	e2 df       	rcall	.-60     	; 0x11fc <lcd12864_send_cmd>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	e0 df       	rcall	.-64     	; 0x11fc <lcd12864_send_cmd>
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	de df       	rcall	.-68     	; 0x11fc <lcd12864_send_cmd>
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	dc df       	rcall	.-72     	; 0x11fc <lcd12864_send_cmd>
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	da df       	rcall	.-76     	; 0x11fc <lcd12864_send_cmd>
    1248:	8c e0       	ldi	r24, 0x0C	; 12
    124a:	d8 cf       	rjmp	.-80     	; 0x11fc <lcd12864_send_cmd>
    124c:	08 95       	ret

0000124e <lcd12864_clear>:
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	d5 df       	rcall	.-86     	; 0x11fc <lcd12864_send_cmd>
    1252:	cc cf       	rjmp	.-104    	; 0x11ec <lcd12864_wait_busy>
    1254:	08 95       	ret

00001256 <lcd12864_set_pos>:
    1256:	62 30       	cpi	r22, 0x02	; 2
    1258:	89 f0       	breq	.+34     	; 0x127c <lcd12864_set_pos+0x26>
    125a:	18 f4       	brcc	.+6      	; 0x1262 <lcd12864_set_pos+0xc>
    125c:	61 30       	cpi	r22, 0x01	; 1
    125e:	31 f0       	breq	.+12     	; 0x126c <lcd12864_set_pos+0x16>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <lcd12864_set_pos+0x22>
    1262:	63 30       	cpi	r22, 0x03	; 3
    1264:	29 f0       	breq	.+10     	; 0x1270 <lcd12864_set_pos+0x1a>
    1266:	64 30       	cpi	r22, 0x04	; 4
    1268:	29 f0       	breq	.+10     	; 0x1274 <lcd12864_set_pos+0x1e>
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <lcd12864_set_pos+0x22>
    126c:	90 e8       	ldi	r25, 0x80	; 128
    126e:	07 c0       	rjmp	.+14     	; 0x127e <lcd12864_set_pos+0x28>
    1270:	98 e8       	ldi	r25, 0x88	; 136
    1272:	05 c0       	rjmp	.+10     	; 0x127e <lcd12864_set_pos+0x28>
    1274:	98 e9       	ldi	r25, 0x98	; 152
    1276:	03 c0       	rjmp	.+6      	; 0x127e <lcd12864_set_pos+0x28>
    1278:	98 e9       	ldi	r25, 0x98	; 152
    127a:	01 c0       	rjmp	.+2      	; 0x127e <lcd12864_set_pos+0x28>
    127c:	90 e9       	ldi	r25, 0x90	; 144
    127e:	81 31       	cpi	r24, 0x11	; 17
    1280:	10 f4       	brcc	.+4      	; 0x1286 <lcd12864_set_pos+0x30>
    1282:	89 2b       	or	r24, r25
    1284:	bb cf       	rjmp	.-138    	; 0x11fc <lcd12864_send_cmd>
    1286:	08 95       	ret

00001288 <lcd12864_write_char>:
    1288:	cf 93       	push	r28
    128a:	c8 2f       	mov	r28, r24
    128c:	1e 9a       	sbi	0x03, 6	; 3
    128e:	ae df       	rcall	.-164    	; 0x11ec <lcd12864_wait_busy>
    1290:	8a ef       	ldi	r24, 0xFA	; 250
    1292:	9a df       	rcall	.-204    	; 0x11c8 <lcd12864_send_data>
    1294:	8c 2f       	mov	r24, r28
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	97 df       	rcall	.-210    	; 0x11c8 <lcd12864_send_data>
    129a:	8c 2f       	mov	r24, r28
    129c:	82 95       	swap	r24
    129e:	80 7f       	andi	r24, 0xF0	; 240
    12a0:	93 df       	rcall	.-218    	; 0x11c8 <lcd12864_send_data>
    12a2:	1e 98       	cbi	0x03, 6	; 3
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <lcd12864_write_str>:
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
    12b0:	88 81       	ld	r24, Y
    12b2:	88 23       	and	r24, r24
    12b4:	49 f0       	breq	.+18     	; 0x12c8 <lcd12864_write_str+0x20>
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	e7 df       	rcall	.-50     	; 0x1288 <lcd12864_write_char>
    12ba:	1f 5f       	subi	r17, 0xFF	; 255
    12bc:	fe 01       	movw	r30, r28
    12be:	e1 0f       	add	r30, r17
    12c0:	f1 1d       	adc	r31, r1
    12c2:	80 81       	ld	r24, Z
    12c4:	81 11       	cpse	r24, r1
    12c6:	f8 cf       	rjmp	.-16     	; 0x12b8 <lcd12864_write_str+0x10>
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	08 95       	ret

000012d0 <lcd12864_write_int>:
    12d0:	4a e0       	ldi	r20, 0x0A	; 10
    12d2:	64 e4       	ldi	r22, 0x44	; 68
    12d4:	73 e0       	ldi	r23, 0x03	; 3
    12d6:	36 d2       	rcall	.+1132   	; 0x1744 <__itoa_ncheck>


void lcd12864_write_int(int v){
	char *str="    ";
	itoa(v,str,10);
	lcd12864_write_str(str);
    12d8:	84 e4       	ldi	r24, 0x44	; 68
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	e5 cf       	rjmp	.-54     	; 0x12a8 <lcd12864_write_str>
    12de:	08 95       	ret

000012e0 <lcd12864_SetWhite>:
}



void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t end_x, uint8_t clear){
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	c8 2f       	mov	r28, r24
    12f2:	06 2f       	mov	r16, r22
    12f4:	d4 2f       	mov	r29, r20
    12f6:	12 2f       	mov	r17, r18
	uint8_t i,j,white_x=0, white_y=0, white_end_x, clr_x=0, clr_y=0;
	
	lcd12864_send_cmd(0x34);	
    12f8:	84 e3       	ldi	r24, 0x34	; 52
    12fa:	80 df       	rcall	.-256    	; 0x11fc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x36);	
    12fc:	86 e3       	ldi	r24, 0x36	; 54
    12fe:	7e df       	rcall	.-260    	; 0x11fc <lcd12864_send_cmd>
	
	
	white_end_x = (end_x-x+1);
    1300:	dc 1b       	sub	r29, r28
    1302:	df 5f       	subi	r29, 0xFF	; 255
	white_end_x <<=1;
    1304:	dd 0f       	add	r29, r29
    1306:	60 2f       	mov	r22, r16
    1308:	05 30       	cpi	r16, 0x05	; 5
    130a:	08 f0       	brcs	.+2      	; 0x130e <lcd12864_SetWhite+0x2e>
    130c:	64 e0       	ldi	r22, 0x04	; 4
	if(y>4) y=4; if(y<1) y=1;
    130e:	66 23       	and	r22, r22
    1310:	59 f0       	breq	.+22     	; 0x1328 <lcd12864_SetWhite+0x48>
	switch(y){
    1312:	62 30       	cpi	r22, 0x02	; 2
    1314:	a9 f0       	breq	.+42     	; 0x1340 <lcd12864_SetWhite+0x60>
    1316:	18 f4       	brcc	.+6      	; 0x131e <lcd12864_SetWhite+0x3e>
    1318:	61 30       	cpi	r22, 0x01	; 1
    131a:	d1 f5       	brne	.+116    	; 0x1390 <lcd12864_SetWhite+0xb0>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <lcd12864_SetWhite+0x48>
    131e:	63 30       	cpi	r22, 0x03	; 3
    1320:	e1 f0       	breq	.+56     	; 0x135a <lcd12864_SetWhite+0x7a>
    1322:	64 30       	cpi	r22, 0x04	; 4
    1324:	39 f1       	breq	.+78     	; 0x1374 <lcd12864_SetWhite+0x94>
    1326:	34 c0       	rjmp	.+104    	; 0x1390 <lcd12864_SetWhite+0xb0>
		case 1:
			white_x = 0x80+x-1;
    1328:	0f 2e       	mov	r0, r31
    132a:	ff e7       	ldi	r31, 0x7F	; 127
    132c:	df 2e       	mov	r13, r31
    132e:	f0 2d       	mov	r31, r0
    1330:	dc 0e       	add	r13, r28
			white_y = 0x80;
			clr_x=0x80; clr_y =0x80;
    1332:	68 94       	set
    1334:	ee 24       	eor	r14, r14
    1336:	e7 f8       	bld	r14, 7
	white_end_x <<=1;
	if(y>4) y=4; if(y<1) y=1;
	switch(y){
		case 1:
			white_x = 0x80+x-1;
			white_y = 0x80;
    1338:	68 94       	set
    133a:	ff 24       	eor	r15, r15
    133c:	f7 f8       	bld	r15, 7
			clr_x=0x80; clr_y =0x80;
			break;
    133e:	2b c0       	rjmp	.+86     	; 0x1396 <lcd12864_SetWhite+0xb6>
		case 2:
			white_x = 0x80+x-1;
    1340:	0f 2e       	mov	r0, r31
    1342:	ff e7       	ldi	r31, 0x7F	; 127
    1344:	df 2e       	mov	r13, r31
    1346:	f0 2d       	mov	r31, r0
    1348:	dc 0e       	add	r13, r28
			white_y = 0x90;
			clr_x = 0x80; clr_y = 0x90;
    134a:	68 94       	set
    134c:	ee 24       	eor	r14, r14
    134e:	e7 f8       	bld	r14, 7
			white_y = 0x80;
			clr_x=0x80; clr_y =0x80;
			break;
		case 2:
			white_x = 0x80+x-1;
			white_y = 0x90;
    1350:	0f 2e       	mov	r0, r31
    1352:	f0 e9       	ldi	r31, 0x90	; 144
    1354:	ff 2e       	mov	r15, r31
    1356:	f0 2d       	mov	r31, r0
			clr_x = 0x80; clr_y = 0x90;
			break;
    1358:	1e c0       	rjmp	.+60     	; 0x1396 <lcd12864_SetWhite+0xb6>
		case 3:
			white_x = 0x88+x-1;
    135a:	0f 2e       	mov	r0, r31
    135c:	f7 e8       	ldi	r31, 0x87	; 135
    135e:	df 2e       	mov	r13, r31
    1360:	f0 2d       	mov	r31, r0
    1362:	dc 0e       	add	r13, r28
			white_y = 0x80;
			clr_x =0x88; clr_y=0x80;
    1364:	0f 2e       	mov	r0, r31
    1366:	f8 e8       	ldi	r31, 0x88	; 136
    1368:	ef 2e       	mov	r14, r31
    136a:	f0 2d       	mov	r31, r0
			white_y = 0x90;
			clr_x = 0x80; clr_y = 0x90;
			break;
		case 3:
			white_x = 0x88+x-1;
			white_y = 0x80;
    136c:	68 94       	set
    136e:	ff 24       	eor	r15, r15
    1370:	f7 f8       	bld	r15, 7
			clr_x =0x88; clr_y=0x80;
			break;
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <lcd12864_SetWhite+0xb6>
		case 4:
			white_x = 0x88+x-1;
    1374:	0f 2e       	mov	r0, r31
    1376:	f7 e8       	ldi	r31, 0x87	; 135
    1378:	df 2e       	mov	r13, r31
    137a:	f0 2d       	mov	r31, r0
    137c:	dc 0e       	add	r13, r28
			white_y = 0x90;
			clr_x = 0x88; clr_y = 0x90;
    137e:	0f 2e       	mov	r0, r31
    1380:	f8 e8       	ldi	r31, 0x88	; 136
    1382:	ef 2e       	mov	r14, r31
    1384:	f0 2d       	mov	r31, r0
			white_y = 0x80;
			clr_x =0x88; clr_y=0x80;
			break;
		case 4:
			white_x = 0x88+x-1;
			white_y = 0x90;
    1386:	0f 2e       	mov	r0, r31
    1388:	f0 e9       	ldi	r31, 0x90	; 144
    138a:	ff 2e       	mov	r15, r31
    138c:	f0 2d       	mov	r31, r0
			clr_x = 0x88; clr_y = 0x90;
			break;
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <lcd12864_SetWhite+0xb6>
}



void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t end_x, uint8_t clear){
	uint8_t i,j,white_x=0, white_y=0, white_end_x, clr_x=0, clr_y=0;
    1390:	e1 2c       	mov	r14, r1
    1392:	f1 2c       	mov	r15, r1
    1394:	d1 2c       	mov	r13, r1
			break;
		default:
			break;
	}
	
	if(clear==0){
    1396:	11 11       	cpse	r17, r1
    1398:	15 c0       	rjmp	.+42     	; 0x13c4 <lcd12864_SetWhite+0xe4>
    139a:	68 94       	set
    139c:	cc 24       	eor	r12, r12
    139e:	c4 f8       	bld	r12, 4
    13a0:	cf 0c       	add	r12, r15
    13a2:	8f 2d       	mov	r24, r15
		for(i=0;i<16;i++){
			lcd12864_send_cmd(clr_y++);
    13a4:	01 e0       	ldi	r16, 0x01	; 1
    13a6:	08 0f       	add	r16, r24
    13a8:	29 df       	rcall	.-430    	; 0x11fc <lcd12864_send_cmd>
			lcd12864_send_cmd(clr_x);
    13aa:	8e 2d       	mov	r24, r14
    13ac:	27 df       	rcall	.-434    	; 0x11fc <lcd12864_send_cmd>
    13ae:	c0 e2       	ldi	r28, 0x20	; 32
			for(j=0;j<32;j++){
				lcd12864_send_data(0x00);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	0a df       	rcall	.-492    	; 0x11c8 <lcd12864_send_data>
				nop();nop();
    13b4:	00 00       	nop
    13b6:	00 00       	nop
    13b8:	c1 50       	subi	r28, 0x01	; 1
	
	if(clear==0){
		for(i=0;i<16;i++){
			lcd12864_send_cmd(clr_y++);
			lcd12864_send_cmd(clr_x);
			for(j=0;j<32;j++){
    13ba:	d1 f7       	brne	.-12     	; 0x13b0 <lcd12864_SetWhite+0xd0>
		default:
			break;
	}
	
	if(clear==0){
		for(i=0;i<16;i++){
    13bc:	0c 15       	cp	r16, r12
    13be:	11 f0       	breq	.+4      	; 0x13c4 <lcd12864_SetWhite+0xe4>
			lcd12864_send_cmd(clr_y++);
    13c0:	80 2f       	mov	r24, r16
    13c2:	f0 cf       	rjmp	.-32     	; 0x13a4 <lcd12864_SetWhite+0xc4>
				lcd12864_send_data(0x00);
				nop();nop();
			}
		}
	}
	nop();
    13c4:	00 00       	nop
    13c6:	68 94       	set
    13c8:	cc 24       	eor	r12, r12
    13ca:	c4 f8       	bld	r12, 4
    13cc:	cf 0c       	add	r12, r15
	for(i=0;i<16;i++){
		lcd12864_send_cmd(white_y++);
		lcd12864_send_cmd(white_x);
		for(j=0;j<white_end_x;j++){
    13ce:	00 e0       	ldi	r16, 0x00	; 0
			}
		}
	}
	nop();
	for(i=0;i<16;i++){
		lcd12864_send_cmd(white_y++);
    13d0:	ee 24       	eor	r14, r14
    13d2:	e3 94       	inc	r14
    13d4:	ef 0c       	add	r14, r15
    13d6:	8f 2d       	mov	r24, r15
    13d8:	11 df       	rcall	.-478    	; 0x11fc <lcd12864_send_cmd>
		lcd12864_send_cmd(white_x);
    13da:	8d 2d       	mov	r24, r13
    13dc:	0f df       	rcall	.-482    	; 0x11fc <lcd12864_send_cmd>
		for(j=0;j<white_end_x;j++){
    13de:	dd 23       	and	r29, r29
    13e0:	61 f0       	breq	.+24     	; 0x13fa <lcd12864_SetWhite+0x11a>
    13e2:	c0 2f       	mov	r28, r16
			if(clear ==1)
    13e4:	11 30       	cpi	r17, 0x01	; 1
    13e6:	19 f4       	brne	.+6      	; 0x13ee <lcd12864_SetWhite+0x10e>
				lcd12864_send_data(0x00);		
    13e8:	80 2f       	mov	r24, r16
    13ea:	ee de       	rcall	.-548    	; 0x11c8 <lcd12864_send_data>
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <lcd12864_SetWhite+0x112>
			else
				lcd12864_send_data(0xff);
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	eb de       	rcall	.-554    	; 0x11c8 <lcd12864_send_data>
		nop();
    13f2:	00 00       	nop
	}
	nop();
	for(i=0;i<16;i++){
		lcd12864_send_cmd(white_y++);
		lcd12864_send_cmd(white_x);
		for(j=0;j<white_end_x;j++){
    13f4:	cf 5f       	subi	r28, 0xFF	; 255
    13f6:	cd 13       	cpse	r28, r29
    13f8:	f5 cf       	rjmp	.-22     	; 0x13e4 <lcd12864_SetWhite+0x104>
				nop();nop();
			}
		}
	}
	nop();
	for(i=0;i<16;i++){
    13fa:	ec 14       	cp	r14, r12
    13fc:	11 f0       	breq	.+4      	; 0x1402 <lcd12864_SetWhite+0x122>
		lcd12864_send_cmd(white_y++);
    13fe:	fe 2c       	mov	r15, r14
    1400:	e7 cf       	rjmp	.-50     	; 0x13d0 <lcd12864_SetWhite+0xf0>
				lcd12864_send_data(0xff);
		nop();
		}
		
	}
	lcd12864_send_cmd(0x30);
    1402:	80 e3       	ldi	r24, 0x30	; 48
    1404:	fb de       	rcall	.-522    	; 0x11fc <lcd12864_send_cmd>
			
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	08 95       	ret

00001418 <__subsf3>:
    1418:	50 58       	subi	r21, 0x80	; 128

0000141a <__addsf3>:
    141a:	bb 27       	eor	r27, r27
    141c:	aa 27       	eor	r26, r26
    141e:	0e d0       	rcall	.+28     	; 0x143c <__addsf3x>
    1420:	e5 c0       	rjmp	.+458    	; 0x15ec <__fp_round>
    1422:	d6 d0       	rcall	.+428    	; 0x15d0 <__fp_pscA>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__addsf3+0x18>
    1426:	db d0       	rcall	.+438    	; 0x15de <__fp_pscB>
    1428:	20 f0       	brcs	.+8      	; 0x1432 <__addsf3+0x18>
    142a:	31 f4       	brne	.+12     	; 0x1438 <__addsf3+0x1e>
    142c:	9f 3f       	cpi	r25, 0xFF	; 255
    142e:	11 f4       	brne	.+4      	; 0x1434 <__addsf3+0x1a>
    1430:	1e f4       	brtc	.+6      	; 0x1438 <__addsf3+0x1e>
    1432:	cb c0       	rjmp	.+406    	; 0x15ca <__fp_nan>
    1434:	0e f4       	brtc	.+2      	; 0x1438 <__addsf3+0x1e>
    1436:	e0 95       	com	r30
    1438:	e7 fb       	bst	r30, 7
    143a:	c1 c0       	rjmp	.+386    	; 0x15be <__fp_inf>

0000143c <__addsf3x>:
    143c:	e9 2f       	mov	r30, r25
    143e:	e7 d0       	rcall	.+462    	; 0x160e <__fp_split3>
    1440:	80 f3       	brcs	.-32     	; 0x1422 <__addsf3+0x8>
    1442:	ba 17       	cp	r27, r26
    1444:	62 07       	cpc	r22, r18
    1446:	73 07       	cpc	r23, r19
    1448:	84 07       	cpc	r24, r20
    144a:	95 07       	cpc	r25, r21
    144c:	18 f0       	brcs	.+6      	; 0x1454 <__addsf3x+0x18>
    144e:	71 f4       	brne	.+28     	; 0x146c <__addsf3x+0x30>
    1450:	9e f5       	brtc	.+102    	; 0x14b8 <__addsf3x+0x7c>
    1452:	ff c0       	rjmp	.+510    	; 0x1652 <__fp_zero>
    1454:	0e f4       	brtc	.+2      	; 0x1458 <__addsf3x+0x1c>
    1456:	e0 95       	com	r30
    1458:	0b 2e       	mov	r0, r27
    145a:	ba 2f       	mov	r27, r26
    145c:	a0 2d       	mov	r26, r0
    145e:	0b 01       	movw	r0, r22
    1460:	b9 01       	movw	r22, r18
    1462:	90 01       	movw	r18, r0
    1464:	0c 01       	movw	r0, r24
    1466:	ca 01       	movw	r24, r20
    1468:	a0 01       	movw	r20, r0
    146a:	11 24       	eor	r1, r1
    146c:	ff 27       	eor	r31, r31
    146e:	59 1b       	sub	r21, r25
    1470:	99 f0       	breq	.+38     	; 0x1498 <__addsf3x+0x5c>
    1472:	59 3f       	cpi	r21, 0xF9	; 249
    1474:	50 f4       	brcc	.+20     	; 0x148a <__addsf3x+0x4e>
    1476:	50 3e       	cpi	r21, 0xE0	; 224
    1478:	68 f1       	brcs	.+90     	; 0x14d4 <__addsf3x+0x98>
    147a:	1a 16       	cp	r1, r26
    147c:	f0 40       	sbci	r31, 0x00	; 0
    147e:	a2 2f       	mov	r26, r18
    1480:	23 2f       	mov	r18, r19
    1482:	34 2f       	mov	r19, r20
    1484:	44 27       	eor	r20, r20
    1486:	58 5f       	subi	r21, 0xF8	; 248
    1488:	f3 cf       	rjmp	.-26     	; 0x1470 <__addsf3x+0x34>
    148a:	46 95       	lsr	r20
    148c:	37 95       	ror	r19
    148e:	27 95       	ror	r18
    1490:	a7 95       	ror	r26
    1492:	f0 40       	sbci	r31, 0x00	; 0
    1494:	53 95       	inc	r21
    1496:	c9 f7       	brne	.-14     	; 0x148a <__addsf3x+0x4e>
    1498:	7e f4       	brtc	.+30     	; 0x14b8 <__addsf3x+0x7c>
    149a:	1f 16       	cp	r1, r31
    149c:	ba 0b       	sbc	r27, r26
    149e:	62 0b       	sbc	r22, r18
    14a0:	73 0b       	sbc	r23, r19
    14a2:	84 0b       	sbc	r24, r20
    14a4:	ba f0       	brmi	.+46     	; 0x14d4 <__addsf3x+0x98>
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	a1 f0       	breq	.+40     	; 0x14d2 <__addsf3x+0x96>
    14aa:	ff 0f       	add	r31, r31
    14ac:	bb 1f       	adc	r27, r27
    14ae:	66 1f       	adc	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	c2 f7       	brpl	.-16     	; 0x14a6 <__addsf3x+0x6a>
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <__addsf3x+0x98>
    14b8:	ba 0f       	add	r27, r26
    14ba:	62 1f       	adc	r22, r18
    14bc:	73 1f       	adc	r23, r19
    14be:	84 1f       	adc	r24, r20
    14c0:	48 f4       	brcc	.+18     	; 0x14d4 <__addsf3x+0x98>
    14c2:	87 95       	ror	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	9e 3f       	cpi	r25, 0xFE	; 254
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <__addsf3x+0x96>
    14d0:	b3 cf       	rjmp	.-154    	; 0x1438 <__addsf3+0x1e>
    14d2:	93 95       	inc	r25
    14d4:	88 0f       	add	r24, r24
    14d6:	08 f0       	brcs	.+2      	; 0x14da <__addsf3x+0x9e>
    14d8:	99 27       	eor	r25, r25
    14da:	ee 0f       	add	r30, r30
    14dc:	97 95       	ror	r25
    14de:	87 95       	ror	r24
    14e0:	08 95       	ret

000014e2 <__fixsfsi>:
    14e2:	04 d0       	rcall	.+8      	; 0x14ec <__fixunssfsi>
    14e4:	68 94       	set
    14e6:	b1 11       	cpse	r27, r1
    14e8:	b5 c0       	rjmp	.+362    	; 0x1654 <__fp_szero>
    14ea:	08 95       	ret

000014ec <__fixunssfsi>:
    14ec:	98 d0       	rcall	.+304    	; 0x161e <__fp_splitA>
    14ee:	88 f0       	brcs	.+34     	; 0x1512 <__fixunssfsi+0x26>
    14f0:	9f 57       	subi	r25, 0x7F	; 127
    14f2:	90 f0       	brcs	.+36     	; 0x1518 <__fixunssfsi+0x2c>
    14f4:	b9 2f       	mov	r27, r25
    14f6:	99 27       	eor	r25, r25
    14f8:	b7 51       	subi	r27, 0x17	; 23
    14fa:	a0 f0       	brcs	.+40     	; 0x1524 <__fixunssfsi+0x38>
    14fc:	d1 f0       	breq	.+52     	; 0x1532 <__fixunssfsi+0x46>
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	1a f0       	brmi	.+6      	; 0x150e <__fixunssfsi+0x22>
    1508:	ba 95       	dec	r27
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__fixunssfsi+0x12>
    150c:	12 c0       	rjmp	.+36     	; 0x1532 <__fixunssfsi+0x46>
    150e:	b1 30       	cpi	r27, 0x01	; 1
    1510:	81 f0       	breq	.+32     	; 0x1532 <__fixunssfsi+0x46>
    1512:	9f d0       	rcall	.+318    	; 0x1652 <__fp_zero>
    1514:	b1 e0       	ldi	r27, 0x01	; 1
    1516:	08 95       	ret
    1518:	9c c0       	rjmp	.+312    	; 0x1652 <__fp_zero>
    151a:	67 2f       	mov	r22, r23
    151c:	78 2f       	mov	r23, r24
    151e:	88 27       	eor	r24, r24
    1520:	b8 5f       	subi	r27, 0xF8	; 248
    1522:	39 f0       	breq	.+14     	; 0x1532 <__fixunssfsi+0x46>
    1524:	b9 3f       	cpi	r27, 0xF9	; 249
    1526:	cc f3       	brlt	.-14     	; 0x151a <__fixunssfsi+0x2e>
    1528:	86 95       	lsr	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b3 95       	inc	r27
    1530:	d9 f7       	brne	.-10     	; 0x1528 <__fixunssfsi+0x3c>
    1532:	3e f4       	brtc	.+14     	; 0x1542 <__fixunssfsi+0x56>
    1534:	90 95       	com	r25
    1536:	80 95       	com	r24
    1538:	70 95       	com	r23
    153a:	61 95       	neg	r22
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__floatunsisf>:
    1544:	e8 94       	clt
    1546:	09 c0       	rjmp	.+18     	; 0x155a <__floatsisf+0x12>

00001548 <__floatsisf>:
    1548:	97 fb       	bst	r25, 7
    154a:	3e f4       	brtc	.+14     	; 0x155a <__floatsisf+0x12>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	99 23       	and	r25, r25
    155c:	a9 f0       	breq	.+42     	; 0x1588 <__floatsisf+0x40>
    155e:	f9 2f       	mov	r31, r25
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	bb 27       	eor	r27, r27
    1564:	93 95       	inc	r25
    1566:	f6 95       	lsr	r31
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f1 11       	cpse	r31, r1
    1572:	f8 cf       	rjmp	.-16     	; 0x1564 <__floatsisf+0x1c>
    1574:	fa f4       	brpl	.+62     	; 0x15b4 <__floatsisf+0x6c>
    1576:	bb 0f       	add	r27, r27
    1578:	11 f4       	brne	.+4      	; 0x157e <__floatsisf+0x36>
    157a:	60 ff       	sbrs	r22, 0
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <__floatsisf+0x6c>
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <__floatsisf+0x6c>
    1588:	88 23       	and	r24, r24
    158a:	11 f0       	breq	.+4      	; 0x1590 <__floatsisf+0x48>
    158c:	96 e9       	ldi	r25, 0x96	; 150
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <__floatsisf+0x6a>
    1590:	77 23       	and	r23, r23
    1592:	21 f0       	breq	.+8      	; 0x159c <__floatsisf+0x54>
    1594:	9e e8       	ldi	r25, 0x8E	; 142
    1596:	87 2f       	mov	r24, r23
    1598:	76 2f       	mov	r23, r22
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__floatsisf+0x5e>
    159c:	66 23       	and	r22, r22
    159e:	71 f0       	breq	.+28     	; 0x15bc <__floatsisf+0x74>
    15a0:	96 e8       	ldi	r25, 0x86	; 134
    15a2:	86 2f       	mov	r24, r22
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	2a f0       	brmi	.+10     	; 0x15b4 <__floatsisf+0x6c>
    15aa:	9a 95       	dec	r25
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	da f7       	brpl	.-10     	; 0x15aa <__floatsisf+0x62>
    15b4:	88 0f       	add	r24, r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	97 f9       	bld	r25, 7
    15bc:	08 95       	ret

000015be <__fp_inf>:
    15be:	97 f9       	bld	r25, 7
    15c0:	9f 67       	ori	r25, 0x7F	; 127
    15c2:	80 e8       	ldi	r24, 0x80	; 128
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	08 95       	ret

000015ca <__fp_nan>:
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	80 ec       	ldi	r24, 0xC0	; 192
    15ce:	08 95       	ret

000015d0 <__fp_pscA>:
    15d0:	00 24       	eor	r0, r0
    15d2:	0a 94       	dec	r0
    15d4:	16 16       	cp	r1, r22
    15d6:	17 06       	cpc	r1, r23
    15d8:	18 06       	cpc	r1, r24
    15da:	09 06       	cpc	r0, r25
    15dc:	08 95       	ret

000015de <__fp_pscB>:
    15de:	00 24       	eor	r0, r0
    15e0:	0a 94       	dec	r0
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	14 06       	cpc	r1, r20
    15e8:	05 06       	cpc	r0, r21
    15ea:	08 95       	ret

000015ec <__fp_round>:
    15ec:	09 2e       	mov	r0, r25
    15ee:	03 94       	inc	r0
    15f0:	00 0c       	add	r0, r0
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0xc>
    15f4:	88 23       	and	r24, r24
    15f6:	52 f0       	brmi	.+20     	; 0x160c <__fp_round+0x20>
    15f8:	bb 0f       	add	r27, r27
    15fa:	40 f4       	brcc	.+16     	; 0x160c <__fp_round+0x20>
    15fc:	bf 2b       	or	r27, r31
    15fe:	11 f4       	brne	.+4      	; 0x1604 <__fp_round+0x18>
    1600:	60 ff       	sbrs	r22, 0
    1602:	04 c0       	rjmp	.+8      	; 0x160c <__fp_round+0x20>
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	08 95       	ret

0000160e <__fp_split3>:
    160e:	57 fd       	sbrc	r21, 7
    1610:	90 58       	subi	r25, 0x80	; 128
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	59 f0       	breq	.+22     	; 0x162e <__fp_splitA+0x10>
    1618:	5f 3f       	cpi	r21, 0xFF	; 255
    161a:	71 f0       	breq	.+28     	; 0x1638 <__fp_splitA+0x1a>
    161c:	47 95       	ror	r20

0000161e <__fp_splitA>:
    161e:	88 0f       	add	r24, r24
    1620:	97 fb       	bst	r25, 7
    1622:	99 1f       	adc	r25, r25
    1624:	61 f0       	breq	.+24     	; 0x163e <__fp_splitA+0x20>
    1626:	9f 3f       	cpi	r25, 0xFF	; 255
    1628:	79 f0       	breq	.+30     	; 0x1648 <__fp_splitA+0x2a>
    162a:	87 95       	ror	r24
    162c:	08 95       	ret
    162e:	12 16       	cp	r1, r18
    1630:	13 06       	cpc	r1, r19
    1632:	14 06       	cpc	r1, r20
    1634:	55 1f       	adc	r21, r21
    1636:	f2 cf       	rjmp	.-28     	; 0x161c <__fp_split3+0xe>
    1638:	46 95       	lsr	r20
    163a:	f1 df       	rcall	.-30     	; 0x161e <__fp_splitA>
    163c:	08 c0       	rjmp	.+16     	; 0x164e <__fp_splitA+0x30>
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	99 1f       	adc	r25, r25
    1646:	f1 cf       	rjmp	.-30     	; 0x162a <__fp_splitA+0xc>
    1648:	86 95       	lsr	r24
    164a:	71 05       	cpc	r23, r1
    164c:	61 05       	cpc	r22, r1
    164e:	08 94       	sec
    1650:	08 95       	ret

00001652 <__fp_zero>:
    1652:	e8 94       	clt

00001654 <__fp_szero>:
    1654:	bb 27       	eor	r27, r27
    1656:	66 27       	eor	r22, r22
    1658:	77 27       	eor	r23, r23
    165a:	cb 01       	movw	r24, r22
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__mulsf3>:
    1660:	0b d0       	rcall	.+22     	; 0x1678 <__mulsf3x>
    1662:	c4 cf       	rjmp	.-120    	; 0x15ec <__fp_round>
    1664:	b5 df       	rcall	.-150    	; 0x15d0 <__fp_pscA>
    1666:	28 f0       	brcs	.+10     	; 0x1672 <__mulsf3+0x12>
    1668:	ba df       	rcall	.-140    	; 0x15de <__fp_pscB>
    166a:	18 f0       	brcs	.+6      	; 0x1672 <__mulsf3+0x12>
    166c:	95 23       	and	r25, r21
    166e:	09 f0       	breq	.+2      	; 0x1672 <__mulsf3+0x12>
    1670:	a6 cf       	rjmp	.-180    	; 0x15be <__fp_inf>
    1672:	ab cf       	rjmp	.-170    	; 0x15ca <__fp_nan>
    1674:	11 24       	eor	r1, r1
    1676:	ee cf       	rjmp	.-36     	; 0x1654 <__fp_szero>

00001678 <__mulsf3x>:
    1678:	ca df       	rcall	.-108    	; 0x160e <__fp_split3>
    167a:	a0 f3       	brcs	.-24     	; 0x1664 <__mulsf3+0x4>

0000167c <__mulsf3_pse>:
    167c:	95 9f       	mul	r25, r21
    167e:	d1 f3       	breq	.-12     	; 0x1674 <__mulsf3+0x14>
    1680:	95 0f       	add	r25, r21
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	55 1f       	adc	r21, r21
    1686:	62 9f       	mul	r22, r18
    1688:	f0 01       	movw	r30, r0
    168a:	72 9f       	mul	r23, r18
    168c:	bb 27       	eor	r27, r27
    168e:	f0 0d       	add	r31, r0
    1690:	b1 1d       	adc	r27, r1
    1692:	63 9f       	mul	r22, r19
    1694:	aa 27       	eor	r26, r26
    1696:	f0 0d       	add	r31, r0
    1698:	b1 1d       	adc	r27, r1
    169a:	aa 1f       	adc	r26, r26
    169c:	64 9f       	mul	r22, r20
    169e:	66 27       	eor	r22, r22
    16a0:	b0 0d       	add	r27, r0
    16a2:	a1 1d       	adc	r26, r1
    16a4:	66 1f       	adc	r22, r22
    16a6:	82 9f       	mul	r24, r18
    16a8:	22 27       	eor	r18, r18
    16aa:	b0 0d       	add	r27, r0
    16ac:	a1 1d       	adc	r26, r1
    16ae:	62 1f       	adc	r22, r18
    16b0:	73 9f       	mul	r23, r19
    16b2:	b0 0d       	add	r27, r0
    16b4:	a1 1d       	adc	r26, r1
    16b6:	62 1f       	adc	r22, r18
    16b8:	83 9f       	mul	r24, r19
    16ba:	a0 0d       	add	r26, r0
    16bc:	61 1d       	adc	r22, r1
    16be:	22 1f       	adc	r18, r18
    16c0:	74 9f       	mul	r23, r20
    16c2:	33 27       	eor	r19, r19
    16c4:	a0 0d       	add	r26, r0
    16c6:	61 1d       	adc	r22, r1
    16c8:	23 1f       	adc	r18, r19
    16ca:	84 9f       	mul	r24, r20
    16cc:	60 0d       	add	r22, r0
    16ce:	21 1d       	adc	r18, r1
    16d0:	82 2f       	mov	r24, r18
    16d2:	76 2f       	mov	r23, r22
    16d4:	6a 2f       	mov	r22, r26
    16d6:	11 24       	eor	r1, r1
    16d8:	9f 57       	subi	r25, 0x7F	; 127
    16da:	50 40       	sbci	r21, 0x00	; 0
    16dc:	8a f0       	brmi	.+34     	; 0x1700 <__mulsf3_pse+0x84>
    16de:	e1 f0       	breq	.+56     	; 0x1718 <__mulsf3_pse+0x9c>
    16e0:	88 23       	and	r24, r24
    16e2:	4a f0       	brmi	.+18     	; 0x16f6 <__mulsf3_pse+0x7a>
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	bb 1f       	adc	r27, r27
    16ea:	66 1f       	adc	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	91 50       	subi	r25, 0x01	; 1
    16f2:	50 40       	sbci	r21, 0x00	; 0
    16f4:	a9 f7       	brne	.-22     	; 0x16e0 <__mulsf3_pse+0x64>
    16f6:	9e 3f       	cpi	r25, 0xFE	; 254
    16f8:	51 05       	cpc	r21, r1
    16fa:	70 f0       	brcs	.+28     	; 0x1718 <__mulsf3_pse+0x9c>
    16fc:	60 cf       	rjmp	.-320    	; 0x15be <__fp_inf>
    16fe:	aa cf       	rjmp	.-172    	; 0x1654 <__fp_szero>
    1700:	5f 3f       	cpi	r21, 0xFF	; 255
    1702:	ec f3       	brlt	.-6      	; 0x16fe <__mulsf3_pse+0x82>
    1704:	98 3e       	cpi	r25, 0xE8	; 232
    1706:	dc f3       	brlt	.-10     	; 0x16fe <__mulsf3_pse+0x82>
    1708:	86 95       	lsr	r24
    170a:	77 95       	ror	r23
    170c:	67 95       	ror	r22
    170e:	b7 95       	ror	r27
    1710:	f7 95       	ror	r31
    1712:	e7 95       	ror	r30
    1714:	9f 5f       	subi	r25, 0xFF	; 255
    1716:	c1 f7       	brne	.-16     	; 0x1708 <__mulsf3_pse+0x8c>
    1718:	fe 2b       	or	r31, r30
    171a:	88 0f       	add	r24, r24
    171c:	91 1d       	adc	r25, r1
    171e:	96 95       	lsr	r25
    1720:	87 95       	ror	r24
    1722:	97 f9       	bld	r25, 7
    1724:	08 95       	ret

00001726 <__umulhisi3>:
    1726:	a2 9f       	mul	r26, r18
    1728:	b0 01       	movw	r22, r0
    172a:	b3 9f       	mul	r27, r19
    172c:	c0 01       	movw	r24, r0
    172e:	a3 9f       	mul	r26, r19
    1730:	70 0d       	add	r23, r0
    1732:	81 1d       	adc	r24, r1
    1734:	11 24       	eor	r1, r1
    1736:	91 1d       	adc	r25, r1
    1738:	b2 9f       	mul	r27, r18
    173a:	70 0d       	add	r23, r0
    173c:	81 1d       	adc	r24, r1
    173e:	11 24       	eor	r1, r1
    1740:	91 1d       	adc	r25, r1
    1742:	08 95       	ret

00001744 <__itoa_ncheck>:
    1744:	bb 27       	eor	r27, r27
    1746:	4a 30       	cpi	r20, 0x0A	; 10
    1748:	31 f4       	brne	.+12     	; 0x1756 <__itoa_ncheck+0x12>
    174a:	99 23       	and	r25, r25
    174c:	22 f4       	brpl	.+8      	; 0x1756 <__itoa_ncheck+0x12>
    174e:	bd e2       	ldi	r27, 0x2D	; 45
    1750:	90 95       	com	r25
    1752:	81 95       	neg	r24
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	01 c0       	rjmp	.+2      	; 0x175a <__utoa_common>

00001758 <__utoa_ncheck>:
    1758:	bb 27       	eor	r27, r27

0000175a <__utoa_common>:
    175a:	fb 01       	movw	r30, r22
    175c:	55 27       	eor	r21, r21
    175e:	aa 27       	eor	r26, r26
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	a4 17       	cp	r26, r20
    1768:	10 f0       	brcs	.+4      	; 0x176e <__utoa_common+0x14>
    176a:	a4 1b       	sub	r26, r20
    176c:	83 95       	inc	r24
    176e:	50 51       	subi	r21, 0x10	; 16
    1770:	b9 f7       	brne	.-18     	; 0x1760 <__utoa_common+0x6>
    1772:	a0 5d       	subi	r26, 0xD0	; 208
    1774:	aa 33       	cpi	r26, 0x3A	; 58
    1776:	08 f0       	brcs	.+2      	; 0x177a <__utoa_common+0x20>
    1778:	a9 5d       	subi	r26, 0xD9	; 217
    177a:	a1 93       	st	Z+, r26
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	79 f7       	brne	.-34     	; 0x175e <__utoa_common+0x4>
    1780:	b1 11       	cpse	r27, r1
    1782:	b1 93       	st	Z+, r27
    1784:	11 92       	st	Z+, r1
    1786:	cb 01       	movw	r24, r22
    1788:	00 c0       	rjmp	.+0      	; 0x178a <strrev>

0000178a <strrev>:
    178a:	dc 01       	movw	r26, r24
    178c:	fc 01       	movw	r30, r24
    178e:	67 2f       	mov	r22, r23
    1790:	71 91       	ld	r23, Z+
    1792:	77 23       	and	r23, r23
    1794:	e1 f7       	brne	.-8      	; 0x178e <strrev+0x4>
    1796:	32 97       	sbiw	r30, 0x02	; 2
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <strrev+0x18>
    179a:	7c 91       	ld	r23, X
    179c:	6d 93       	st	X+, r22
    179e:	70 83       	st	Z, r23
    17a0:	62 91       	ld	r22, -Z
    17a2:	ae 17       	cp	r26, r30
    17a4:	bf 07       	cpc	r27, r31
    17a6:	c8 f3       	brcs	.-14     	; 0x179a <strrev+0x10>
    17a8:	08 95       	ret

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>

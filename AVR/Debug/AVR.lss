
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000394  00800100  0000154a  000015de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000154a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800494  00800494  00001972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bce  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7c  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c01  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  00007f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d5b  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d9e  00000000  00000000  00019147  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00019ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001553  00000000  00000000  0001a08d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b6 c6       	rjmp	.+3436   	; 0xdaa <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e4       	ldi	r30, 0x4A	; 74
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 39       	cpi	r26, 0x94	; 148
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a4 e9       	ldi	r26, 0x94	; 148
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3e       	cpi	r26, 0xE8	; 232
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      ca:	82 d7       	rcall	.+3844   	; 0xfd0 <buttons_init>
	lcd12864_init();
      cc:	0e 94 84 08 	call	0x1108	; 0x1108 <lcd12864_init>
	init_IO();
      d0:	b1 d1       	rcall	.+866    	; 0x434 <init_IO>
	emv_ports_init();
      d2:	9d d1       	rcall	.+826    	; 0x40e <emv_ports_init>
	Timer0_Init();
      d4:	45 d6       	rcall	.+3210   	; 0xd60 <Timer0_Init>
	ADC_init();
      d6:	35 d1       	rcall	.+618    	; 0x342 <ADC_init>
	Menu_Init();
      d8:	8d d5       	rcall	.+2842   	; 0xbf4 <Menu_Init>
	
	//lcd12864_set_pos(1,1);
	//lcd12864_write_str("ab");
	
	while(1){
	Menu_Poll();
      da:	9c d5       	rcall	.+2872   	; 0xc14 <Menu_Poll>
      dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x10>

000000de <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <Act_Update_Main+0xa>
      e8:	00 d0       	rcall	.+0      	; 0xea <Act_Update_Main+0xc>
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = PD_Mode;
      ee:	10 91 1a 03 	lds	r17, 0x031A
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 91 9c 04 	lds	r25, 0x049C
      f8:	91 11       	cpse	r25, r1
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	80 93 9c 04 	sts	0x049C, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	itoa((int)ADC_read(PRESSURE),pdstr,10);
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	38 d1       	rcall	.+624    	; 0x374 <ADC_read>
     104:	0e 94 3f 09 	call	0x127e	; 0x127e <__fixsfsi>
     108:	dc 01       	movw	r26, r24
     10a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     10c:	4a e0       	ldi	r20, 0x0A	; 10
     10e:	be 01       	movw	r22, r28
     110:	6f 5f       	subi	r22, 0xFF	; 255
     112:	7f 4f       	sbci	r23, 0xFF	; 255
     114:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__itoa_ncheck>
	lcd12864_set_pos(0,1);
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	0e 94 9d 08 	call	0x113a	; 0x113a <lcd12864_set_pos>
	switch(mode){
     120:	12 30       	cpi	r17, 0x02	; 2
     122:	49 f0       	breq	.+18     	; 0x136 <Act_Update_Main+0x58>
     124:	13 30       	cpi	r17, 0x03	; 3
     126:	61 f0       	breq	.+24     	; 0x140 <Act_Update_Main+0x62>
     128:	11 30       	cpi	r17, 0x01	; 1
     12a:	79 f4       	brne	.+30     	; 0x14a <Act_Update_Main+0x6c>
		case 1:
		lcd12864_write_str(MODE1);
     12c:	8c e1       	ldi	r24, 0x1C	; 28
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	0e 94 c6 08 	call	0x118c	; 0x118c <lcd12864_write_str>
		break;
     134:	0e c0       	rjmp	.+28     	; 0x152 <Act_Update_Main+0x74>
		case 2:
		lcd12864_write_str(MODE2);
     136:	80 e2       	ldi	r24, 0x20	; 32
     138:	93 e0       	ldi	r25, 0x03	; 3
     13a:	0e 94 c6 08 	call	0x118c	; 0x118c <lcd12864_write_str>
		break;
     13e:	09 c0       	rjmp	.+18     	; 0x152 <Act_Update_Main+0x74>
		case 3:
		lcd12864_write_str(MODE3);
     140:	84 e2       	ldi	r24, 0x24	; 36
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	0e 94 c6 08 	call	0x118c	; 0x118c <lcd12864_write_str>
		break;
     148:	04 c0       	rjmp	.+8      	; 0x152 <Act_Update_Main+0x74>
		default:
		lcd12864_write_str(MODE0);
     14a:	88 e2       	ldi	r24, 0x28	; 40
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	0e 94 c6 08 	call	0x118c	; 0x118c <lcd12864_write_str>
		break;
	}
	lcd12864_set_pos(4,1);
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	f1 d7       	rcall	.+4066   	; 0x113a <lcd12864_set_pos>
	if(Blowing_State){
     158:	80 91 9d 04 	lds	r24, 0x049D
     15c:	88 23       	and	r24, r24
     15e:	59 f0       	breq	.+22     	; 0x176 <Act_Update_Main+0x98>
		if(blink_factor)
     160:	80 91 9c 04 	lds	r24, 0x049C
     164:	88 23       	and	r24, r24
     166:	21 f0       	breq	.+8      	; 0x170 <Act_Update_Main+0x92>
		lcd12864_write_char(0x0f);
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	0e 94 b6 08 	call	0x116c	; 0x116c <lcd12864_write_char>
     16e:	0c c0       	rjmp	.+24     	; 0x188 <Act_Update_Main+0xaa>
		else
		lcd12864_write_char(0x09);
     170:	89 e0       	ldi	r24, 0x09	; 9
     172:	fc d7       	rcall	.+4088   	; 0x116c <lcd12864_write_char>
     174:	09 c0       	rjmp	.+18     	; 0x188 <Act_Update_Main+0xaa>
	}
	else{
		if(blink_factor)
     176:	80 91 9c 04 	lds	r24, 0x049C
     17a:	88 23       	and	r24, r24
     17c:	19 f0       	breq	.+6      	; 0x184 <Act_Update_Main+0xa6>
		lcd12864_write_char(0x07);
     17e:	87 e0       	ldi	r24, 0x07	; 7
     180:	f5 d7       	rcall	.+4074   	; 0x116c <lcd12864_write_char>
     182:	02 c0       	rjmp	.+4      	; 0x188 <Act_Update_Main+0xaa>
		else
		lcd12864_write_char(0x09);
     184:	89 e0       	ldi	r24, 0x09	; 9
     186:	f2 d7       	rcall	.+4068   	; 0x116c <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	87 e0       	ldi	r24, 0x07	; 7
     18c:	d6 d7       	rcall	.+4012   	; 0x113a <lcd12864_set_pos>
	if(Alarm_State){
     18e:	80 91 9e 04 	lds	r24, 0x049E
     192:	88 23       	and	r24, r24
     194:	51 f0       	breq	.+20     	; 0x1aa <Act_Update_Main+0xcc>
		if(blink_factor)
     196:	80 91 9c 04 	lds	r24, 0x049C
     19a:	88 23       	and	r24, r24
     19c:	19 f0       	breq	.+6      	; 0x1a4 <Act_Update_Main+0xc6>
			lcd12864_write_char(0x21);
     19e:	81 e2       	ldi	r24, 0x21	; 33
     1a0:	e5 d7       	rcall	.+4042   	; 0x116c <lcd12864_write_char>
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <Act_Update_Main+0xd0>
		else
			lcd12864_write_char(0x00);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	e2 d7       	rcall	.+4036   	; 0x116c <lcd12864_write_char>
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Act_Update_Main+0xd0>
	}
	else{
		lcd12864_write_char(0x02);
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	df d7       	rcall	.+4030   	; 0x116c <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     1ae:	62 e0       	ldi	r22, 0x02	; 2
     1b0:	85 e0       	ldi	r24, 0x05	; 5
     1b2:	c3 d7       	rcall	.+3974   	; 0x113a <lcd12864_set_pos>
	lcd12864_write_str(pdstr);
     1b4:	ce 01       	movw	r24, r28
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	e9 d7       	rcall	.+4050   	; 0x118c <lcd12864_write_str>
	lcd12864_set_pos(3,3);
     1ba:	63 e0       	ldi	r22, 0x03	; 3
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	bd d7       	rcall	.+3962   	; 0x113a <lcd12864_set_pos>
	s++;
     1c0:	80 91 9a 04 	lds	r24, 0x049A
     1c4:	90 91 9b 04 	lds	r25, 0x049B
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	90 93 9b 04 	sts	0x049B, r25
     1ce:	80 93 9a 04 	sts	0x049A, r24
	if(s==60){
     1d2:	cc 97       	sbiw	r24, 0x3c	; 60
     1d4:	69 f4       	brne	.+26     	; 0x1f0 <Act_Update_Main+0x112>
		m++; s=0;
     1d6:	80 91 98 04 	lds	r24, 0x0498
     1da:	90 91 99 04 	lds	r25, 0x0499
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	90 93 99 04 	sts	0x0499, r25
     1e4:	80 93 98 04 	sts	0x0498, r24
     1e8:	10 92 9b 04 	sts	0x049B, r1
     1ec:	10 92 9a 04 	sts	0x049A, r1
	}
	if(m==60){
     1f0:	80 91 98 04 	lds	r24, 0x0498
     1f4:	90 91 99 04 	lds	r25, 0x0499
     1f8:	cc 97       	sbiw	r24, 0x3c	; 60
     1fa:	69 f4       	brne	.+26     	; 0x216 <Act_Update_Main+0x138>
		hours++; m=0;
     1fc:	80 91 96 04 	lds	r24, 0x0496
     200:	90 91 97 04 	lds	r25, 0x0497
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	90 93 97 04 	sts	0x0497, r25
     20a:	80 93 96 04 	sts	0x0496, r24
     20e:	10 92 99 04 	sts	0x0499, r1
     212:	10 92 98 04 	sts	0x0498, r1
	}
	if(hours == 24){
     216:	40 91 96 04 	lds	r20, 0x0496
     21a:	50 91 97 04 	lds	r21, 0x0497
     21e:	48 31       	cpi	r20, 0x18	; 24
     220:	51 05       	cpc	r21, r1
     222:	49 f4       	brne	.+18     	; 0x236 <Act_Update_Main+0x158>
		days++;
     224:	80 91 94 04 	lds	r24, 0x0494
     228:	90 91 95 04 	lds	r25, 0x0495
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	90 93 95 04 	sts	0x0495, r25
     232:	80 93 94 04 	sts	0x0494, r24
	}
	time[7]=m%10+'0';
     236:	00 91 98 04 	lds	r16, 0x0498
     23a:	10 91 99 04 	lds	r17, 0x0499
     23e:	ec e2       	ldi	r30, 0x2C	; 44
     240:	f3 e0       	ldi	r31, 0x03	; 3
     242:	98 01       	movw	r18, r16
     244:	ad ec       	ldi	r26, 0xCD	; 205
     246:	bc ec       	ldi	r27, 0xCC	; 204
     248:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     24c:	96 95       	lsr	r25
     24e:	87 95       	ror	r24
     250:	96 95       	lsr	r25
     252:	87 95       	ror	r24
     254:	96 95       	lsr	r25
     256:	87 95       	ror	r24
     258:	9c 01       	movw	r18, r24
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	82 0f       	add	r24, r18
     26c:	93 1f       	adc	r25, r19
     26e:	98 01       	movw	r18, r16
     270:	28 1b       	sub	r18, r24
     272:	39 0b       	sbc	r19, r25
     274:	c9 01       	movw	r24, r18
     276:	80 5d       	subi	r24, 0xD0	; 208
     278:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     27a:	98 01       	movw	r18, r16
     27c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	96 95       	lsr	r25
     286:	87 95       	ror	r24
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	80 5d       	subi	r24, 0xD0	; 208
     28e:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     290:	9a 01       	movw	r18, r20
     292:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     296:	96 95       	lsr	r25
     298:	87 95       	ror	r24
     29a:	96 95       	lsr	r25
     29c:	87 95       	ror	r24
     29e:	96 95       	lsr	r25
     2a0:	87 95       	ror	r24
     2a2:	9c 01       	movw	r18, r24
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	9a 01       	movw	r18, r20
     2ba:	28 1b       	sub	r18, r24
     2bc:	39 0b       	sbc	r19, r25
     2be:	c9 01       	movw	r24, r18
     2c0:	80 5d       	subi	r24, 0xD0	; 208
     2c2:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     2c4:	9a 01       	movw	r18, r20
     2c6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     2ca:	96 95       	lsr	r25
     2cc:	87 95       	ror	r24
     2ce:	96 95       	lsr	r25
     2d0:	87 95       	ror	r24
     2d2:	96 95       	lsr	r25
     2d4:	87 95       	ror	r24
     2d6:	80 5d       	subi	r24, 0xD0	; 208
     2d8:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     2da:	40 91 94 04 	lds	r20, 0x0494
     2de:	50 91 95 04 	lds	r21, 0x0495
     2e2:	9a 01       	movw	r18, r20
     2e4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     2e8:	96 95       	lsr	r25
     2ea:	87 95       	ror	r24
     2ec:	96 95       	lsr	r25
     2ee:	87 95       	ror	r24
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	9c 01       	movw	r18, r24
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	82 0f       	add	r24, r18
     308:	93 1f       	adc	r25, r19
     30a:	9a 01       	movw	r18, r20
     30c:	28 1b       	sub	r18, r24
     30e:	39 0b       	sbc	r19, r25
     310:	c9 01       	movw	r24, r18
     312:	80 5d       	subi	r24, 0xD0	; 208
     314:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     316:	9a 01       	movw	r18, r20
     318:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__umulhisi3>
     31c:	96 95       	lsr	r25
     31e:	87 95       	ror	r24
     320:	96 95       	lsr	r25
     322:	87 95       	ror	r24
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	80 5d       	subi	r24, 0xD0	; 208
     32a:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     32c:	cf 01       	movw	r24, r30
     32e:	2e d7       	rcall	.+3676   	; 0x118c <lcd12864_write_str>
	


     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     342:	e1 e6       	ldi	r30, 0x61	; 97
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	8c 7f       	andi	r24, 0xFC	; 252
     34a:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     34c:	86 e8       	ldi	r24, 0x86	; 134
     34e:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     350:	80 e1       	ldi	r24, 0x10	; 16
     352:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     354:	35 98       	cbi	0x06, 5	; 6
     356:	08 95       	ret

00000358 <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     358:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     35a:	34 9b       	sbis	0x06, 4	; 6
     35c:	fe cf       	rjmp	.-4      	; 0x35a <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35e:	86 ef       	ldi	r24, 0xF6	; 246
     360:	8a 95       	dec	r24
     362:	f1 f7       	brne	.-4      	; 0x360 <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     364:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     366:	85 b1       	in	r24, 0x05	; 5
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	98 2f       	mov	r25, r24
     36c:	88 27       	eor	r24, r24

	return result;	
}
     36e:	82 0f       	add	r24, r18
     370:	91 1d       	adc	r25, r1
     372:	08 95       	ret

00000374 <ADC_read>:

float ADC_read(uint8_t target){
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     37e:	83 30       	cpi	r24, 0x03	; 3
     380:	89 f0       	breq	.+34     	; 0x3a4 <ADC_read+0x30>
     382:	28 f4       	brcc	.+10     	; 0x38e <ADC_read+0x1a>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	41 f0       	breq	.+16     	; 0x398 <ADC_read+0x24>
     388:	82 30       	cpi	r24, 0x02	; 2
     38a:	49 f0       	breq	.+18     	; 0x39e <ADC_read+0x2a>
     38c:	35 c0       	rjmp	.+106    	; 0x3f8 <ADC_read+0x84>
     38e:	84 30       	cpi	r24, 0x04	; 4
     390:	61 f0       	breq	.+24     	; 0x3aa <ADC_read+0x36>
     392:	85 30       	cpi	r24, 0x05	; 5
     394:	69 f0       	breq	.+26     	; 0x3b0 <ADC_read+0x3c>
     396:	30 c0       	rjmp	.+96     	; 0x3f8 <ADC_read+0x84>
		case PRESSURE:
			ADMUX = 0x10;
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	87 b9       	out	0x07, r24	; 7
			break;
     39c:	2d c0       	rjmp	.+90     	; 0x3f8 <ADC_read+0x84>
		case EMV:
			ADMUX = 0b00000100;
     39e:	84 e0       	ldi	r24, 0x04	; 4
     3a0:	87 b9       	out	0x07, r24	; 7
			break;
     3a2:	2a c0       	rjmp	.+84     	; 0x3f8 <ADC_read+0x84>
		case VIN:
			ADMUX = 0b00000101;
     3a4:	85 e0       	ldi	r24, 0x05	; 5
     3a6:	87 b9       	out	0x07, r24	; 7
			break;
     3a8:	27 c0       	rjmp	.+78     	; 0x3f8 <ADC_read+0x84>
		case VPP:
			ADMUX = 0b00000110;
     3aa:	86 e0       	ldi	r24, 0x06	; 6
     3ac:	87 b9       	out	0x07, r24	; 7
			break;
     3ae:	24 c0       	rjmp	.+72     	; 0x3f8 <ADC_read+0x84>
		case VCC:
			ADMUX = 0b00000111;
     3b0:	87 e0       	ldi	r24, 0x07	; 7
     3b2:	87 b9       	out	0x07, r24	; 7
			break;
     3b4:	21 c0       	rjmp	.+66     	; 0x3f8 <ADC_read+0x84>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     3b6:	d0 df       	rcall	.-96     	; 0x358 <ADC_readonce>
     3b8:	bc 01       	movw	r22, r24
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	90 d7       	rcall	.+3872   	; 0x12e0 <__floatunsisf>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	f6 d6       	rcall	.+3564   	; 0x11b6 <__addsf3>
     3ca:	6b 01       	movw	r12, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     3d0:	91 f7       	brne	.-28     	; 0x3b6 <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	5e e3       	ldi	r21, 0x3E	; 62
     3da:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__mulsf3>
	buff/=1024;
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e8       	ldi	r20, 0x80	; 128
     3e4:	5a e3       	ldi	r21, 0x3A	; 58
     3e6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__mulsf3>
	buff*=SCALE;
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	4a e7       	ldi	r20, 0x7A	; 122
     3f0:	54 e4       	ldi	r21, 0x44	; 68
     3f2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__mulsf3>
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <ADC_read+0x8e>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     3f8:	c8 e0       	ldi	r28, 0x08	; 8
     3fa:	c1 2c       	mov	r12, r1
     3fc:	d1 2c       	mov	r13, r1
     3fe:	76 01       	movw	r14, r12
     400:	da cf       	rjmp	.-76     	; 0x3b6 <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     402:	cf 91       	pop	r28
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	08 95       	ret

0000040e <emv_ports_init>:
uint16_t emv_control_word = 0xff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
     40e:	87 b3       	in	r24, 0x17	; 23
     410:	80 6e       	ori	r24, 0xE0	; 224
     412:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
     414:	e4 e6       	ldi	r30, 0x64	; 100
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	88 61       	ori	r24, 0x18	; 24
     41c:	80 83       	st	Z, r24
	SCK_LOW;
     41e:	e5 e6       	ldi	r30, 0x65	; 101
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	87 7f       	andi	r24, 0xF7	; 247
     426:	80 83       	st	Z, r24
	RCK_LOW;
     428:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
     42a:	80 81       	ld	r24, Z
     42c:	80 61       	ori	r24, 0x10	; 16
     42e:	80 83       	st	Z, r24
	OEn_LOW;
     430:	c6 98       	cbi	0x18, 6	; 24
     432:	08 95       	ret

00000434 <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
     434:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
     436:	e1 e6       	ldi	r30, 0x61	; 97
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
	DDRG |=_BV(0);
     440:	e4 e6       	ldi	r30, 0x64	; 100
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	81 60       	ori	r24, 0x01	; 1
     448:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
     44a:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
     44c:	e2 e6       	ldi	r30, 0x62	; 98
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	88 60       	ori	r24, 0x08	; 8
     454:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
     456:	e5 e6       	ldi	r30, 0x65	; 101
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	8e 7f       	andi	r24, 0xFE	; 254
     45e:	80 83       	st	Z, r24
     460:	08 95       	ret

00000462 <DrawScreen>:
uint8_t Get_Workmode(void){
	return PD_Mode;
}

	void DrawScreen(void){
		lcd12864_clear();
     462:	67 d6       	rcall	.+3278   	; 0x1132 <lcd12864_clear>
		lcd12864_set_pos(0,1);
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	68 d6       	rcall	.+3280   	; 0x113a <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     46a:	80 91 a6 04 	lds	r24, 0x04A6
     46e:	90 91 a7 04 	lds	r25, 0x04A7
     472:	8c d6       	rcall	.+3352   	; 0x118c <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     474:	62 e0       	ldi	r22, 0x02	; 2
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	60 d6       	rcall	.+3264   	; 0x113a <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     47a:	80 91 a8 04 	lds	r24, 0x04A8
     47e:	90 91 a9 04 	lds	r25, 0x04A9
     482:	84 d6       	rcall	.+3336   	; 0x118c <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     484:	63 e0       	ldi	r22, 0x03	; 3
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	58 d6       	rcall	.+3248   	; 0x113a <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     48a:	80 91 aa 04 	lds	r24, 0x04AA
     48e:	90 91 ab 04 	lds	r25, 0x04AB
     492:	7c d6       	rcall	.+3320   	; 0x118c <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	50 d6       	rcall	.+3232   	; 0x113a <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     49a:	80 91 ac 04 	lds	r24, 0x04AC
     49e:	90 91 ad 04 	lds	r25, 0x04AD
     4a2:	74 d6       	rcall	.+3304   	; 0x118c <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
     4a4:	80 91 ae 04 	lds	r24, 0x04AE
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	51 f0       	breq	.+20     	; 0x4c0 <DrawScreen+0x5e>
     4ac:	83 30       	cpi	r24, 0x03	; 3
     4ae:	71 f0       	breq	.+28     	; 0x4cc <DrawScreen+0x6a>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	89 f4       	brne	.+34     	; 0x4d6 <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	40 d6       	rcall	.+3200   	; 0x113a <lcd12864_set_pos>
				lcd12864_write_char('*');
     4ba:	8a e2       	ldi	r24, 0x2A	; 42
     4bc:	57 c6       	rjmp	.+3246   	; 0x116c <lcd12864_write_char>
				break;
     4be:	08 95       	ret
			case 2:
				lcd12864_set_pos(0,2);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	3a d6       	rcall	.+3188   	; 0x113a <lcd12864_set_pos>
				lcd12864_write_char('*');
     4c6:	8a e2       	ldi	r24, 0x2A	; 42
     4c8:	51 c6       	rjmp	.+3234   	; 0x116c <lcd12864_write_char>
				break;
     4ca:	08 95       	ret
			case 3:
				lcd12864_set_pos(0,3);
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	34 d6       	rcall	.+3176   	; 0x113a <lcd12864_set_pos>
				lcd12864_write_char('*');
     4d2:	8a e2       	ldi	r24, 0x2A	; 42
     4d4:	4b c6       	rjmp	.+3222   	; 0x116c <lcd12864_write_char>
     4d6:	08 95       	ret

000004d8 <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     4d8:	20 91 00 01 	lds	r18, 0x0100
     4dc:	30 91 01 01 	lds	r19, 0x0101
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	59 f0       	breq	.+22     	; 0x4fc <FindState+0x24>
     4e6:	e8 e1       	ldi	r30, 0x18	; 24
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	b9 01       	movw	r22, r18
     4f0:	40 81       	ld	r20, Z
     4f2:	51 81       	ldd	r21, Z+1	; 0x01
     4f4:	48 17       	cp	r20, r24
     4f6:	59 07       	cpc	r21, r25
     4f8:	91 f4       	brne	.+36     	; 0x51e <FindState+0x46>
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <FindState+0x28>
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     500:	cb 01       	movw	r24, r22
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	68 0f       	add	r22, r24
     508:	79 1f       	adc	r23, r25
     50a:	cb 01       	movw	r24, r22
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	80 50       	subi	r24, 0x00	; 0
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
     51c:	08 95       	ret
     51e:	2f 5f       	subi	r18, 0xFF	; 255
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	78 96       	adiw	r30, 0x18	; 24
		}
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     524:	24 31       	cpi	r18, 0x14	; 20
     526:	31 05       	cpc	r19, r1
     528:	11 f7       	brne	.-60     	; 0x4ee <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     52e:	08 95       	ret

00000530 <State_Update>:
		State_Update();
		DrawScreen();
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     530:	e0 91 a1 04 	lds	r30, 0x04A1
     534:	f0 91 a2 04 	lds	r31, 0x04A2
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	20 e2       	ldi	r18, 0x20	; 32
     540:	92 07       	cpc	r25, r18
     542:	09 f4       	brne	.+2      	; 0x546 <State_Update+0x16>
     544:	a4 c1       	rjmp	.+840    	; 0x88e <State_Update+0x35e>
     546:	78 f5       	brcc	.+94     	; 0x5a6 <State_Update+0x76>
     548:	84 30       	cpi	r24, 0x04	; 4
     54a:	20 e1       	ldi	r18, 0x10	; 16
     54c:	92 07       	cpc	r25, r18
     54e:	09 f4       	brne	.+2      	; 0x552 <State_Update+0x22>
     550:	ea c0       	rjmp	.+468    	; 0x726 <State_Update+0x1f6>
     552:	a0 f4       	brcc	.+40     	; 0x57c <State_Update+0x4c>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	20 e1       	ldi	r18, 0x10	; 16
     558:	92 07       	cpc	r25, r18
     55a:	09 f4       	brne	.+2      	; 0x55e <State_Update+0x2e>
     55c:	78 c0       	rjmp	.+240    	; 0x64e <State_Update+0x11e>
     55e:	20 f4       	brcc	.+8      	; 0x568 <State_Update+0x38>
     560:	89 2b       	or	r24, r25
     562:	09 f4       	brne	.+2      	; 0x566 <State_Update+0x36>
     564:	51 c0       	rjmp	.+162    	; 0x608 <State_Update+0xd8>
     566:	08 95       	ret
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	20 e1       	ldi	r18, 0x10	; 16
     56c:	92 07       	cpc	r25, r18
     56e:	09 f4       	brne	.+2      	; 0x572 <State_Update+0x42>
     570:	92 c0       	rjmp	.+292    	; 0x696 <State_Update+0x166>
     572:	83 30       	cpi	r24, 0x03	; 3
     574:	90 41       	sbci	r25, 0x10	; 16
     576:	09 f4       	brne	.+2      	; 0x57a <State_Update+0x4a>
     578:	b2 c0       	rjmp	.+356    	; 0x6de <State_Update+0x1ae>
     57a:	08 95       	ret
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	20 e2       	ldi	r18, 0x20	; 32
     580:	92 07       	cpc	r25, r18
     582:	09 f4       	brne	.+2      	; 0x586 <State_Update+0x56>
     584:	18 c1       	rjmp	.+560    	; 0x7b6 <State_Update+0x286>
     586:	28 f4       	brcc	.+10     	; 0x592 <State_Update+0x62>
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	90 41       	sbci	r25, 0x10	; 16
     58c:	09 f4       	brne	.+2      	; 0x590 <State_Update+0x60>
     58e:	ef c0       	rjmp	.+478    	; 0x76e <State_Update+0x23e>
     590:	08 95       	ret
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	20 e2       	ldi	r18, 0x20	; 32
     596:	92 07       	cpc	r25, r18
     598:	09 f4       	brne	.+2      	; 0x59c <State_Update+0x6c>
     59a:	31 c1       	rjmp	.+610    	; 0x7fe <State_Update+0x2ce>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	90 42       	sbci	r25, 0x20	; 32
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <State_Update+0x74>
     5a2:	51 c1       	rjmp	.+674    	; 0x846 <State_Update+0x316>
     5a4:	08 95       	ret
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	20 e3       	ldi	r18, 0x30	; 48
     5aa:	92 07       	cpc	r25, r18
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <State_Update+0x80>
     5ae:	23 c2       	rjmp	.+1094   	; 0x9f6 <State_Update+0x4c6>
     5b0:	88 f4       	brcc	.+34     	; 0x5d4 <State_Update+0xa4>
     5b2:	86 30       	cpi	r24, 0x06	; 6
     5b4:	20 e2       	ldi	r18, 0x20	; 32
     5b6:	92 07       	cpc	r25, r18
     5b8:	09 f4       	brne	.+2      	; 0x5bc <State_Update+0x8c>
     5ba:	b1 c1       	rjmp	.+866    	; 0x91e <State_Update+0x3ee>
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <State_Update+0x90>
     5be:	8b c1       	rjmp	.+790    	; 0x8d6 <State_Update+0x3a6>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	20 e3       	ldi	r18, 0x30	; 48
     5c4:	92 07       	cpc	r25, r18
     5c6:	09 f4       	brne	.+2      	; 0x5ca <State_Update+0x9a>
     5c8:	ce c1       	rjmp	.+924    	; 0x966 <State_Update+0x436>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	90 43       	sbci	r25, 0x30	; 48
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <State_Update+0xa2>
     5d0:	ee c1       	rjmp	.+988    	; 0x9ae <State_Update+0x47e>
     5d2:	08 95       	ret
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	21 e3       	ldi	r18, 0x31	; 49
     5d8:	92 07       	cpc	r25, r18
     5da:	09 f4       	brne	.+2      	; 0x5de <State_Update+0xae>
     5dc:	78 c2       	rjmp	.+1264   	; 0xace <State_Update+0x59e>
     5de:	50 f4       	brcc	.+20     	; 0x5f4 <State_Update+0xc4>
     5e0:	84 30       	cpi	r24, 0x04	; 4
     5e2:	20 e3       	ldi	r18, 0x30	; 48
     5e4:	92 07       	cpc	r25, r18
     5e6:	09 f4       	brne	.+2      	; 0x5ea <State_Update+0xba>
     5e8:	2a c2       	rjmp	.+1108   	; 0xa3e <State_Update+0x50e>
     5ea:	85 30       	cpi	r24, 0x05	; 5
     5ec:	90 43       	sbci	r25, 0x30	; 48
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <State_Update+0xc2>
     5f0:	4a c2       	rjmp	.+1172   	; 0xa86 <State_Update+0x556>
     5f2:	08 95       	ret
     5f4:	82 30       	cpi	r24, 0x02	; 2
     5f6:	21 e3       	ldi	r18, 0x31	; 49
     5f8:	92 07       	cpc	r25, r18
     5fa:	09 f4       	brne	.+2      	; 0x5fe <State_Update+0xce>
     5fc:	99 c2       	rjmp	.+1330   	; 0xb30 <State_Update+0x600>
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	91 43       	sbci	r25, 0x31	; 49
     602:	09 f4       	brne	.+2      	; 0x606 <State_Update+0xd6>
     604:	c6 c2       	rjmp	.+1420   	; 0xb92 <State_Update+0x662>
     606:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     608:	80 91 e0 02 	lds	r24, 0x02E0
     60c:	90 91 e1 02 	lds	r25, 0x02E1
     610:	90 93 a7 04 	sts	0x04A7, r25
     614:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     618:	80 91 e2 02 	lds	r24, 0x02E2
     61c:	90 91 e3 02 	lds	r25, 0x02E3
     620:	90 93 a9 04 	sts	0x04A9, r25
     624:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     628:	80 91 e4 02 	lds	r24, 0x02E4
     62c:	90 91 e5 02 	lds	r25, 0x02E5
     630:	90 93 ab 04 	sts	0x04AB, r25
     634:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     638:	80 91 e6 02 	lds	r24, 0x02E6
     63c:	90 91 e7 02 	lds	r25, 0x02E7
     640:	90 93 ad 04 	sts	0x04AD, r25
     644:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 0;
     648:	10 92 ae 04 	sts	0x04AE, r1
				break;
     64c:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     64e:	80 91 ea 02 	lds	r24, 0x02EA
     652:	90 91 eb 02 	lds	r25, 0x02EB
     656:	90 93 a7 04 	sts	0x04A7, r25
     65a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     65e:	80 91 ec 02 	lds	r24, 0x02EC
     662:	90 91 ed 02 	lds	r25, 0x02ED
     666:	90 93 a9 04 	sts	0x04A9, r25
     66a:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     66e:	80 91 ee 02 	lds	r24, 0x02EE
     672:	90 91 ef 02 	lds	r25, 0x02EF
     676:	90 93 ab 04 	sts	0x04AB, r25
     67a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     67e:	80 91 18 03 	lds	r24, 0x0318
     682:	90 91 19 03 	lds	r25, 0x0319
     686:	90 93 ad 04 	sts	0x04AD, r25
     68a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 ae 04 	sts	0x04AE, r24
				break;
     694:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     696:	80 91 ea 02 	lds	r24, 0x02EA
     69a:	90 91 eb 02 	lds	r25, 0x02EB
     69e:	90 93 a7 04 	sts	0x04A7, r25
     6a2:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     6a6:	80 91 ec 02 	lds	r24, 0x02EC
     6aa:	90 91 ed 02 	lds	r25, 0x02ED
     6ae:	90 93 a9 04 	sts	0x04A9, r25
     6b2:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     6b6:	80 91 ee 02 	lds	r24, 0x02EE
     6ba:	90 91 ef 02 	lds	r25, 0x02EF
     6be:	90 93 ab 04 	sts	0x04AB, r25
     6c2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     6c6:	80 91 18 03 	lds	r24, 0x0318
     6ca:	90 91 19 03 	lds	r25, 0x0319
     6ce:	90 93 ad 04 	sts	0x04AD, r25
     6d2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	80 93 ae 04 	sts	0x04AE, r24
				break;
     6dc:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     6de:	80 91 ea 02 	lds	r24, 0x02EA
     6e2:	90 91 eb 02 	lds	r25, 0x02EB
     6e6:	90 93 a7 04 	sts	0x04A7, r25
     6ea:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     6ee:	80 91 ec 02 	lds	r24, 0x02EC
     6f2:	90 91 ed 02 	lds	r25, 0x02ED
     6f6:	90 93 a9 04 	sts	0x04A9, r25
     6fa:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     6fe:	80 91 ee 02 	lds	r24, 0x02EE
     702:	90 91 ef 02 	lds	r25, 0x02EF
     706:	90 93 ab 04 	sts	0x04AB, r25
     70a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     70e:	80 91 18 03 	lds	r24, 0x0318
     712:	90 91 19 03 	lds	r25, 0x0319
     716:	90 93 ad 04 	sts	0x04AD, r25
     71a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 3;
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	80 93 ae 04 	sts	0x04AE, r24
				break;
     724:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     726:	80 91 f0 02 	lds	r24, 0x02F0
     72a:	90 91 f1 02 	lds	r25, 0x02F1
     72e:	90 93 a7 04 	sts	0x04A7, r25
     732:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     736:	80 91 f2 02 	lds	r24, 0x02F2
     73a:	90 91 f3 02 	lds	r25, 0x02F3
     73e:	90 93 a9 04 	sts	0x04A9, r25
     742:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     746:	80 91 e0 02 	lds	r24, 0x02E0
     74a:	90 91 e1 02 	lds	r25, 0x02E1
     74e:	90 93 ab 04 	sts	0x04AB, r25
     752:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     756:	80 91 18 03 	lds	r24, 0x0318
     75a:	90 91 19 03 	lds	r25, 0x0319
     75e:	90 93 ad 04 	sts	0x04AD, r25
     762:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 ae 04 	sts	0x04AE, r24
				break;
     76c:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     76e:	80 91 f0 02 	lds	r24, 0x02F0
     772:	90 91 f1 02 	lds	r25, 0x02F1
     776:	90 93 a7 04 	sts	0x04A7, r25
     77a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     77e:	80 91 f2 02 	lds	r24, 0x02F2
     782:	90 91 f3 02 	lds	r25, 0x02F3
     786:	90 93 a9 04 	sts	0x04A9, r25
     78a:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     78e:	80 91 e0 02 	lds	r24, 0x02E0
     792:	90 91 e1 02 	lds	r25, 0x02E1
     796:	90 93 ab 04 	sts	0x04AB, r25
     79a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     79e:	80 91 18 03 	lds	r24, 0x0318
     7a2:	90 91 19 03 	lds	r25, 0x0319
     7a6:	90 93 ad 04 	sts	0x04AD, r25
     7aa:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	80 93 ae 04 	sts	0x04AE, r24
				break;
     7b4:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     7b6:	80 91 f4 02 	lds	r24, 0x02F4
     7ba:	90 91 f5 02 	lds	r25, 0x02F5
     7be:	90 93 a7 04 	sts	0x04A7, r25
     7c2:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     7c6:	80 91 f6 02 	lds	r24, 0x02F6
     7ca:	90 91 f7 02 	lds	r25, 0x02F7
     7ce:	90 93 a9 04 	sts	0x04A9, r25
     7d2:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     7d6:	80 91 f8 02 	lds	r24, 0x02F8
     7da:	90 91 f9 02 	lds	r25, 0x02F9
     7de:	90 93 ab 04 	sts	0x04AB, r25
     7e2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7e6:	80 91 18 03 	lds	r24, 0x0318
     7ea:	90 91 19 03 	lds	r25, 0x0319
     7ee:	90 93 ad 04 	sts	0x04AD, r25
     7f2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 ae 04 	sts	0x04AE, r24
				break;
     7fc:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     7fe:	80 91 f4 02 	lds	r24, 0x02F4
     802:	90 91 f5 02 	lds	r25, 0x02F5
     806:	90 93 a7 04 	sts	0x04A7, r25
     80a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     80e:	80 91 f6 02 	lds	r24, 0x02F6
     812:	90 91 f7 02 	lds	r25, 0x02F7
     816:	90 93 a9 04 	sts	0x04A9, r25
     81a:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     81e:	80 91 f8 02 	lds	r24, 0x02F8
     822:	90 91 f9 02 	lds	r25, 0x02F9
     826:	90 93 ab 04 	sts	0x04AB, r25
     82a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     82e:	80 91 18 03 	lds	r24, 0x0318
     832:	90 91 19 03 	lds	r25, 0x0319
     836:	90 93 ad 04 	sts	0x04AD, r25
     83a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	80 93 ae 04 	sts	0x04AE, r24
				break;
     844:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     846:	80 91 f4 02 	lds	r24, 0x02F4
     84a:	90 91 f5 02 	lds	r25, 0x02F5
     84e:	90 93 a7 04 	sts	0x04A7, r25
     852:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     856:	80 91 f6 02 	lds	r24, 0x02F6
     85a:	90 91 f7 02 	lds	r25, 0x02F7
     85e:	90 93 a9 04 	sts	0x04A9, r25
     862:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     866:	80 91 f8 02 	lds	r24, 0x02F8
     86a:	90 91 f9 02 	lds	r25, 0x02F9
     86e:	90 93 ab 04 	sts	0x04AB, r25
     872:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     876:	80 91 18 03 	lds	r24, 0x0318
     87a:	90 91 19 03 	lds	r25, 0x0319
     87e:	90 93 ad 04 	sts	0x04AD, r25
     882:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 3;
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	80 93 ae 04 	sts	0x04AE, r24
				break;
     88c:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     88e:	80 91 fa 02 	lds	r24, 0x02FA
     892:	90 91 fb 02 	lds	r25, 0x02FB
     896:	90 93 a7 04 	sts	0x04A7, r25
     89a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     89e:	80 91 fc 02 	lds	r24, 0x02FC
     8a2:	90 91 fd 02 	lds	r25, 0x02FD
     8a6:	90 93 a9 04 	sts	0x04A9, r25
     8aa:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     8ae:	80 91 fe 02 	lds	r24, 0x02FE
     8b2:	90 91 ff 02 	lds	r25, 0x02FF
     8b6:	90 93 ab 04 	sts	0x04AB, r25
     8ba:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8be:	80 91 18 03 	lds	r24, 0x0318
     8c2:	90 91 19 03 	lds	r25, 0x0319
     8c6:	90 93 ad 04 	sts	0x04AD, r25
     8ca:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 ae 04 	sts	0x04AE, r24
				break;
     8d4:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     8d6:	80 91 fa 02 	lds	r24, 0x02FA
     8da:	90 91 fb 02 	lds	r25, 0x02FB
     8de:	90 93 a7 04 	sts	0x04A7, r25
     8e2:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     8e6:	80 91 fc 02 	lds	r24, 0x02FC
     8ea:	90 91 fd 02 	lds	r25, 0x02FD
     8ee:	90 93 a9 04 	sts	0x04A9, r25
     8f2:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     8f6:	80 91 fe 02 	lds	r24, 0x02FE
     8fa:	90 91 ff 02 	lds	r25, 0x02FF
     8fe:	90 93 ab 04 	sts	0x04AB, r25
     902:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     906:	80 91 18 03 	lds	r24, 0x0318
     90a:	90 91 19 03 	lds	r25, 0x0319
     90e:	90 93 ad 04 	sts	0x04AD, r25
     912:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	80 93 ae 04 	sts	0x04AE, r24
				break;
     91c:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     91e:	80 91 fa 02 	lds	r24, 0x02FA
     922:	90 91 fb 02 	lds	r25, 0x02FB
     926:	90 93 a7 04 	sts	0x04A7, r25
     92a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     92e:	80 91 fc 02 	lds	r24, 0x02FC
     932:	90 91 fd 02 	lds	r25, 0x02FD
     936:	90 93 a9 04 	sts	0x04A9, r25
     93a:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     93e:	80 91 fe 02 	lds	r24, 0x02FE
     942:	90 91 ff 02 	lds	r25, 0x02FF
     946:	90 93 ab 04 	sts	0x04AB, r25
     94a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     94e:	80 91 18 03 	lds	r24, 0x0318
     952:	90 91 19 03 	lds	r25, 0x0319
     956:	90 93 ad 04 	sts	0x04AD, r25
     95a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 3;
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	80 93 ae 04 	sts	0x04AE, r24
				break;
     964:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     966:	80 91 00 03 	lds	r24, 0x0300
     96a:	90 91 01 03 	lds	r25, 0x0301
     96e:	90 93 a7 04 	sts	0x04A7, r25
     972:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     976:	80 91 02 03 	lds	r24, 0x0302
     97a:	90 91 03 03 	lds	r25, 0x0303
     97e:	90 93 a9 04 	sts	0x04A9, r25
     982:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     986:	80 91 04 03 	lds	r24, 0x0304
     98a:	90 91 05 03 	lds	r25, 0x0305
     98e:	90 93 ab 04 	sts	0x04AB, r25
     992:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     996:	80 91 18 03 	lds	r24, 0x0318
     99a:	90 91 19 03 	lds	r25, 0x0319
     99e:	90 93 ad 04 	sts	0x04AD, r25
     9a2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1; 
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 ae 04 	sts	0x04AE, r24
				break;
     9ac:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     9ae:	80 91 00 03 	lds	r24, 0x0300
     9b2:	90 91 01 03 	lds	r25, 0x0301
     9b6:	90 93 a7 04 	sts	0x04A7, r25
     9ba:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     9be:	80 91 02 03 	lds	r24, 0x0302
     9c2:	90 91 03 03 	lds	r25, 0x0303
     9c6:	90 93 a9 04 	sts	0x04A9, r25
     9ca:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     9ce:	80 91 04 03 	lds	r24, 0x0304
     9d2:	90 91 05 03 	lds	r25, 0x0305
     9d6:	90 93 ab 04 	sts	0x04AB, r25
     9da:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9de:	80 91 18 03 	lds	r24, 0x0318
     9e2:	90 91 19 03 	lds	r25, 0x0319
     9e6:	90 93 ad 04 	sts	0x04AD, r25
     9ea:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	80 93 ae 04 	sts	0x04AE, r24
				break;
     9f4:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     9f6:	80 91 00 03 	lds	r24, 0x0300
     9fa:	90 91 01 03 	lds	r25, 0x0301
     9fe:	90 93 a7 04 	sts	0x04A7, r25
     a02:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a06:	80 91 02 03 	lds	r24, 0x0302
     a0a:	90 91 03 03 	lds	r25, 0x0303
     a0e:	90 93 a9 04 	sts	0x04A9, r25
     a12:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a16:	80 91 04 03 	lds	r24, 0x0304
     a1a:	90 91 05 03 	lds	r25, 0x0305
     a1e:	90 93 ab 04 	sts	0x04AB, r25
     a22:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a26:	80 91 18 03 	lds	r24, 0x0318
     a2a:	90 91 19 03 	lds	r25, 0x0319
     a2e:	90 93 ad 04 	sts	0x04AD, r25
     a32:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 3;
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	80 93 ae 04 	sts	0x04AE, r24
				break;
     a3c:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     a3e:	80 91 06 03 	lds	r24, 0x0306
     a42:	90 91 07 03 	lds	r25, 0x0307
     a46:	90 93 a7 04 	sts	0x04A7, r25
     a4a:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     a4e:	80 91 08 03 	lds	r24, 0x0308
     a52:	90 91 09 03 	lds	r25, 0x0309
     a56:	90 93 a9 04 	sts	0x04A9, r25
     a5a:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     a5e:	80 91 e0 02 	lds	r24, 0x02E0
     a62:	90 91 e1 02 	lds	r25, 0x02E1
     a66:	90 93 ab 04 	sts	0x04AB, r25
     a6a:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a6e:	80 91 18 03 	lds	r24, 0x0318
     a72:	90 91 19 03 	lds	r25, 0x0319
     a76:	90 93 ad 04 	sts	0x04AD, r25
     a7a:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 ae 04 	sts	0x04AE, r24
				break;
     a84:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     a86:	80 91 06 03 	lds	r24, 0x0306
     a8a:	90 91 07 03 	lds	r25, 0x0307
     a8e:	90 93 a7 04 	sts	0x04A7, r25
     a92:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     a96:	80 91 08 03 	lds	r24, 0x0308
     a9a:	90 91 09 03 	lds	r25, 0x0309
     a9e:	90 93 a9 04 	sts	0x04A9, r25
     aa2:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     aa6:	80 91 e0 02 	lds	r24, 0x02E0
     aaa:	90 91 e1 02 	lds	r25, 0x02E1
     aae:	90 93 ab 04 	sts	0x04AB, r25
     ab2:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ab6:	80 91 18 03 	lds	r24, 0x0318
     aba:	90 91 19 03 	lds	r25, 0x0319
     abe:	90 93 ad 04 	sts	0x04AD, r25
     ac2:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index = 2;
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	80 93 ae 04 	sts	0x04AE, r24
				break;
     acc:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
     ace:	80 91 1a 03 	lds	r24, 0x031A
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	49 f4       	brne	.+18     	; 0xae8 <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
     ad6:	80 91 0a 03 	lds	r24, 0x030A
     ada:	90 91 0b 03 	lds	r25, 0x030B
     ade:	90 93 a7 04 	sts	0x04A7, r25
     ae2:	80 93 a6 04 	sts	0x04A6, r24
     ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
     ae8:	80 91 0c 03 	lds	r24, 0x030C
     aec:	90 91 0d 03 	lds	r25, 0x030D
     af0:	90 93 a7 04 	sts	0x04A7, r25
     af4:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     af8:	80 91 0e 03 	lds	r24, 0x030E
     afc:	90 91 0f 03 	lds	r25, 0x030F
     b00:	90 93 a9 04 	sts	0x04A9, r25
     b04:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     b08:	80 91 10 03 	lds	r24, 0x0310
     b0c:	90 91 11 03 	lds	r25, 0x0311
     b10:	90 93 ab 04 	sts	0x04AB, r25
     b14:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b18:	80 91 18 03 	lds	r24, 0x0318
     b1c:	90 91 19 03 	lds	r25, 0x0319
     b20:	90 93 ad 04 	sts	0x04AD, r25
     b24:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index=1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 ae 04 	sts	0x04AE, r24
				break;
     b2e:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
     b30:	80 91 1a 03 	lds	r24, 0x031A
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	49 f4       	brne	.+18     	; 0xb4a <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     b38:	80 91 0a 03 	lds	r24, 0x030A
     b3c:	90 91 0b 03 	lds	r25, 0x030B
     b40:	90 93 a7 04 	sts	0x04A7, r25
     b44:	80 93 a6 04 	sts	0x04A6, r24
     b48:	08 c0       	rjmp	.+16     	; 0xb5a <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     b4a:	80 91 0c 03 	lds	r24, 0x030C
     b4e:	90 91 0d 03 	lds	r25, 0x030D
     b52:	90 93 a7 04 	sts	0x04A7, r25
     b56:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     b5a:	80 91 0e 03 	lds	r24, 0x030E
     b5e:	90 91 0f 03 	lds	r25, 0x030F
     b62:	90 93 a9 04 	sts	0x04A9, r25
     b66:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     b6a:	80 91 10 03 	lds	r24, 0x0310
     b6e:	90 91 11 03 	lds	r25, 0x0311
     b72:	90 93 ab 04 	sts	0x04AB, r25
     b76:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b7a:	80 91 18 03 	lds	r24, 0x0318
     b7e:	90 91 19 03 	lds	r25, 0x0319
     b82:	90 93 ad 04 	sts	0x04AD, r25
     b86:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index=2;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	80 93 ae 04 	sts	0x04AE, r24
				break;
     b90:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
     b92:	80 91 1a 03 	lds	r24, 0x031A
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	49 f4       	brne	.+18     	; 0xbac <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     b9a:	80 91 0a 03 	lds	r24, 0x030A
     b9e:	90 91 0b 03 	lds	r25, 0x030B
     ba2:	90 93 a7 04 	sts	0x04A7, r25
     ba6:	80 93 a6 04 	sts	0x04A6, r24
     baa:	08 c0       	rjmp	.+16     	; 0xbbc <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     bac:	80 91 0c 03 	lds	r24, 0x030C
     bb0:	90 91 0d 03 	lds	r25, 0x030D
     bb4:	90 93 a7 04 	sts	0x04A7, r25
     bb8:	80 93 a6 04 	sts	0x04A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     bbc:	80 91 0e 03 	lds	r24, 0x030E
     bc0:	90 91 0f 03 	lds	r25, 0x030F
     bc4:	90 93 a9 04 	sts	0x04A9, r25
     bc8:	80 93 a8 04 	sts	0x04A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     bcc:	80 91 10 03 	lds	r24, 0x0310
     bd0:	90 91 11 03 	lds	r25, 0x0311
     bd4:	90 93 ab 04 	sts	0x04AB, r25
     bd8:	80 93 aa 04 	sts	0x04AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     bdc:	80 91 18 03 	lds	r24, 0x0318
     be0:	90 91 19 03 	lds	r25, 0x0319
     be4:	90 93 ad 04 	sts	0x04AD, r25
     be8:	80 93 ac 04 	sts	0x04AC, r24
				SYS_Screen_Buffer.white_index=3;
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	80 93 ae 04 	sts	0x04AE, r24
     bf2:	08 95       	ret

00000bf4 <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	6f dc       	rcall	.-1826   	; 0x4d8 <FindState>
     bfa:	90 93 a2 04 	sts	0x04A2, r25
     bfe:	80 93 a1 04 	sts	0x04A1, r24
	
		//Current_TimerFunc();
		Timer0_RegisterCallbackFunction(SYS_State->Timer_Action,1000);
     c02:	68 ee       	ldi	r22, 0xE8	; 232
     c04:	73 e0       	ldi	r23, 0x03	; 3
     c06:	fc 01       	movw	r30, r24
     c08:	86 89       	ldd	r24, Z+22	; 0x16
     c0a:	97 89       	ldd	r25, Z+23	; 0x17
     c0c:	39 d1       	rcall	.+626    	; 0xe80 <Timer0_RegisterCallbackFunction>
		State_Update();
     c0e:	90 dc       	rcall	.-1760   	; 0x530 <State_Update>
		DrawScreen();
     c10:	28 cc       	rjmp	.-1968   	; 0x462 <DrawScreen>
     c12:	08 95       	ret

00000c14 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
     c14:	45 d2       	rcall	.+1162   	; 0x10a0 <getkey>
		switch(key){
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	71 f0       	breq	.+28     	; 0xc36 <Menu_Poll+0x22>
     c1a:	38 f4       	brcc	.+14     	; 0xc2a <Menu_Poll+0x16>
     c1c:	88 23       	and	r24, r24
     c1e:	09 f4       	brne	.+2      	; 0xc22 <Menu_Poll+0xe>
     c20:	3a c0       	rjmp	.+116    	; 0xc96 <Menu_Poll+0x82>
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	09 f4       	brne	.+2      	; 0xc28 <Menu_Poll+0x14>
     c26:	4f c0       	rjmp	.+158    	; 0xcc6 <Menu_Poll+0xb2>
     c28:	7e c0       	rjmp	.+252    	; 0xd26 <Menu_Poll+0x112>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	e1 f0       	breq	.+56     	; 0xc66 <Menu_Poll+0x52>
     c2e:	84 30       	cpi	r24, 0x04	; 4
     c30:	09 f4       	brne	.+2      	; 0xc34 <Menu_Poll+0x20>
     c32:	61 c0       	rjmp	.+194    	; 0xcf6 <Menu_Poll+0xe2>
     c34:	78 c0       	rjmp	.+240    	; 0xd26 <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
     c36:	e0 91 a1 04 	lds	r30, 0x04A1
     c3a:	f0 91 a2 04 	lds	r31, 0x04A2
     c3e:	02 88       	ldd	r0, Z+18	; 0x12
     c40:	f3 89       	ldd	r31, Z+19	; 0x13
     c42:	e0 2d       	mov	r30, r0
     c44:	30 97       	sbiw	r30, 0x00	; 0
     c46:	09 f0       	breq	.+2      	; 0xc4a <Menu_Poll+0x36>
					SYS_State->Right_Action();
     c48:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
     c4a:	e0 91 a1 04 	lds	r30, 0x04A1
     c4e:	f0 91 a2 04 	lds	r31, 0x04A2
     c52:	80 85       	ldd	r24, Z+8	; 0x08
     c54:	91 85       	ldd	r25, Z+9	; 0x09
     c56:	40 dc       	rcall	.-1920   	; 0x4d8 <FindState>
     c58:	90 93 a2 04 	sts	0x04A2, r25
     c5c:	80 93 a1 04 	sts	0x04A1, r24
				State_Update();
     c60:	67 dc       	rcall	.-1842   	; 0x530 <State_Update>
				DrawScreen();
     c62:	ff db       	rcall	.-2050   	; 0x462 <DrawScreen>
				break;
     c64:	62 c0       	rjmp	.+196    	; 0xd2a <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
     c66:	e0 91 a1 04 	lds	r30, 0x04A1
     c6a:	f0 91 a2 04 	lds	r31, 0x04A2
     c6e:	00 88       	ldd	r0, Z+16	; 0x10
     c70:	f1 89       	ldd	r31, Z+17	; 0x11
     c72:	e0 2d       	mov	r30, r0
     c74:	30 97       	sbiw	r30, 0x00	; 0
     c76:	09 f0       	breq	.+2      	; 0xc7a <Menu_Poll+0x66>
					SYS_State->Left_Action();
     c78:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
     c7a:	e0 91 a1 04 	lds	r30, 0x04A1
     c7e:	f0 91 a2 04 	lds	r31, 0x04A2
     c82:	86 81       	ldd	r24, Z+6	; 0x06
     c84:	97 81       	ldd	r25, Z+7	; 0x07
     c86:	28 dc       	rcall	.-1968   	; 0x4d8 <FindState>
     c88:	90 93 a2 04 	sts	0x04A2, r25
     c8c:	80 93 a1 04 	sts	0x04A1, r24
				State_Update();
     c90:	4f dc       	rcall	.-1890   	; 0x530 <State_Update>
				DrawScreen();
     c92:	e7 db       	rcall	.-2098   	; 0x462 <DrawScreen>
				break;
     c94:	4a c0       	rjmp	.+148    	; 0xd2a <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
     c96:	e0 91 a1 04 	lds	r30, 0x04A1
     c9a:	f0 91 a2 04 	lds	r31, 0x04A2
     c9e:	04 84       	ldd	r0, Z+12	; 0x0c
     ca0:	f5 85       	ldd	r31, Z+13	; 0x0d
     ca2:	e0 2d       	mov	r30, r0
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	09 f0       	breq	.+2      	; 0xcaa <Menu_Poll+0x96>
				SYS_State->Up_Action();
     ca8:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
     caa:	e0 91 a1 04 	lds	r30, 0x04A1
     cae:	f0 91 a2 04 	lds	r31, 0x04A2
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	10 dc       	rcall	.-2016   	; 0x4d8 <FindState>
     cb8:	90 93 a2 04 	sts	0x04A2, r25
     cbc:	80 93 a1 04 	sts	0x04A1, r24
				State_Update();
     cc0:	37 dc       	rcall	.-1938   	; 0x530 <State_Update>
				DrawScreen();
     cc2:	cf db       	rcall	.-2146   	; 0x462 <DrawScreen>
				break;
     cc4:	32 c0       	rjmp	.+100    	; 0xd2a <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
     cc6:	e0 91 a1 04 	lds	r30, 0x04A1
     cca:	f0 91 a2 04 	lds	r31, 0x04A2
     cce:	06 84       	ldd	r0, Z+14	; 0x0e
     cd0:	f7 85       	ldd	r31, Z+15	; 0x0f
     cd2:	e0 2d       	mov	r30, r0
     cd4:	30 97       	sbiw	r30, 0x00	; 0
     cd6:	09 f0       	breq	.+2      	; 0xcda <Menu_Poll+0xc6>
				SYS_State->Down_Action();
     cd8:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
     cda:	e0 91 a1 04 	lds	r30, 0x04A1
     cde:	f0 91 a2 04 	lds	r31, 0x04A2
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	95 81       	ldd	r25, Z+5	; 0x05
     ce6:	f8 db       	rcall	.-2064   	; 0x4d8 <FindState>
     ce8:	90 93 a2 04 	sts	0x04A2, r25
     cec:	80 93 a1 04 	sts	0x04A1, r24
				State_Update();
     cf0:	1f dc       	rcall	.-1986   	; 0x530 <State_Update>
				DrawScreen();
     cf2:	b7 db       	rcall	.-2194   	; 0x462 <DrawScreen>
				break;
     cf4:	1a c0       	rjmp	.+52     	; 0xd2a <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
     cf6:	e0 91 a1 04 	lds	r30, 0x04A1
     cfa:	f0 91 a2 04 	lds	r31, 0x04A2
     cfe:	04 88       	ldd	r0, Z+20	; 0x14
     d00:	f5 89       	ldd	r31, Z+21	; 0x15
     d02:	e0 2d       	mov	r30, r0
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	09 f0       	breq	.+2      	; 0xd0a <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
     d08:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
     d0a:	e0 91 a1 04 	lds	r30, 0x04A1
     d0e:	f0 91 a2 04 	lds	r31, 0x04A2
     d12:	82 85       	ldd	r24, Z+10	; 0x0a
     d14:	93 85       	ldd	r25, Z+11	; 0x0b
     d16:	e0 db       	rcall	.-2112   	; 0x4d8 <FindState>
     d18:	90 93 a2 04 	sts	0x04A2, r25
     d1c:	80 93 a1 04 	sts	0x04A1, r24
				State_Update();
     d20:	07 dc       	rcall	.-2034   	; 0x530 <State_Update>
				DrawScreen();
     d22:	9f db       	rcall	.-2242   	; 0x462 <DrawScreen>
				break;
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	d1 f0       	breq	.+52     	; 0xd5e <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
     d2a:	80 91 9f 04 	lds	r24, 0x049F
     d2e:	90 91 a0 04 	lds	r25, 0x04A0
     d32:	fb d0       	rcall	.+502    	; 0xf2a <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
     d34:	e0 91 a1 04 	lds	r30, 0x04A1
     d38:	f0 91 a2 04 	lds	r31, 0x04A2
     d3c:	06 88       	ldd	r0, Z+22	; 0x16
     d3e:	f7 89       	ldd	r31, Z+23	; 0x17
     d40:	e0 2d       	mov	r30, r0
     d42:	f0 93 a0 04 	sts	0x04A0, r31
     d46:	e0 93 9f 04 	sts	0x049F, r30
			if(Current_TimerFunc != NULL){
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	41 f0       	breq	.+16     	; 0xd5e <Menu_Poll+0x14a>
			Current_TimerFunc();
     d4e:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
     d50:	68 ee       	ldi	r22, 0xE8	; 232
     d52:	73 e0       	ldi	r23, 0x03	; 3
     d54:	80 91 9f 04 	lds	r24, 0x049F
     d58:	90 91 a0 04 	lds	r25, 0x04A0
     d5c:	91 c0       	rjmp	.+290    	; 0xe80 <Timer0_RegisterCallbackFunction>
     d5e:	08 95       	ret

00000d60 <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
     d60:	e7 eb       	ldi	r30, 0xB7	; 183
     d62:	f4 e0       	ldi	r31, 0x04	; 4
     d64:	87 ee       	ldi	r24, 0xE7	; 231
     d66:	94 e0       	ldi	r25, 0x04	; 4
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
     d68:	11 82       	std	Z+1, r1	; 0x01
     d6a:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
     d6c:	13 82       	std	Z+3, r1	; 0x03
     d6e:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
     d70:	15 82       	std	Z+5, r1	; 0x05
     d72:	14 82       	std	Z+4, r1	; 0x04
     d74:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
     d76:	e8 17       	cp	r30, r24
     d78:	f9 07       	cpc	r31, r25
     d7a:	b1 f7       	brne	.-20     	; 0xd68 <Timer0_Init+0x8>
     d7c:	ef ea       	ldi	r30, 0xAF	; 175
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	87 eb       	ldi	r24, 0xB7	; 183
     d82:	94 e0       	ldi	r25, 0x04	; 4
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     d88:	e8 17       	cp	r30, r24
     d8a:	f9 07       	cpc	r31, r25
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
     d8e:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
     d90:	83 b7       	in	r24, 0x33	; 51
     d92:	87 60       	ori	r24, 0x07	; 7
     d94:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
     d96:	88 eb       	ldi	r24, 0xB8	; 184
     d98:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
     d9a:	86 b7       	in	r24, 0x36	; 54
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
     da0:	87 b7       	in	r24, 0x37	; 55
     da2:	82 60       	ori	r24, 0x02	; 2
     da4:	87 bf       	out	0x37, r24	; 55
			sei();
     da6:	78 94       	sei
     da8:	08 95       	ret

00000daa <__vector_15>:
}


ISR(TIMER0_COMP_vect){
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	0b b6       	in	r0, 0x3b	; 59
     db6:	0f 92       	push	r0
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
     dd8:	88 eb       	ldi	r24, 0xB8	; 184
     dda:	82 bf       	out	0x32, r24	; 50
     ddc:	c7 eb       	ldi	r28, 0xB7	; 183
     dde:	d4 e0       	ldi	r29, 0x04	; 4
     de0:	07 ee       	ldi	r16, 0xE7	; 231
     de2:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
     de4:	88 81       	ld	r24, Y
     de6:	99 81       	ldd	r25, Y+1	; 0x01
     de8:	89 2b       	or	r24, r25
     dea:	81 f0       	breq	.+32     	; 0xe0c <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	2a 81       	ldd	r18, Y+2	; 0x02
     df2:	3b 81       	ldd	r19, Y+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	31 f4       	brne	.+12     	; 0xe06 <__vector_15+0x5c>
				EventList[i].counter = 0;
     dfa:	1d 82       	std	Y+5, r1	; 0x05
     dfc:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
     dfe:	e8 81       	ld	r30, Y
     e00:	f9 81       	ldd	r31, Y+1	; 0x01
     e02:	09 95       	icall
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	9d 83       	std	Y+5, r25	; 0x05
     e0a:	8c 83       	std	Y+4, r24	; 0x04
     e0c:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
     e0e:	c0 17       	cp	r28, r16
     e10:	d1 07       	cpc	r29, r17
     e12:	41 f7       	brne	.-48     	; 0xde4 <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
     e14:	80 91 a3 04 	lds	r24, 0x04A3
     e18:	90 91 a4 04 	lds	r25, 0x04A4
     e1c:	9c 01       	movw	r18, r24
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	30 93 a4 04 	sts	0x04A4, r19
     e26:	20 93 a3 04 	sts	0x04A3, r18
     e2a:	84 36       	cpi	r24, 0x64	; 100
     e2c:	91 05       	cpc	r25, r1
     e2e:	89 f4       	brne	.+34     	; 0xe52 <__vector_15+0xa8>
     e30:	ef ea       	ldi	r30, 0xAF	; 175
     e32:	f4 e0       	ldi	r31, 0x04	; 4
     e34:	87 eb       	ldi	r24, 0xB7	; 183
     e36:	94 e0       	ldi	r25, 0x04	; 4
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
     e38:	20 81       	ld	r18, Z
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	2e 3f       	cpi	r18, 0xFE	; 254
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <__vector_15+0x98>
				CountDownTimers[i]--;
     e40:	20 83       	st	Z, r18
     e42:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
     e44:	e8 17       	cp	r30, r24
     e46:	f9 07       	cpc	r31, r25
     e48:	b9 f7       	brne	.-18     	; 0xe38 <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
     e4a:	10 92 a4 04 	sts	0x04A4, r1
     e4e:	10 92 a3 04 	sts	0x04A3, r1
	}
	
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	0f 90       	pop	r0
     e74:	0b be       	out	0x3b, r0	; 59
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
     e84:	6a 30       	cpi	r22, 0x0A	; 10
     e86:	71 05       	cpc	r23, r1
     e88:	10 f4       	brcc	.+4      	; 0xe8e <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
     e8a:	6a e0       	ldi	r22, 0x0A	; 10
     e8c:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     e8e:	c0 91 b7 04 	lds	r28, 0x04B7
     e92:	d0 91 b8 04 	lds	r29, 0x04B8
     e96:	c8 17       	cp	r28, r24
     e98:	d9 07       	cpc	r29, r25
     e9a:	09 f4       	brne	.+2      	; 0xe9e <Timer0_RegisterCallbackFunction+0x1e>
     e9c:	3e c0       	rjmp	.+124    	; 0xf1a <Timer0_RegisterCallbackFunction+0x9a>
     e9e:	a7 ee       	ldi	r26, 0xE7	; 231
     ea0:	b4 e0       	ldi	r27, 0x04	; 4
     ea2:	ed eb       	ldi	r30, 0xBD	; 189
     ea4:	f4 e0       	ldi	r31, 0x04	; 4
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	48 17       	cp	r20, r24
     eac:	59 07       	cpc	r21, r25
     eae:	b9 f1       	breq	.+110    	; 0xf1e <Timer0_RegisterCallbackFunction+0x9e>
     eb0:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     eb2:	ea 17       	cp	r30, r26
     eb4:	fb 07       	cpc	r31, r27
     eb6:	b9 f7       	brne	.-18     	; 0xea6 <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
     eb8:	cd 2b       	or	r28, r29
     eba:	51 f0       	breq	.+20     	; 0xed0 <Timer0_RegisterCallbackFunction+0x50>
     ebc:	ed eb       	ldi	r30, 0xBD	; 189
     ebe:	f4 e0       	ldi	r31, 0x04	; 4
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	ea 01       	movw	r28, r20
     ec6:	a0 81       	ld	r26, Z
     ec8:	b1 81       	ldd	r27, Z+1	; 0x01
     eca:	ab 2b       	or	r26, r27
     ecc:	f9 f4       	brne	.+62     	; 0xf0c <Timer0_RegisterCallbackFunction+0x8c>
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <Timer0_RegisterCallbackFunction+0x54>
     ed0:	c0 e0       	ldi	r28, 0x00	; 0
     ed2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
     ed4:	ae 01       	movw	r20, r28
     ed6:	44 0f       	add	r20, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	fa 01       	movw	r30, r20
     edc:	ec 0f       	add	r30, r28
     ede:	fd 1f       	adc	r31, r29
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	e9 54       	subi	r30, 0x49	; 73
     ee6:	fb 4f       	sbci	r31, 0xFB	; 251
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
     eec:	9b 01       	movw	r18, r22
     eee:	ad ec       	ldi	r26, 0xCD	; 205
     ef0:	bc ec       	ldi	r27, 0xCC	; 204
     ef2:	e7 d2       	rcall	.+1486   	; 0x14c2 <__umulhisi3>
     ef4:	96 95       	lsr	r25
     ef6:	87 95       	ror	r24
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	93 83       	std	Z+3, r25	; 0x03
     f02:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
     f04:	15 82       	std	Z+5, r1	; 0x05
     f06:	14 82       	std	Z+4, r1	; 0x04
			return true;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0c c0       	rjmp	.+24     	; 0xf24 <Timer0_RegisterCallbackFunction+0xa4>
     f0c:	4f 5f       	subi	r20, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     f12:	48 30       	cpi	r20, 0x08	; 8
     f14:	51 05       	cpc	r21, r1
     f16:	b1 f6       	brne	.-84     	; 0xec4 <Timer0_RegisterCallbackFunction+0x44>
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	03 c0       	rjmp	.+6      	; 0xf24 <Timer0_RegisterCallbackFunction+0xa4>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
     f22:	80 e0       	ldi	r24, 0x00	; 0
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     f2a:	20 91 b7 04 	lds	r18, 0x04B7
     f2e:	30 91 b8 04 	lds	r19, 0x04B8
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	59 f0       	breq	.+22     	; 0xf4e <Timer0_RemoveCallbackFunction+0x24>
     f38:	ed eb       	ldi	r30, 0xBD	; 189
     f3a:	f4 e0       	ldi	r31, 0x04	; 4
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	40 81       	ld	r20, Z
     f44:	51 81       	ldd	r21, Z+1	; 0x01
     f46:	48 17       	cp	r20, r24
     f48:	59 07       	cpc	r21, r25
     f4a:	e1 f4       	brne	.+56     	; 0xf84 <Timer0_RemoveCallbackFunction+0x5a>
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <Timer0_RemoveCallbackFunction+0x28>
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
     f52:	cb 01       	movw	r24, r22
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	fc 01       	movw	r30, r24
     f5a:	e6 0f       	add	r30, r22
     f5c:	f7 1f       	adc	r31, r23
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	e9 54       	subi	r30, 0x49	; 73
     f64:	fb 4f       	sbci	r31, 0xFB	; 251
     f66:	11 82       	std	Z+1, r1	; 0x01
     f68:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
     f6a:	13 82       	std	Z+3, r1	; 0x03
     f6c:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
     f6e:	68 0f       	add	r22, r24
     f70:	79 1f       	adc	r23, r25
     f72:	fb 01       	movw	r30, r22
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e9 54       	subi	r30, 0x49	; 73
     f7a:	fb 4f       	sbci	r31, 0xFB	; 251
     f7c:	15 82       	std	Z+5, r1	; 0x05
     f7e:	14 82       	std	Z+4, r1	; 0x04
			return true;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	08 95       	ret
     f84:	2f 5f       	subi	r18, 0xFF	; 255
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     f8a:	28 30       	cpi	r18, 0x08	; 8
     f8c:	31 05       	cpc	r19, r1
     f8e:	c1 f6       	brne	.-80     	; 0xf40 <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
     f90:	80 e0       	ldi	r24, 0x00	; 0
}
     f92:	08 95       	ret

00000f94 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
     f94:	80 91 af 04 	lds	r24, 0x04AF
     f98:	8f 3f       	cpi	r24, 0xFF	; 255
     f9a:	51 f0       	breq	.+20     	; 0xfb0 <Timer0_AllocateCountdownTimer+0x1c>
     f9c:	e0 eb       	ldi	r30, 0xB0	; 176
     f9e:	f4 e0       	ldi	r31, 0x04	; 4
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	82 2f       	mov	r24, r18
     fa6:	a9 01       	movw	r20, r18
     fa8:	91 91       	ld	r25, Z+
     faa:	9f 3f       	cpi	r25, 0xFF	; 255
     fac:	51 f4       	brne	.+20     	; 0xfc2 <Timer0_AllocateCountdownTimer+0x2e>
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <Timer0_AllocateCountdownTimer+0x22>
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     fb4:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
     fb6:	fa 01       	movw	r30, r20
     fb8:	e1 55       	subi	r30, 0x51	; 81
     fba:	fb 4f       	sbci	r31, 0xFB	; 251
     fbc:	10 82       	st	Z, r1
		return i+1;
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	08 95       	ret
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     fc6:	28 30       	cpi	r18, 0x08	; 8
     fc8:	31 05       	cpc	r19, r1
     fca:	61 f7       	brne	.-40     	; 0xfa4 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
}
     fce:	08 95       	ret

00000fd0 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
     fd0:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
     fd6:	ea e6       	ldi	r30, 0x6A	; 106
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
     fe0:	89 b7       	in	r24, 0x39	; 57
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
     fe6:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
     fe8:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
     fea:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
     fec:	d3 df       	rcall	.-90     	; 0xf94 <Timer0_AllocateCountdownTimer>
     fee:	80 93 e7 04 	sts	0x04E7, r24
     ff2:	08 95       	ret

00000ff4 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
     ff4:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
     ff6:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
     ff8:	80 fd       	sbrc	r24, 0
     ffa:	15 c0       	rjmp	.+42     	; 0x1026 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
     ffc:	81 fd       	sbrc	r24, 1
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    1000:	82 fd       	sbrc	r24, 2
    1002:	15 c0       	rjmp	.+42     	; 0x102e <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1004:	83 fd       	sbrc	r24, 3
    1006:	15 c0       	rjmp	.+42     	; 0x1032 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1008:	84 fd       	sbrc	r24, 4
    100a:	15 c0       	rjmp	.+42     	; 0x1036 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    100c:	85 fd       	sbrc	r24, 5
    100e:	15 c0       	rjmp	.+42     	; 0x103a <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    1010:	86 fd       	sbrc	r24, 6
    1012:	15 c0       	rjmp	.+42     	; 0x103e <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1014:	88 23       	and	r24, r24
    1016:	d4 f4       	brge	.+52     	; 0x104c <button_interrupt+0x58>
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    101a:	90 93 1b 03 	sts	0x031B, r25
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	80 93 a5 04 	sts	0x04A5, r24
    1024:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1026:	95 e0       	ldi	r25, 0x05	; 5
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    102a:	97 e0       	ldi	r25, 0x07	; 7
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1042:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    1044:	80 91 a5 04 	lds	r24, 0x04A5
    1048:	88 23       	and	r24, r24
    104a:	39 f3       	breq	.-50     	; 0x101a <button_interrupt+0x26>
    104c:	08 95       	ret

0000104e <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	0b b6       	in	r0, 0x3b	; 59
    105a:	0f 92       	push	r0
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
cli();	
    1074:	f8 94       	cli
button_interrupt();
    1076:	be df       	rcall	.-132    	; 0xff4 <button_interrupt>
sei();
    1078:	78 94       	sei
}
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0b be       	out	0x3b, r0	; 59
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    10a0:	f8 94       	cli
	if(KEY_VALID){
    10a2:	80 91 a5 04 	lds	r24, 0x04A5
    10a6:	88 23       	and	r24, r24
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <getkey+0x14>
		k = KEY;
    10aa:	80 91 1b 03 	lds	r24, 0x031B
		KEY_VALID = false;
    10ae:	10 92 a5 04 	sts	0x04A5, r1
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <getkey+0x16>
		
	}
	else k=KEY_NULL;
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    10b6:	78 94       	sei
	
	return k;
	
	
	
    10b8:	08 95       	ret

000010ba <lcd12864_send_data>:
void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
	lcd12864_wait_busy();
}

void lcd12864_send_data(uint8_t data){
    10ba:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t i;

	for (i=0;i<8;i++){
		if(data & 0x80)
    10bc:	88 23       	and	r24, r24
    10be:	14 f4       	brge	.+4      	; 0x10c4 <lcd12864_send_data+0xa>
			LCD12864_SID_1;
    10c0:	1c 9a       	sbi	0x03, 4	; 3
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <lcd12864_send_data+0xc>
		else
			LCD12864_SID_0;
    10c4:	1c 98       	cbi	0x03, 4	; 3
			data<<=1;
    10c6:	88 0f       	add	r24, r24
		LCD12864_CLK_H;
    10c8:	1b 9a       	sbi	0x03, 3	; 3
		nop();nop();nop();
    10ca:	00 00       	nop
    10cc:	00 00       	nop
    10ce:	00 00       	nop
		LCD12864_CLK_L;	
    10d0:	1b 98       	cbi	0x03, 3	; 3
    10d2:	91 50       	subi	r25, 0x01	; 1
}

void lcd12864_send_data(uint8_t data){
	uint8_t i;

	for (i=0;i<8;i++){
    10d4:	99 f7       	brne	.-26     	; 0x10bc <lcd12864_send_data+0x2>
		nop();nop();nop();
		LCD12864_CLK_L;	
	}

	
}
    10d6:	08 95       	ret

000010d8 <lcd12864_wait_busy>:

void lcd12864_wait_busy(void){
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	86 36       	cpi	r24, 0x66	; 102
    10e0:	22 e0       	ldi	r18, 0x02	; 2
    10e2:	92 07       	cpc	r25, r18
    10e4:	d9 f7       	brne	.-10     	; 0x10dc <lcd12864_wait_busy+0x4>
delay_us(500);
}
    10e6:	08 95       	ret

000010e8 <lcd12864_send_cmd>:

void lcd12864_send_cmd(uint8_t cmd){
    10e8:	cf 93       	push	r28
    10ea:	c8 2f       	mov	r28, r24
	LCD12864_ENABLE;
    10ec:	1e 9a       	sbi	0x03, 6	; 3
	lcd12864_wait_busy();
    10ee:	f4 df       	rcall	.-24     	; 0x10d8 <lcd12864_wait_busy>
	lcd12864_send_data(0xf8);
    10f0:	88 ef       	ldi	r24, 0xF8	; 248
    10f2:	e3 df       	rcall	.-58     	; 0x10ba <lcd12864_send_data>
	lcd12864_send_data(cmd & 0xf0);
    10f4:	8c 2f       	mov	r24, r28
    10f6:	80 7f       	andi	r24, 0xF0	; 240
    10f8:	e0 df       	rcall	.-64     	; 0x10ba <lcd12864_send_data>
	lcd12864_send_data(cmd<<4);
    10fa:	8c 2f       	mov	r24, r28
    10fc:	82 95       	swap	r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	dc df       	rcall	.-72     	; 0x10ba <lcd12864_send_data>
	LCD12864_DISABLE;
    1102:	1e 98       	cbi	0x03, 6	; 3
}
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <lcd12864_init>:
#include <string.h>
#include <stdlib.h>


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
    1108:	82 b1       	in	r24, 0x02	; 2
    110a:	88 6f       	ori	r24, 0xF8	; 248
    110c:	82 b9       	out	0x02, r24	; 2

	LCD12864_RESET;
    110e:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
    1110:	1f 98       	cbi	0x03, 7	; 3
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	81 15       	cp	r24, r1
    111a:	20 e3       	ldi	r18, 0x30	; 48
    111c:	92 07       	cpc	r25, r18
    111e:	d9 f7       	brne	.-10     	; 0x1116 <lcd12864_init+0xe>

	delay_ms(10);
	lcd12864_send_cmd(0x30);
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	e2 df       	rcall	.-60     	; 0x10e8 <lcd12864_send_cmd>

	lcd12864_send_cmd(0x01);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	e0 df       	rcall	.-64     	; 0x10e8 <lcd12864_send_cmd>

	lcd12864_send_cmd(0x06);
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	de df       	rcall	.-68     	; 0x10e8 <lcd12864_send_cmd>

	lcd12864_send_cmd(0x0c);
    112c:	8c e0       	ldi	r24, 0x0C	; 12
    112e:	dc cf       	rjmp	.-72     	; 0x10e8 <lcd12864_send_cmd>
    1130:	08 95       	ret

00001132 <lcd12864_clear>:

}

void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	d9 df       	rcall	.-78     	; 0x10e8 <lcd12864_send_cmd>
	lcd12864_wait_busy();
    1136:	d0 cf       	rjmp	.-96     	; 0x10d8 <lcd12864_wait_busy>
    1138:	08 95       	ret

0000113a <lcd12864_set_pos>:
	LCD12864_DISABLE;
}

void lcd12864_set_pos(uint8_t x, uint8_t y){
	uint8_t tmp;
	switch(y){
    113a:	62 30       	cpi	r22, 0x02	; 2
    113c:	89 f0       	breq	.+34     	; 0x1160 <lcd12864_set_pos+0x26>
    113e:	18 f4       	brcc	.+6      	; 0x1146 <lcd12864_set_pos+0xc>
    1140:	61 30       	cpi	r22, 0x01	; 1
    1142:	31 f0       	breq	.+12     	; 0x1150 <lcd12864_set_pos+0x16>
    1144:	0b c0       	rjmp	.+22     	; 0x115c <lcd12864_set_pos+0x22>
    1146:	63 30       	cpi	r22, 0x03	; 3
    1148:	29 f0       	breq	.+10     	; 0x1154 <lcd12864_set_pos+0x1a>
    114a:	64 30       	cpi	r22, 0x04	; 4
    114c:	29 f0       	breq	.+10     	; 0x1158 <lcd12864_set_pos+0x1e>
    114e:	06 c0       	rjmp	.+12     	; 0x115c <lcd12864_set_pos+0x22>
		case 1:
			tmp=0x80; break;
    1150:	90 e8       	ldi	r25, 0x80	; 128
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <lcd12864_set_pos+0x28>
		case 2:
			tmp=0x90; break;
		case 3:
			tmp=0x88; break;
    1154:	98 e8       	ldi	r25, 0x88	; 136
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <lcd12864_set_pos+0x28>
		case 4:
			tmp=0x98; break;
    1158:	98 e9       	ldi	r25, 0x98	; 152
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <lcd12864_set_pos+0x28>
		default:
			tmp=0x98;
    115c:	98 e9       	ldi	r25, 0x98	; 152
			break;
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <lcd12864_set_pos+0x28>
	uint8_t tmp;
	switch(y){
		case 1:
			tmp=0x80; break;
		case 2:
			tmp=0x90; break;
    1160:	90 e9       	ldi	r25, 0x90	; 144
			tmp=0x98;
			break;
				
	}
	
	if(x>16) return; 
    1162:	81 31       	cpi	r24, 0x11	; 17
    1164:	10 f4       	brcc	.+4      	; 0x116a <lcd12864_set_pos+0x30>
	
	lcd12864_send_cmd(tmp+x);
    1166:	89 0f       	add	r24, r25
    1168:	bf cf       	rjmp	.-130    	; 0x10e8 <lcd12864_send_cmd>
    116a:	08 95       	ret

0000116c <lcd12864_write_char>:
	

	
}

void lcd12864_write_char(char data){
    116c:	cf 93       	push	r28
    116e:	c8 2f       	mov	r28, r24
		LCD12864_ENABLE;
    1170:	1e 9a       	sbi	0x03, 6	; 3
		lcd12864_wait_busy();
    1172:	b2 df       	rcall	.-156    	; 0x10d8 <lcd12864_wait_busy>
		lcd12864_send_data(0xfa);
    1174:	8a ef       	ldi	r24, 0xFA	; 250
    1176:	a1 df       	rcall	.-190    	; 0x10ba <lcd12864_send_data>
		lcd12864_send_data(0xf0&data);
    1178:	8c 2f       	mov	r24, r28
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	9e df       	rcall	.-196    	; 0x10ba <lcd12864_send_data>
		lcd12864_send_data(0xf0&data<<4);
    117e:	8c 2f       	mov	r24, r28
    1180:	82 95       	swap	r24
    1182:	80 7f       	andi	r24, 0xF0	; 240
    1184:	9a df       	rcall	.-204    	; 0x10ba <lcd12864_send_data>
		LCD12864_DISABLE;
    1186:	1e 98       	cbi	0x03, 6	; 3
	
}
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <lcd12864_write_str>:

void lcd12864_write_str(char *str){
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
    1194:	88 81       	ld	r24, Y
    1196:	88 23       	and	r24, r24
    1198:	49 f0       	breq	.+18     	; 0x11ac <lcd12864_write_str+0x20>
    119a:	10 e0       	ldi	r17, 0x00	; 0
		lcd12864_write_char(str[i]);
    119c:	e7 df       	rcall	.-50     	; 0x116c <lcd12864_write_char>
	
}

void lcd12864_write_str(char *str){
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
    119e:	1f 5f       	subi	r17, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e1 0f       	add	r30, r17
    11a4:	f1 1d       	adc	r31, r1
    11a6:	80 81       	ld	r24, Z
    11a8:	81 11       	cpse	r24, r1
    11aa:	f8 cf       	rjmp	.-16     	; 0x119c <lcd12864_write_str+0x10>
		lcd12864_write_char(str[i]);
	}
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	08 95       	ret

000011b4 <__subsf3>:
    11b4:	50 58       	subi	r21, 0x80	; 128

000011b6 <__addsf3>:
    11b6:	bb 27       	eor	r27, r27
    11b8:	aa 27       	eor	r26, r26
    11ba:	0e d0       	rcall	.+28     	; 0x11d8 <__addsf3x>
    11bc:	e5 c0       	rjmp	.+458    	; 0x1388 <__fp_round>
    11be:	d6 d0       	rcall	.+428    	; 0x136c <__fp_pscA>
    11c0:	30 f0       	brcs	.+12     	; 0x11ce <__addsf3+0x18>
    11c2:	db d0       	rcall	.+438    	; 0x137a <__fp_pscB>
    11c4:	20 f0       	brcs	.+8      	; 0x11ce <__addsf3+0x18>
    11c6:	31 f4       	brne	.+12     	; 0x11d4 <__addsf3+0x1e>
    11c8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__addsf3+0x1a>
    11cc:	1e f4       	brtc	.+6      	; 0x11d4 <__addsf3+0x1e>
    11ce:	cb c0       	rjmp	.+406    	; 0x1366 <__fp_nan>
    11d0:	0e f4       	brtc	.+2      	; 0x11d4 <__addsf3+0x1e>
    11d2:	e0 95       	com	r30
    11d4:	e7 fb       	bst	r30, 7
    11d6:	c1 c0       	rjmp	.+386    	; 0x135a <__fp_inf>

000011d8 <__addsf3x>:
    11d8:	e9 2f       	mov	r30, r25
    11da:	e7 d0       	rcall	.+462    	; 0x13aa <__fp_split3>
    11dc:	80 f3       	brcs	.-32     	; 0x11be <__addsf3+0x8>
    11de:	ba 17       	cp	r27, r26
    11e0:	62 07       	cpc	r22, r18
    11e2:	73 07       	cpc	r23, r19
    11e4:	84 07       	cpc	r24, r20
    11e6:	95 07       	cpc	r25, r21
    11e8:	18 f0       	brcs	.+6      	; 0x11f0 <__addsf3x+0x18>
    11ea:	71 f4       	brne	.+28     	; 0x1208 <__addsf3x+0x30>
    11ec:	9e f5       	brtc	.+102    	; 0x1254 <__addsf3x+0x7c>
    11ee:	ff c0       	rjmp	.+510    	; 0x13ee <__fp_zero>
    11f0:	0e f4       	brtc	.+2      	; 0x11f4 <__addsf3x+0x1c>
    11f2:	e0 95       	com	r30
    11f4:	0b 2e       	mov	r0, r27
    11f6:	ba 2f       	mov	r27, r26
    11f8:	a0 2d       	mov	r26, r0
    11fa:	0b 01       	movw	r0, r22
    11fc:	b9 01       	movw	r22, r18
    11fe:	90 01       	movw	r18, r0
    1200:	0c 01       	movw	r0, r24
    1202:	ca 01       	movw	r24, r20
    1204:	a0 01       	movw	r20, r0
    1206:	11 24       	eor	r1, r1
    1208:	ff 27       	eor	r31, r31
    120a:	59 1b       	sub	r21, r25
    120c:	99 f0       	breq	.+38     	; 0x1234 <__addsf3x+0x5c>
    120e:	59 3f       	cpi	r21, 0xF9	; 249
    1210:	50 f4       	brcc	.+20     	; 0x1226 <__addsf3x+0x4e>
    1212:	50 3e       	cpi	r21, 0xE0	; 224
    1214:	68 f1       	brcs	.+90     	; 0x1270 <__addsf3x+0x98>
    1216:	1a 16       	cp	r1, r26
    1218:	f0 40       	sbci	r31, 0x00	; 0
    121a:	a2 2f       	mov	r26, r18
    121c:	23 2f       	mov	r18, r19
    121e:	34 2f       	mov	r19, r20
    1220:	44 27       	eor	r20, r20
    1222:	58 5f       	subi	r21, 0xF8	; 248
    1224:	f3 cf       	rjmp	.-26     	; 0x120c <__addsf3x+0x34>
    1226:	46 95       	lsr	r20
    1228:	37 95       	ror	r19
    122a:	27 95       	ror	r18
    122c:	a7 95       	ror	r26
    122e:	f0 40       	sbci	r31, 0x00	; 0
    1230:	53 95       	inc	r21
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__addsf3x+0x4e>
    1234:	7e f4       	brtc	.+30     	; 0x1254 <__addsf3x+0x7c>
    1236:	1f 16       	cp	r1, r31
    1238:	ba 0b       	sbc	r27, r26
    123a:	62 0b       	sbc	r22, r18
    123c:	73 0b       	sbc	r23, r19
    123e:	84 0b       	sbc	r24, r20
    1240:	ba f0       	brmi	.+46     	; 0x1270 <__addsf3x+0x98>
    1242:	91 50       	subi	r25, 0x01	; 1
    1244:	a1 f0       	breq	.+40     	; 0x126e <__addsf3x+0x96>
    1246:	ff 0f       	add	r31, r31
    1248:	bb 1f       	adc	r27, r27
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	c2 f7       	brpl	.-16     	; 0x1242 <__addsf3x+0x6a>
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <__addsf3x+0x98>
    1254:	ba 0f       	add	r27, r26
    1256:	62 1f       	adc	r22, r18
    1258:	73 1f       	adc	r23, r19
    125a:	84 1f       	adc	r24, r20
    125c:	48 f4       	brcc	.+18     	; 0x1270 <__addsf3x+0x98>
    125e:	87 95       	ror	r24
    1260:	77 95       	ror	r23
    1262:	67 95       	ror	r22
    1264:	b7 95       	ror	r27
    1266:	f7 95       	ror	r31
    1268:	9e 3f       	cpi	r25, 0xFE	; 254
    126a:	08 f0       	brcs	.+2      	; 0x126e <__addsf3x+0x96>
    126c:	b3 cf       	rjmp	.-154    	; 0x11d4 <__addsf3+0x1e>
    126e:	93 95       	inc	r25
    1270:	88 0f       	add	r24, r24
    1272:	08 f0       	brcs	.+2      	; 0x1276 <__addsf3x+0x9e>
    1274:	99 27       	eor	r25, r25
    1276:	ee 0f       	add	r30, r30
    1278:	97 95       	ror	r25
    127a:	87 95       	ror	r24
    127c:	08 95       	ret

0000127e <__fixsfsi>:
    127e:	04 d0       	rcall	.+8      	; 0x1288 <__fixunssfsi>
    1280:	68 94       	set
    1282:	b1 11       	cpse	r27, r1
    1284:	b5 c0       	rjmp	.+362    	; 0x13f0 <__fp_szero>
    1286:	08 95       	ret

00001288 <__fixunssfsi>:
    1288:	98 d0       	rcall	.+304    	; 0x13ba <__fp_splitA>
    128a:	88 f0       	brcs	.+34     	; 0x12ae <__fixunssfsi+0x26>
    128c:	9f 57       	subi	r25, 0x7F	; 127
    128e:	90 f0       	brcs	.+36     	; 0x12b4 <__fixunssfsi+0x2c>
    1290:	b9 2f       	mov	r27, r25
    1292:	99 27       	eor	r25, r25
    1294:	b7 51       	subi	r27, 0x17	; 23
    1296:	a0 f0       	brcs	.+40     	; 0x12c0 <__fixunssfsi+0x38>
    1298:	d1 f0       	breq	.+52     	; 0x12ce <__fixunssfsi+0x46>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	1a f0       	brmi	.+6      	; 0x12aa <__fixunssfsi+0x22>
    12a4:	ba 95       	dec	r27
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__fixunssfsi+0x12>
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <__fixunssfsi+0x46>
    12aa:	b1 30       	cpi	r27, 0x01	; 1
    12ac:	81 f0       	breq	.+32     	; 0x12ce <__fixunssfsi+0x46>
    12ae:	9f d0       	rcall	.+318    	; 0x13ee <__fp_zero>
    12b0:	b1 e0       	ldi	r27, 0x01	; 1
    12b2:	08 95       	ret
    12b4:	9c c0       	rjmp	.+312    	; 0x13ee <__fp_zero>
    12b6:	67 2f       	mov	r22, r23
    12b8:	78 2f       	mov	r23, r24
    12ba:	88 27       	eor	r24, r24
    12bc:	b8 5f       	subi	r27, 0xF8	; 248
    12be:	39 f0       	breq	.+14     	; 0x12ce <__fixunssfsi+0x46>
    12c0:	b9 3f       	cpi	r27, 0xF9	; 249
    12c2:	cc f3       	brlt	.-14     	; 0x12b6 <__fixunssfsi+0x2e>
    12c4:	86 95       	lsr	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b3 95       	inc	r27
    12cc:	d9 f7       	brne	.-10     	; 0x12c4 <__fixunssfsi+0x3c>
    12ce:	3e f4       	brtc	.+14     	; 0x12de <__fixunssfsi+0x56>
    12d0:	90 95       	com	r25
    12d2:	80 95       	com	r24
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <__floatunsisf>:
    12e0:	e8 94       	clt
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <__floatsisf+0x12>

000012e4 <__floatsisf>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	3e f4       	brtc	.+14     	; 0x12f6 <__floatsisf+0x12>
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	61 95       	neg	r22
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	99 23       	and	r25, r25
    12f8:	a9 f0       	breq	.+42     	; 0x1324 <__floatsisf+0x40>
    12fa:	f9 2f       	mov	r31, r25
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	bb 27       	eor	r27, r27
    1300:	93 95       	inc	r25
    1302:	f6 95       	lsr	r31
    1304:	87 95       	ror	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f1 11       	cpse	r31, r1
    130e:	f8 cf       	rjmp	.-16     	; 0x1300 <__floatsisf+0x1c>
    1310:	fa f4       	brpl	.+62     	; 0x1350 <__floatsisf+0x6c>
    1312:	bb 0f       	add	r27, r27
    1314:	11 f4       	brne	.+4      	; 0x131a <__floatsisf+0x36>
    1316:	60 ff       	sbrs	r22, 0
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <__floatsisf+0x6c>
    131a:	6f 5f       	subi	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	16 c0       	rjmp	.+44     	; 0x1350 <__floatsisf+0x6c>
    1324:	88 23       	and	r24, r24
    1326:	11 f0       	breq	.+4      	; 0x132c <__floatsisf+0x48>
    1328:	96 e9       	ldi	r25, 0x96	; 150
    132a:	11 c0       	rjmp	.+34     	; 0x134e <__floatsisf+0x6a>
    132c:	77 23       	and	r23, r23
    132e:	21 f0       	breq	.+8      	; 0x1338 <__floatsisf+0x54>
    1330:	9e e8       	ldi	r25, 0x8E	; 142
    1332:	87 2f       	mov	r24, r23
    1334:	76 2f       	mov	r23, r22
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <__floatsisf+0x5e>
    1338:	66 23       	and	r22, r22
    133a:	71 f0       	breq	.+28     	; 0x1358 <__floatsisf+0x74>
    133c:	96 e8       	ldi	r25, 0x86	; 134
    133e:	86 2f       	mov	r24, r22
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	2a f0       	brmi	.+10     	; 0x1350 <__floatsisf+0x6c>
    1346:	9a 95       	dec	r25
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	da f7       	brpl	.-10     	; 0x1346 <__floatsisf+0x62>
    1350:	88 0f       	add	r24, r24
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	97 f9       	bld	r25, 7
    1358:	08 95       	ret

0000135a <__fp_inf>:
    135a:	97 f9       	bld	r25, 7
    135c:	9f 67       	ori	r25, 0x7F	; 127
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	08 95       	ret

00001366 <__fp_nan>:
    1366:	9f ef       	ldi	r25, 0xFF	; 255
    1368:	80 ec       	ldi	r24, 0xC0	; 192
    136a:	08 95       	ret

0000136c <__fp_pscA>:
    136c:	00 24       	eor	r0, r0
    136e:	0a 94       	dec	r0
    1370:	16 16       	cp	r1, r22
    1372:	17 06       	cpc	r1, r23
    1374:	18 06       	cpc	r1, r24
    1376:	09 06       	cpc	r0, r25
    1378:	08 95       	ret

0000137a <__fp_pscB>:
    137a:	00 24       	eor	r0, r0
    137c:	0a 94       	dec	r0
    137e:	12 16       	cp	r1, r18
    1380:	13 06       	cpc	r1, r19
    1382:	14 06       	cpc	r1, r20
    1384:	05 06       	cpc	r0, r21
    1386:	08 95       	ret

00001388 <__fp_round>:
    1388:	09 2e       	mov	r0, r25
    138a:	03 94       	inc	r0
    138c:	00 0c       	add	r0, r0
    138e:	11 f4       	brne	.+4      	; 0x1394 <__fp_round+0xc>
    1390:	88 23       	and	r24, r24
    1392:	52 f0       	brmi	.+20     	; 0x13a8 <__fp_round+0x20>
    1394:	bb 0f       	add	r27, r27
    1396:	40 f4       	brcc	.+16     	; 0x13a8 <__fp_round+0x20>
    1398:	bf 2b       	or	r27, r31
    139a:	11 f4       	brne	.+4      	; 0x13a0 <__fp_round+0x18>
    139c:	60 ff       	sbrs	r22, 0
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <__fp_round+0x20>
    13a0:	6f 5f       	subi	r22, 0xFF	; 255
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	8f 4f       	sbci	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	08 95       	ret

000013aa <__fp_split3>:
    13aa:	57 fd       	sbrc	r21, 7
    13ac:	90 58       	subi	r25, 0x80	; 128
    13ae:	44 0f       	add	r20, r20
    13b0:	55 1f       	adc	r21, r21
    13b2:	59 f0       	breq	.+22     	; 0x13ca <__fp_splitA+0x10>
    13b4:	5f 3f       	cpi	r21, 0xFF	; 255
    13b6:	71 f0       	breq	.+28     	; 0x13d4 <__fp_splitA+0x1a>
    13b8:	47 95       	ror	r20

000013ba <__fp_splitA>:
    13ba:	88 0f       	add	r24, r24
    13bc:	97 fb       	bst	r25, 7
    13be:	99 1f       	adc	r25, r25
    13c0:	61 f0       	breq	.+24     	; 0x13da <__fp_splitA+0x20>
    13c2:	9f 3f       	cpi	r25, 0xFF	; 255
    13c4:	79 f0       	breq	.+30     	; 0x13e4 <__fp_splitA+0x2a>
    13c6:	87 95       	ror	r24
    13c8:	08 95       	ret
    13ca:	12 16       	cp	r1, r18
    13cc:	13 06       	cpc	r1, r19
    13ce:	14 06       	cpc	r1, r20
    13d0:	55 1f       	adc	r21, r21
    13d2:	f2 cf       	rjmp	.-28     	; 0x13b8 <__fp_split3+0xe>
    13d4:	46 95       	lsr	r20
    13d6:	f1 df       	rcall	.-30     	; 0x13ba <__fp_splitA>
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <__fp_splitA+0x30>
    13da:	16 16       	cp	r1, r22
    13dc:	17 06       	cpc	r1, r23
    13de:	18 06       	cpc	r1, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	f1 cf       	rjmp	.-30     	; 0x13c6 <__fp_splitA+0xc>
    13e4:	86 95       	lsr	r24
    13e6:	71 05       	cpc	r23, r1
    13e8:	61 05       	cpc	r22, r1
    13ea:	08 94       	sec
    13ec:	08 95       	ret

000013ee <__fp_zero>:
    13ee:	e8 94       	clt

000013f0 <__fp_szero>:
    13f0:	bb 27       	eor	r27, r27
    13f2:	66 27       	eor	r22, r22
    13f4:	77 27       	eor	r23, r23
    13f6:	cb 01       	movw	r24, r22
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <__mulsf3>:
    13fc:	0b d0       	rcall	.+22     	; 0x1414 <__mulsf3x>
    13fe:	c4 cf       	rjmp	.-120    	; 0x1388 <__fp_round>
    1400:	b5 df       	rcall	.-150    	; 0x136c <__fp_pscA>
    1402:	28 f0       	brcs	.+10     	; 0x140e <__mulsf3+0x12>
    1404:	ba df       	rcall	.-140    	; 0x137a <__fp_pscB>
    1406:	18 f0       	brcs	.+6      	; 0x140e <__mulsf3+0x12>
    1408:	95 23       	and	r25, r21
    140a:	09 f0       	breq	.+2      	; 0x140e <__mulsf3+0x12>
    140c:	a6 cf       	rjmp	.-180    	; 0x135a <__fp_inf>
    140e:	ab cf       	rjmp	.-170    	; 0x1366 <__fp_nan>
    1410:	11 24       	eor	r1, r1
    1412:	ee cf       	rjmp	.-36     	; 0x13f0 <__fp_szero>

00001414 <__mulsf3x>:
    1414:	ca df       	rcall	.-108    	; 0x13aa <__fp_split3>
    1416:	a0 f3       	brcs	.-24     	; 0x1400 <__mulsf3+0x4>

00001418 <__mulsf3_pse>:
    1418:	95 9f       	mul	r25, r21
    141a:	d1 f3       	breq	.-12     	; 0x1410 <__mulsf3+0x14>
    141c:	95 0f       	add	r25, r21
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	55 1f       	adc	r21, r21
    1422:	62 9f       	mul	r22, r18
    1424:	f0 01       	movw	r30, r0
    1426:	72 9f       	mul	r23, r18
    1428:	bb 27       	eor	r27, r27
    142a:	f0 0d       	add	r31, r0
    142c:	b1 1d       	adc	r27, r1
    142e:	63 9f       	mul	r22, r19
    1430:	aa 27       	eor	r26, r26
    1432:	f0 0d       	add	r31, r0
    1434:	b1 1d       	adc	r27, r1
    1436:	aa 1f       	adc	r26, r26
    1438:	64 9f       	mul	r22, r20
    143a:	66 27       	eor	r22, r22
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	66 1f       	adc	r22, r22
    1442:	82 9f       	mul	r24, r18
    1444:	22 27       	eor	r18, r18
    1446:	b0 0d       	add	r27, r0
    1448:	a1 1d       	adc	r26, r1
    144a:	62 1f       	adc	r22, r18
    144c:	73 9f       	mul	r23, r19
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	62 1f       	adc	r22, r18
    1454:	83 9f       	mul	r24, r19
    1456:	a0 0d       	add	r26, r0
    1458:	61 1d       	adc	r22, r1
    145a:	22 1f       	adc	r18, r18
    145c:	74 9f       	mul	r23, r20
    145e:	33 27       	eor	r19, r19
    1460:	a0 0d       	add	r26, r0
    1462:	61 1d       	adc	r22, r1
    1464:	23 1f       	adc	r18, r19
    1466:	84 9f       	mul	r24, r20
    1468:	60 0d       	add	r22, r0
    146a:	21 1d       	adc	r18, r1
    146c:	82 2f       	mov	r24, r18
    146e:	76 2f       	mov	r23, r22
    1470:	6a 2f       	mov	r22, r26
    1472:	11 24       	eor	r1, r1
    1474:	9f 57       	subi	r25, 0x7F	; 127
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	8a f0       	brmi	.+34     	; 0x149c <__mulsf3_pse+0x84>
    147a:	e1 f0       	breq	.+56     	; 0x14b4 <__mulsf3_pse+0x9c>
    147c:	88 23       	and	r24, r24
    147e:	4a f0       	brmi	.+18     	; 0x1492 <__mulsf3_pse+0x7a>
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	bb 1f       	adc	r27, r27
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	91 50       	subi	r25, 0x01	; 1
    148e:	50 40       	sbci	r21, 0x00	; 0
    1490:	a9 f7       	brne	.-22     	; 0x147c <__mulsf3_pse+0x64>
    1492:	9e 3f       	cpi	r25, 0xFE	; 254
    1494:	51 05       	cpc	r21, r1
    1496:	70 f0       	brcs	.+28     	; 0x14b4 <__mulsf3_pse+0x9c>
    1498:	60 cf       	rjmp	.-320    	; 0x135a <__fp_inf>
    149a:	aa cf       	rjmp	.-172    	; 0x13f0 <__fp_szero>
    149c:	5f 3f       	cpi	r21, 0xFF	; 255
    149e:	ec f3       	brlt	.-6      	; 0x149a <__mulsf3_pse+0x82>
    14a0:	98 3e       	cpi	r25, 0xE8	; 232
    14a2:	dc f3       	brlt	.-10     	; 0x149a <__mulsf3_pse+0x82>
    14a4:	86 95       	lsr	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	f7 95       	ror	r31
    14ae:	e7 95       	ror	r30
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c1 f7       	brne	.-16     	; 0x14a4 <__mulsf3_pse+0x8c>
    14b4:	fe 2b       	or	r31, r30
    14b6:	88 0f       	add	r24, r24
    14b8:	91 1d       	adc	r25, r1
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret

000014c2 <__umulhisi3>:
    14c2:	a2 9f       	mul	r26, r18
    14c4:	b0 01       	movw	r22, r0
    14c6:	b3 9f       	mul	r27, r19
    14c8:	c0 01       	movw	r24, r0
    14ca:	a3 9f       	mul	r26, r19
    14cc:	70 0d       	add	r23, r0
    14ce:	81 1d       	adc	r24, r1
    14d0:	11 24       	eor	r1, r1
    14d2:	91 1d       	adc	r25, r1
    14d4:	b2 9f       	mul	r27, r18
    14d6:	70 0d       	add	r23, r0
    14d8:	81 1d       	adc	r24, r1
    14da:	11 24       	eor	r1, r1
    14dc:	91 1d       	adc	r25, r1
    14de:	08 95       	ret

000014e0 <__itoa_ncheck>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	4a 30       	cpi	r20, 0x0A	; 10
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <__itoa_ncheck+0x12>
    14e6:	99 23       	and	r25, r25
    14e8:	22 f4       	brpl	.+8      	; 0x14f2 <__itoa_ncheck+0x12>
    14ea:	bd e2       	ldi	r27, 0x2D	; 45
    14ec:	90 95       	com	r25
    14ee:	81 95       	neg	r24
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <__utoa_common>

000014f4 <__utoa_ncheck>:
    14f4:	bb 27       	eor	r27, r27

000014f6 <__utoa_common>:
    14f6:	fb 01       	movw	r30, r22
    14f8:	55 27       	eor	r21, r21
    14fa:	aa 27       	eor	r26, r26
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	aa 1f       	adc	r26, r26
    1502:	a4 17       	cp	r26, r20
    1504:	10 f0       	brcs	.+4      	; 0x150a <__utoa_common+0x14>
    1506:	a4 1b       	sub	r26, r20
    1508:	83 95       	inc	r24
    150a:	50 51       	subi	r21, 0x10	; 16
    150c:	b9 f7       	brne	.-18     	; 0x14fc <__utoa_common+0x6>
    150e:	a0 5d       	subi	r26, 0xD0	; 208
    1510:	aa 33       	cpi	r26, 0x3A	; 58
    1512:	08 f0       	brcs	.+2      	; 0x1516 <__utoa_common+0x20>
    1514:	a9 5d       	subi	r26, 0xD9	; 217
    1516:	a1 93       	st	Z+, r26
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	79 f7       	brne	.-34     	; 0x14fa <__utoa_common+0x4>
    151c:	b1 11       	cpse	r27, r1
    151e:	b1 93       	st	Z+, r27
    1520:	11 92       	st	Z+, r1
    1522:	cb 01       	movw	r24, r22
    1524:	00 c0       	rjmp	.+0      	; 0x1526 <strrev>

00001526 <strrev>:
    1526:	dc 01       	movw	r26, r24
    1528:	fc 01       	movw	r30, r24
    152a:	67 2f       	mov	r22, r23
    152c:	71 91       	ld	r23, Z+
    152e:	77 23       	and	r23, r23
    1530:	e1 f7       	brne	.-8      	; 0x152a <strrev+0x4>
    1532:	32 97       	sbiw	r30, 0x02	; 2
    1534:	04 c0       	rjmp	.+8      	; 0x153e <strrev+0x18>
    1536:	7c 91       	ld	r23, X
    1538:	6d 93       	st	X+, r22
    153a:	70 83       	st	Z, r23
    153c:	62 91       	ld	r22, -Z
    153e:	ae 17       	cp	r26, r30
    1540:	bf 07       	cpc	r27, r31
    1542:	c8 f3       	brcs	.-14     	; 0x1536 <strrev+0x10>
    1544:	08 95       	ret

00001546 <_exit>:
    1546:	f8 94       	cli

00001548 <__stop_program>:
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <__stop_program>


AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800102  00800102  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000124a  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000761  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ac4  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  00004ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010a70  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa5  00000000  00000000  00015924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000163c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000ef9  00000000  00000000  00016521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c1       	rjmp	.+740    	; 0x2ee <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 33       	cpi	r26, 0x3E	; 62
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7a d1       	rcall	.+756    	; 0x3b8 <main>
  c4:	80 c1       	rjmp	.+768    	; 0x3c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <emv_ports_init>:
uint16_t emv_control_word = 0xff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	80 6e       	ori	r24, 0xE0	; 224
  cc:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
  ce:	e4 e6       	ldi	r30, 0x64	; 100
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 61       	ori	r24, 0x18	; 24
  d6:	80 83       	st	Z, r24
	SCK_LOW;
  d8:	e5 e6       	ldi	r30, 0x65	; 101
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	80 83       	st	Z, r24
	RCK_LOW;
  e2:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
	OEn_LOW;
  ea:	c6 98       	cbi	0x18, 6	; 24
  ec:	08 95       	ret

000000ee <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
  ee:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
  f0:	e1 e6       	ldi	r30, 0x61	; 97
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 83       	st	Z, r24
	DDRG |=_BV(0);
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
 104:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
 106:	e2 e6       	ldi	r30, 0x62	; 98
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
 110:	e5 e6       	ldi	r30, 0x65	; 101
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <draw_main_page>:
		

uint8_t work_mode=1;
bool alarm_flag = true;
uint16_t menu_status =0;
void draw_main_page(void){
 11c:	08 95       	ret

0000011e <Timer0_Init>:
			return true;
		}
	}
	
	return false;
}
 11e:	ed e0       	ldi	r30, 0x0D	; 13
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	8d e3       	ldi	r24, 0x3D	; 61
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	11 82       	std	Z+1, r1	; 0x01
 128:	10 82       	st	Z, r1
 12a:	13 82       	std	Z+3, r1	; 0x03
 12c:	12 82       	std	Z+2, r1	; 0x02
 12e:	15 82       	std	Z+5, r1	; 0x05
 130:	14 82       	std	Z+4, r1	; 0x04
 132:	36 96       	adiw	r30, 0x06	; 6
 134:	e8 17       	cp	r30, r24
 136:	f9 07       	cpc	r31, r25
 138:	b1 f7       	brne	.-20     	; 0x126 <Timer0_Init+0x8>
 13a:	e5 e0       	ldi	r30, 0x05	; 5
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	21 93       	st	Z+, r18
 146:	e8 17       	cp	r30, r24
 148:	f9 07       	cpc	r31, r25
 14a:	e1 f7       	brne	.-8      	; 0x144 <Timer0_Init+0x26>
 14c:	88 e4       	ldi	r24, 0x48	; 72
 14e:	83 bf       	out	0x33, r24	; 51
 150:	12 be       	out	0x32, r1	; 50
 152:	86 b7       	in	r24, 0x36	; 54
 154:	81 60       	ori	r24, 0x01	; 1
 156:	86 bf       	out	0x36, r24	; 54
 158:	87 b7       	in	r24, 0x37	; 55
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	87 bf       	out	0x37, r24	; 55
 15e:	78 94       	sei
 160:	08 95       	ret

00000162 <__vector_15>:
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	0b b6       	in	r0, 0x3b	; 59
 16e:	0f 92       	push	r0
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	cd e0       	ldi	r28, 0x0D	; 13
 192:	d1 e0       	ldi	r29, 0x01	; 1
 194:	0d e3       	ldi	r16, 0x3D	; 61
 196:	11 e0       	ldi	r17, 0x01	; 1
 198:	88 81       	ld	r24, Y
 19a:	99 81       	ldd	r25, Y+1	; 0x01
 19c:	89 2b       	or	r24, r25
 19e:	81 f0       	breq	.+32     	; 0x1c0 <__vector_15+0x5e>
 1a0:	8c 81       	ldd	r24, Y+4	; 0x04
 1a2:	9d 81       	ldd	r25, Y+5	; 0x05
 1a4:	2a 81       	ldd	r18, Y+2	; 0x02
 1a6:	3b 81       	ldd	r19, Y+3	; 0x03
 1a8:	82 17       	cp	r24, r18
 1aa:	93 07       	cpc	r25, r19
 1ac:	31 f4       	brne	.+12     	; 0x1ba <__vector_15+0x58>
 1ae:	1d 82       	std	Y+5, r1	; 0x05
 1b0:	1c 82       	std	Y+4, r1	; 0x04
 1b2:	e8 81       	ld	r30, Y
 1b4:	f9 81       	ldd	r31, Y+1	; 0x01
 1b6:	09 95       	icall
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <__vector_15+0x5e>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	9d 83       	std	Y+5, r25	; 0x05
 1be:	8c 83       	std	Y+4, r24	; 0x04
 1c0:	26 96       	adiw	r28, 0x06	; 6
 1c2:	c0 17       	cp	r28, r16
 1c4:	d1 07       	cpc	r29, r17
 1c6:	41 f7       	brne	.-48     	; 0x198 <__vector_15+0x36>
 1c8:	80 91 02 01 	lds	r24, 0x0102
 1cc:	90 91 03 01 	lds	r25, 0x0103
 1d0:	9c 01       	movw	r18, r24
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	30 93 03 01 	sts	0x0103, r19
 1da:	20 93 02 01 	sts	0x0102, r18
 1de:	84 36       	cpi	r24, 0x64	; 100
 1e0:	91 05       	cpc	r25, r1
 1e2:	89 f4       	brne	.+34     	; 0x206 <__vector_15+0xa4>
 1e4:	e5 e0       	ldi	r30, 0x05	; 5
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	20 81       	ld	r18, Z
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	2e 3f       	cpi	r18, 0xFE	; 254
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <__vector_15+0x94>
 1f4:	20 83       	st	Z, r18
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	e8 17       	cp	r30, r24
 1fa:	f9 07       	cpc	r31, r25
 1fc:	b9 f7       	brne	.-18     	; 0x1ec <__vector_15+0x8a>
 1fe:	10 92 03 01 	sts	0x0103, r1
 202:	10 92 02 01 	sts	0x0102, r1
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	0f 90       	pop	r0
 228:	0b be       	out	0x3b, r0	; 59
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
 234:	80 91 05 01 	lds	r24, 0x0105
 238:	8f 3f       	cpi	r24, 0xFF	; 255
 23a:	51 f0       	breq	.+20     	; 0x250 <Timer0_AllocateCountdownTimer+0x1c>
 23c:	e6 e0       	ldi	r30, 0x06	; 6
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	82 2f       	mov	r24, r18
 246:	a9 01       	movw	r20, r18
 248:	91 91       	ld	r25, Z+
 24a:	9f 3f       	cpi	r25, 0xFF	; 255
 24c:	51 f4       	brne	.+20     	; 0x262 <Timer0_AllocateCountdownTimer+0x2e>
 24e:	03 c0       	rjmp	.+6      	; 0x256 <Timer0_AllocateCountdownTimer+0x22>
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
 254:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
 256:	fa 01       	movw	r30, r20
 258:	eb 5f       	subi	r30, 0xFB	; 251
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	10 82       	st	Z, r1
		return i+1;
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	08 95       	ret
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
 266:	28 30       	cpi	r18, 0x08	; 8
 268:	31 05       	cpc	r19, r1
 26a:	61 f7       	brne	.-40     	; 0x244 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
}
 26e:	08 95       	ret

00000270 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
 270:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
 276:	ea e6       	ldi	r30, 0x6A	; 106
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
 280:	89 b7       	in	r24, 0x39	; 57
 282:	82 60       	ori	r24, 0x02	; 2
 284:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
 286:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
 288:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
 28a:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
 28c:	d3 df       	rcall	.-90     	; 0x234 <Timer0_AllocateCountdownTimer>
 28e:	80 93 3d 01 	sts	0x013D, r24
 292:	08 95       	ret

00000294 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
 294:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
 296:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
 298:	80 fd       	sbrc	r24, 0
 29a:	15 c0       	rjmp	.+42     	; 0x2c6 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
 29c:	81 fd       	sbrc	r24, 1
 29e:	15 c0       	rjmp	.+42     	; 0x2ca <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
 2a0:	82 fd       	sbrc	r24, 2
 2a2:	15 c0       	rjmp	.+42     	; 0x2ce <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
 2a4:	83 fd       	sbrc	r24, 3
 2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_ADD;
 2a8:	84 fd       	sbrc	r24, 4
 2aa:	15 c0       	rjmp	.+42     	; 0x2d6 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_SUB;
 2ac:	85 fd       	sbrc	r24, 5
 2ae:	15 c0       	rjmp	.+42     	; 0x2da <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
 2b0:	86 fd       	sbrc	r24, 6
 2b2:	15 c0       	rjmp	.+42     	; 0x2de <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
 2b4:	88 23       	and	r24, r24
 2b6:	d4 f4       	brge	.+52     	; 0x2ec <button_interrupt+0x58>
 2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
 2ba:	90 93 00 01 	sts	0x0100, r25
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 04 01 	sts	0x0104, r24
 2c4:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
 2c6:	95 e0       	ldi	r25, 0x05	; 5
 2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_ADD;
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_SUB;
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
 2e2:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
 2e4:	80 91 04 01 	lds	r24, 0x0104
 2e8:	88 23       	and	r24, r24
 2ea:	39 f3       	breq	.-50     	; 0x2ba <button_interrupt+0x26>
 2ec:	08 95       	ret

000002ee <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
cli();	
 314:	f8 94       	cli
button_interrupt();
 316:	be df       	rcall	.-132    	; 0x294 <button_interrupt>
sei();
 318:	78 94       	sei
}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0b be       	out	0x3b, r0	; 59
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <lcd12864_send_data>:
void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
	lcd12864_wait_busy();
}

void lcd12864_send_data(uint8_t data){
 340:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t i;

	for (i=0;i<8;i++){
		if(data & 0x80)
 342:	88 23       	and	r24, r24
 344:	14 f4       	brge	.+4      	; 0x34a <lcd12864_send_data+0xa>
			LCD12864_SID_1;
 346:	1c 9a       	sbi	0x03, 4	; 3
 348:	01 c0       	rjmp	.+2      	; 0x34c <lcd12864_send_data+0xc>
		else
			LCD12864_SID_0;
 34a:	1c 98       	cbi	0x03, 4	; 3
			data<<=1;
 34c:	88 0f       	add	r24, r24
		LCD12864_CLK_H;
 34e:	1b 9a       	sbi	0x03, 3	; 3
		nop();nop();nop();
 350:	00 00       	nop
 352:	00 00       	nop
 354:	00 00       	nop
		LCD12864_CLK_L;	
 356:	1b 98       	cbi	0x03, 3	; 3
 358:	91 50       	subi	r25, 0x01	; 1
}

void lcd12864_send_data(uint8_t data){
	uint8_t i;

	for (i=0;i<8;i++){
 35a:	99 f7       	brne	.-26     	; 0x342 <lcd12864_send_data+0x2>
		nop();nop();nop();
		LCD12864_CLK_L;	
	}

	
}
 35c:	08 95       	ret

0000035e <lcd12864_wait_busy>:

void lcd12864_wait_busy(void){
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	81 3e       	cpi	r24, 0xE1	; 225
 366:	22 e0       	ldi	r18, 0x02	; 2
 368:	92 07       	cpc	r25, r18
 36a:	d9 f7       	brne	.-10     	; 0x362 <lcd12864_wait_busy+0x4>
delay_us(600);
}
 36c:	08 95       	ret

0000036e <lcd12864_send_cmd>:

void lcd12864_send_cmd(uint8_t cmd){
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	LCD12864_ENABLE;
 372:	1e 9a       	sbi	0x03, 6	; 3
	lcd12864_wait_busy();
 374:	f4 df       	rcall	.-24     	; 0x35e <lcd12864_wait_busy>
	lcd12864_send_data(0xf8);
 376:	88 ef       	ldi	r24, 0xF8	; 248
 378:	e3 df       	rcall	.-58     	; 0x340 <lcd12864_send_data>
	lcd12864_send_data(cmd & 0xf0);
 37a:	8c 2f       	mov	r24, r28
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	e0 df       	rcall	.-64     	; 0x340 <lcd12864_send_data>
	lcd12864_send_data(cmd<<4);
 380:	8c 2f       	mov	r24, r28
 382:	82 95       	swap	r24
 384:	80 7f       	andi	r24, 0xF0	; 240
 386:	dc df       	rcall	.-72     	; 0x340 <lcd12864_send_data>
	LCD12864_DISABLE;
 388:	1e 98       	cbi	0x03, 6	; 3
}
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <lcd12864_init>:
#include <string.h>
#include <stdlib.h>


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
 38e:	82 b1       	in	r24, 0x02	; 2
 390:	88 6f       	ori	r24, 0xF8	; 248
 392:	82 b9       	out	0x02, r24	; 2

	LCD12864_RESET;
 394:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
 396:	1f 98       	cbi	0x03, 7	; 3
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	81 15       	cp	r24, r1
 3a0:	20 e3       	ldi	r18, 0x30	; 48
 3a2:	92 07       	cpc	r25, r18
 3a4:	d9 f7       	brne	.-10     	; 0x39c <lcd12864_init+0xe>

	delay_ms(10);
	lcd12864_send_cmd(0x30);
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	e2 df       	rcall	.-60     	; 0x36e <lcd12864_send_cmd>

	lcd12864_send_cmd(0x01);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	e0 df       	rcall	.-64     	; 0x36e <lcd12864_send_cmd>

	lcd12864_send_cmd(0x06);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	de df       	rcall	.-68     	; 0x36e <lcd12864_send_cmd>

	lcd12864_send_cmd(0x0c);
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	dc cf       	rjmp	.-72     	; 0x36e <lcd12864_send_cmd>
 3b6:	08 95       	ret

000003b8 <main>:
{

	
	
	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
 3b8:	5b df       	rcall	.-330    	; 0x270 <buttons_init>
	lcd12864_init();
 3ba:	e9 df       	rcall	.-46     	; 0x38e <lcd12864_init>
	init_IO();
 3bc:	98 de       	rcall	.-720    	; 0xee <init_IO>
	emv_ports_init();
 3be:	84 de       	rcall	.-760    	; 0xc8 <emv_ports_init>
	Timer0_Init();
 3c0:	ae de       	rcall	.-676    	; 0x11e <Timer0_Init>
	draw_main_page();
 3c2:	ac de       	rcall	.-680    	; 0x11c <draw_main_page>
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <main+0xc>

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>

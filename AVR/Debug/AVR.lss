
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a4  00800100  000018e2  00001976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  008004a4  008004a4  00001d1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002389  00000000  00000000  00001faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd5  00000000  00000000  00004333  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003fdd  00000000  00000000  00004f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000055c  00000000  00000000  00008ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010e27  00000000  00000000  00009444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000150b  00000000  00000000  0001a26b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0001b776  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001565  00000000  00000000  0001b946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c7       	rjmp	.+3722   	; 0xec8 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ee       	ldi	r30, 0xE2	; 226
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3a       	cpi	r26, 0xA4	; 164
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a4 ea       	ldi	r26, 0xA4	; 164
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3f       	cpi	r26, 0xF8	; 248
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      ca:	0e 94 77 08 	call	0x10ee	; 0x10ee <buttons_init>
	lcd12864_init();
      ce:	0e 94 82 0a 	call	0x1504	; 0x1504 <lcd12864_init>
	init_IO();
      d2:	19 d2       	rcall	.+1074   	; 0x506 <init_IO>
	emv_ports_init();
      d4:	04 d2       	rcall	.+1032   	; 0x4de <emv_ports_init>
	Timer0_Init();
      d6:	d3 d6       	rcall	.+3494   	; 0xe7e <Timer0_Init>
	ADC_init();
      d8:	71 d1       	rcall	.+738    	; 0x3bc <ADC_init>
	Menu_Init();
      da:	ff d5       	rcall	.+3070   	; 0xcda <Menu_Init>

	while(1){
	Menu_Poll();
      dc:	2a d6       	rcall	.+3156   	; 0xd32 <Menu_Poll>
      de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x12>

000000e0 <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <Act_Update_Main+0x12>
      f2:	00 d0       	rcall	.+0      	; 0xf4 <Act_Update_Main+0x14>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = PD_Mode;
      f8:	10 91 20 03 	lds	r17, 0x0320
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 91 ac 04 	lds	r25, 0x04AC
     102:	91 11       	cpse	r25, r1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	80 93 ac 04 	sts	0x04AC, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	int pressure_diff = (int)ADC_read(PRESSURE);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	70 d1       	rcall	.+736    	; 0x3ee <ADC_read>
     10e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fixsfsi>
     112:	6b 01       	movw	r12, r22
     114:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     116:	4a e0       	ldi	r20, 0x0A	; 10
     118:	be 01       	movw	r22, r28
     11a:	6f 5f       	subi	r22, 0xFF	; 255
     11c:	7f 4f       	sbci	r23, 0xFF	; 255
     11e:	c6 01       	movw	r24, r12
     120:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__itoa_ncheck>
	itoa(pressure_diff,pdstr,10);
	lcd12864_set_pos(0,1);
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd12864_set_pos>
	switch(mode){
     12c:	12 30       	cpi	r17, 0x02	; 2
     12e:	49 f0       	breq	.+18     	; 0x142 <Act_Update_Main+0x62>
     130:	13 30       	cpi	r17, 0x03	; 3
     132:	61 f0       	breq	.+24     	; 0x14c <Act_Update_Main+0x6c>
     134:	11 30       	cpi	r17, 0x01	; 1
     136:	79 f4       	brne	.+30     	; 0x156 <Act_Update_Main+0x76>
		case 1:
		lcd12864_write_str(MODE1);
     138:	84 e3       	ldi	r24, 0x34	; 52
     13a:	93 e0       	ldi	r25, 0x03	; 3
     13c:	0e 94 49 09 	call	0x1292	; 0x1292 <lcd12864_write_str>
		break;
     140:	0e c0       	rjmp	.+28     	; 0x15e <Act_Update_Main+0x7e>
		case 2:
		lcd12864_write_str(MODE2);
     142:	88 e3       	ldi	r24, 0x38	; 56
     144:	93 e0       	ldi	r25, 0x03	; 3
     146:	0e 94 49 09 	call	0x1292	; 0x1292 <lcd12864_write_str>
		break;
     14a:	09 c0       	rjmp	.+18     	; 0x15e <Act_Update_Main+0x7e>
		case 3:
		lcd12864_write_str(MODE3);
     14c:	8c e3       	ldi	r24, 0x3C	; 60
     14e:	93 e0       	ldi	r25, 0x03	; 3
     150:	0e 94 49 09 	call	0x1292	; 0x1292 <lcd12864_write_str>
		break;
     154:	04 c0       	rjmp	.+8      	; 0x15e <Act_Update_Main+0x7e>
		default:
		lcd12864_write_str(MODE0);
     156:	80 e4       	ldi	r24, 0x40	; 64
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	0e 94 49 09 	call	0x1292	; 0x1292 <lcd12864_write_str>
		break;
	}
	
	lcd12864_set_pos(4,1);
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd12864_set_pos>
	if(Blowing_State){
     166:	80 91 ad 04 	lds	r24, 0x04AD
     16a:	88 23       	and	r24, r24
     16c:	61 f0       	breq	.+24     	; 0x186 <Act_Update_Main+0xa6>
		if(blink_factor)
     16e:	80 91 ac 04 	lds	r24, 0x04AC
     172:	88 23       	and	r24, r24
     174:	21 f0       	breq	.+8      	; 0x17e <Act_Update_Main+0x9e>
		lcd12864_write_char(0x0f);
     176:	8f e0       	ldi	r24, 0x0F	; 15
     178:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
     17c:	0f c0       	rjmp	.+30     	; 0x19c <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     17e:	89 e0       	ldi	r24, 0x09	; 9
     180:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
     184:	0b c0       	rjmp	.+22     	; 0x19c <Act_Update_Main+0xbc>
	}
	else{
		if(blink_factor)
     186:	80 91 ac 04 	lds	r24, 0x04AC
     18a:	88 23       	and	r24, r24
     18c:	21 f0       	breq	.+8      	; 0x196 <Act_Update_Main+0xb6>
		lcd12864_write_char(0x07);
     18e:	87 e0       	ldi	r24, 0x07	; 7
     190:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
     194:	03 c0       	rjmp	.+6      	; 0x19c <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd12864_set_pos>
	if(Alarm_State){
     1a4:	80 91 ae 04 	lds	r24, 0x04AE
     1a8:	88 23       	and	r24, r24
     1aa:	61 f0       	breq	.+24     	; 0x1c4 <Act_Update_Main+0xe4>
		if(blink_factor)
     1ac:	80 91 ac 04 	lds	r24, 0x04AC
     1b0:	88 23       	and	r24, r24
     1b2:	21 f0       	breq	.+8      	; 0x1bc <Act_Update_Main+0xdc>
			lcd12864_write_char(0x21);
     1b4:	81 e2       	ldi	r24, 0x21	; 33
     1b6:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <Act_Update_Main+0xea>
		else
			lcd12864_write_char(' ');
     1bc:	80 e2       	ldi	r24, 0x20	; 32
     1be:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <Act_Update_Main+0xea>
	}
	else{
		lcd12864_write_char(0x02);
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	0e 94 47 09 	call	0x128e	; 0x128e <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	85 e0       	ldi	r24, 0x05	; 5
     1ce:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd12864_set_pos>
	lcd12864_write_str(pdstr);
     1d2:	ce 01       	movw	r24, r28
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	0e 94 49 09 	call	0x1292	; 0x1292 <lcd12864_write_str>
	lcd12864_set_pos(3,3);
     1da:	63 e0       	ldi	r22, 0x03	; 3
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd12864_set_pos>
	s++;
     1e2:	80 91 aa 04 	lds	r24, 0x04AA
     1e6:	90 91 ab 04 	lds	r25, 0x04AB
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 ab 04 	sts	0x04AB, r25
     1f0:	80 93 aa 04 	sts	0x04AA, r24
	if(s==60){
     1f4:	cc 97       	sbiw	r24, 0x3c	; 60
     1f6:	69 f4       	brne	.+26     	; 0x212 <Act_Update_Main+0x132>
		m++; s=0;
     1f8:	80 91 a8 04 	lds	r24, 0x04A8
     1fc:	90 91 a9 04 	lds	r25, 0x04A9
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	90 93 a9 04 	sts	0x04A9, r25
     206:	80 93 a8 04 	sts	0x04A8, r24
     20a:	10 92 ab 04 	sts	0x04AB, r1
     20e:	10 92 aa 04 	sts	0x04AA, r1
	}
	if(m==60){
     212:	80 91 a8 04 	lds	r24, 0x04A8
     216:	90 91 a9 04 	lds	r25, 0x04A9
     21a:	cc 97       	sbiw	r24, 0x3c	; 60
     21c:	69 f4       	brne	.+26     	; 0x238 <Act_Update_Main+0x158>
		hours++; m=0;
     21e:	80 91 a6 04 	lds	r24, 0x04A6
     222:	90 91 a7 04 	lds	r25, 0x04A7
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	90 93 a7 04 	sts	0x04A7, r25
     22c:	80 93 a6 04 	sts	0x04A6, r24
     230:	10 92 a9 04 	sts	0x04A9, r1
     234:	10 92 a8 04 	sts	0x04A8, r1
	}
	if(hours == 24){
     238:	40 91 a6 04 	lds	r20, 0x04A6
     23c:	50 91 a7 04 	lds	r21, 0x04A7
     240:	48 31       	cpi	r20, 0x18	; 24
     242:	51 05       	cpc	r21, r1
     244:	49 f4       	brne	.+18     	; 0x258 <Act_Update_Main+0x178>
		days++;
     246:	80 91 a4 04 	lds	r24, 0x04A4
     24a:	90 91 a5 04 	lds	r25, 0x04A5
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 a5 04 	sts	0x04A5, r25
     254:	80 93 a4 04 	sts	0x04A4, r24
	}
	time[7]=m%10+'0';
     258:	00 91 a8 04 	lds	r16, 0x04A8
     25c:	10 91 a9 04 	lds	r17, 0x04A9
     260:	e4 e4       	ldi	r30, 0x44	; 68
     262:	f3 e0       	ldi	r31, 0x03	; 3
     264:	98 01       	movw	r18, r16
     266:	ad ec       	ldi	r26, 0xCD	; 205
     268:	bc ec       	ldi	r27, 0xCC	; 204
     26a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     26e:	96 95       	lsr	r25
     270:	87 95       	ror	r24
     272:	96 95       	lsr	r25
     274:	87 95       	ror	r24
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	9c 01       	movw	r18, r24
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	82 0f       	add	r24, r18
     28e:	93 1f       	adc	r25, r19
     290:	98 01       	movw	r18, r16
     292:	28 1b       	sub	r18, r24
     294:	39 0b       	sbc	r19, r25
     296:	c9 01       	movw	r24, r18
     298:	80 5d       	subi	r24, 0xD0	; 208
     29a:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     29c:	98 01       	movw	r18, r16
     29e:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
     2ae:	80 5d       	subi	r24, 0xD0	; 208
     2b0:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     2b2:	9a 01       	movw	r18, r20
     2b4:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     2b8:	96 95       	lsr	r25
     2ba:	87 95       	ror	r24
     2bc:	96 95       	lsr	r25
     2be:	87 95       	ror	r24
     2c0:	96 95       	lsr	r25
     2c2:	87 95       	ror	r24
     2c4:	9c 01       	movw	r18, r24
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	82 0f       	add	r24, r18
     2d8:	93 1f       	adc	r25, r19
     2da:	9a 01       	movw	r18, r20
     2dc:	28 1b       	sub	r18, r24
     2de:	39 0b       	sbc	r19, r25
     2e0:	c9 01       	movw	r24, r18
     2e2:	80 5d       	subi	r24, 0xD0	; 208
     2e4:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     2e6:	9a 01       	movw	r18, r20
     2e8:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     2ec:	96 95       	lsr	r25
     2ee:	87 95       	ror	r24
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	80 5d       	subi	r24, 0xD0	; 208
     2fa:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     2fc:	40 91 a4 04 	lds	r20, 0x04A4
     300:	50 91 a5 04 	lds	r21, 0x04A5
     304:	9a 01       	movw	r18, r20
     306:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	96 95       	lsr	r25
     314:	87 95       	ror	r24
     316:	9c 01       	movw	r18, r24
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	9a 01       	movw	r18, r20
     32e:	28 1b       	sub	r18, r24
     330:	39 0b       	sbc	r19, r25
     332:	c9 01       	movw	r24, r18
     334:	80 5d       	subi	r24, 0xD0	; 208
     336:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     338:	9a 01       	movw	r18, r20
     33a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__umulhisi3>
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     34e:	cf 01       	movw	r24, r30
     350:	a0 d7       	rcall	.+3904   	; 0x1292 <lcd12864_write_str>
	
	
	if(pressure_diff > BlowPresureUpperLimit){
     352:	80 91 1c 03 	lds	r24, 0x031C
     356:	90 91 1d 03 	lds	r25, 0x031D
     35a:	8c 15       	cp	r24, r12
     35c:	9d 05       	cpc	r25, r13
     35e:	28 f4       	brcc	.+10     	; 0x36a <Act_Update_Main+0x28a>
		Alarm_State = 1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 ae 04 	sts	0x04AE, r24
		Alarm(1);
     366:	e6 d0       	rcall	.+460    	; 0x534 <Alarm>
     368:	0b c0       	rjmp	.+22     	; 0x380 <Act_Update_Main+0x2a0>
	}
	else if(pressure_diff < BlowPresureLowerLimit){
     36a:	80 91 1e 03 	lds	r24, 0x031E
     36e:	90 91 1f 03 	lds	r25, 0x031F
     372:	c8 16       	cp	r12, r24
     374:	d9 06       	cpc	r13, r25
     376:	20 f4       	brcc	.+8      	; 0x380 <Act_Update_Main+0x2a0>
		Alarm_State=0;
     378:	10 92 ae 04 	sts	0x04AE, r1
		Alarm(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	da d0       	rcall	.+436    	; 0x534 <Alarm>
	}


}
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <Act_pressure_setting1_display>:

void Act_pressure_setting1_display(void){
	lcd12864_set_pos(6,3);
     39a:	63 e0       	ldi	r22, 0x03	; 3
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	5e d7       	rcall	.+3772   	; 0x125c <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureLowerLimit);
     3a0:	80 91 1e 03 	lds	r24, 0x031E
     3a4:	90 91 1f 03 	lds	r25, 0x031F
     3a8:	88 d7       	rcall	.+3856   	; 0x12ba <lcd12864_write_int>
	lcd12864_set_pos(6,2);
     3aa:	62 e0       	ldi	r22, 0x02	; 2
     3ac:	86 e0       	ldi	r24, 0x06	; 6
     3ae:	56 d7       	rcall	.+3756   	; 0x125c <lcd12864_set_pos>
	lcd12864_write_int(BlowPresureUpperLimit);
     3b0:	80 91 1c 03 	lds	r24, 0x031C
     3b4:	90 91 1d 03 	lds	r25, 0x031D
     3b8:	80 c7       	rjmp	.+3840   	; 0x12ba <lcd12864_write_int>
     3ba:	08 95       	ret

000003bc <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     3bc:	e1 e6       	ldi	r30, 0x61	; 97
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8c 7f       	andi	r24, 0xFC	; 252
     3c4:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     3c6:	86 e8       	ldi	r24, 0x86	; 134
     3c8:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     3ce:	35 98       	cbi	0x06, 5	; 6
     3d0:	08 95       	ret

000003d2 <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     3d2:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     3d4:	34 9b       	sbis	0x06, 4	; 6
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d8:	86 ef       	ldi	r24, 0xF6	; 246
     3da:	8a 95       	dec	r24
     3dc:	f1 f7       	brne	.-4      	; 0x3da <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     3de:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     3e0:	85 b1       	in	r24, 0x05	; 5
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	98 2f       	mov	r25, r24
     3e6:	88 27       	eor	r24, r24

	return result;	
}
     3e8:	82 0f       	add	r24, r18
     3ea:	91 1d       	adc	r25, r1
     3ec:	08 95       	ret

000003ee <ADC_read>:

float ADC_read(uint8_t target){
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     3f8:	83 30       	cpi	r24, 0x03	; 3
     3fa:	89 f0       	breq	.+34     	; 0x41e <ADC_read+0x30>
     3fc:	28 f4       	brcc	.+10     	; 0x408 <ADC_read+0x1a>
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	41 f0       	breq	.+16     	; 0x412 <ADC_read+0x24>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	49 f0       	breq	.+18     	; 0x418 <ADC_read+0x2a>
     406:	37 c0       	rjmp	.+110    	; 0x476 <ADC_read+0x88>
     408:	84 30       	cpi	r24, 0x04	; 4
     40a:	61 f0       	breq	.+24     	; 0x424 <ADC_read+0x36>
     40c:	85 30       	cpi	r24, 0x05	; 5
     40e:	69 f0       	breq	.+26     	; 0x42a <ADC_read+0x3c>
     410:	32 c0       	rjmp	.+100    	; 0x476 <ADC_read+0x88>
		case PRESSURE:
			ADMUX = 0x10;
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	87 b9       	out	0x07, r24	; 7
			break;
     416:	2f c0       	rjmp	.+94     	; 0x476 <ADC_read+0x88>
		case EMV:
			ADMUX = 0b00000100;
     418:	84 e0       	ldi	r24, 0x04	; 4
     41a:	87 b9       	out	0x07, r24	; 7
			break;
     41c:	2c c0       	rjmp	.+88     	; 0x476 <ADC_read+0x88>
		case VIN:
			ADMUX = 0b00000101;
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	87 b9       	out	0x07, r24	; 7
			break;
     422:	29 c0       	rjmp	.+82     	; 0x476 <ADC_read+0x88>
		case VPP:
			ADMUX = 0b00000110;
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	87 b9       	out	0x07, r24	; 7
			break;
     428:	26 c0       	rjmp	.+76     	; 0x476 <ADC_read+0x88>
		case VCC:
			ADMUX = 0b00000111;
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	87 b9       	out	0x07, r24	; 7
			break;
     42e:	23 c0       	rjmp	.+70     	; 0x476 <ADC_read+0x88>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     430:	d0 df       	rcall	.-96     	; 0x3d2 <ADC_readonce>
     432:	bc 01       	movw	r22, r24
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
     43c:	9b 01       	movw	r18, r22
     43e:	ac 01       	movw	r20, r24
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	0e 94 a7 0a 	call	0x154e	; 0x154e <__addsf3>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
     44c:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     44e:	81 f7       	brne	.-32     	; 0x430 <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	5e e3       	ldi	r21, 0x3E	; 62
     458:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__mulsf3>
	buff/=1024;
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e8       	ldi	r20, 0x80	; 128
     462:	5a e3       	ldi	r21, 0x3A	; 58
     464:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__mulsf3>
	buff*=SCALE;
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	4a e7       	ldi	r20, 0x7A	; 122
     46e:	54 e4       	ldi	r21, 0x44	; 68
     470:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__mulsf3>
     474:	05 c0       	rjmp	.+10     	; 0x480 <ADC_read+0x92>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     476:	c8 e0       	ldi	r28, 0x08	; 8
     478:	c1 2c       	mov	r12, r1
     47a:	d1 2c       	mov	r13, r1
     47c:	76 01       	movw	r14, r12
     47e:	d8 cf       	rjmp	.-80     	; 0x430 <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     480:	cf 91       	pop	r28
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <emv_refresh>:
	
}

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;
     48c:	80 91 00 01 	lds	r24, 0x0100
     490:	90 91 01 01 	lds	r25, 0x0101
     494:	20 e1       	ldi	r18, 0x10	; 16
	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
		else DATA_LOW;
		buffer <<=1;
		_delay_us(10);
		SCK_HIGH; 
     496:	e5 e6       	ldi	r30, 0x65	; 101
     498:	f0 e0       	ldi	r31, 0x00	; 0
void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
     49a:	99 23       	and	r25, r25
     49c:	14 f4       	brge	.+4      	; 0x4a2 <emv_refresh+0x16>
     49e:	c5 9a       	sbi	0x18, 5	; 24
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <emv_refresh+0x18>
		else DATA_LOW;
     4a2:	c5 98       	cbi	0x18, 5	; 24
		buffer <<=1;
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	38 e1       	ldi	r19, 0x18	; 24
     4aa:	3a 95       	dec	r19
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <emv_refresh+0x1e>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <emv_refresh+0x24>
		_delay_us(10);
		SCK_HIGH; 
     4b0:	30 81       	ld	r19, Z
     4b2:	38 60       	ori	r19, 0x08	; 8
     4b4:	30 83       	st	Z, r19
     4b6:	38 e1       	ldi	r19, 0x18	; 24
     4b8:	3a 95       	dec	r19
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <emv_refresh+0x2c>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <emv_refresh+0x32>
		_delay_us(10);
		SCK_LOW;
     4be:	30 81       	ld	r19, Z
     4c0:	37 7f       	andi	r19, 0xF7	; 247
     4c2:	30 83       	st	Z, r19
     4c4:	38 e1       	ldi	r19, 0x18	; 24
     4c6:	3a 95       	dec	r19
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <emv_refresh+0x3a>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <emv_refresh+0x40>
     4cc:	21 50       	subi	r18, 0x01	; 1

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
     4ce:	29 f7       	brne	.-54     	; 0x49a <emv_refresh+0xe>
		SCK_HIGH; 
		_delay_us(10);
		SCK_LOW;
		_delay_us(10);
	}
	RCK_HIGH;
     4d0:	c7 9a       	sbi	0x18, 7	; 24
     4d2:	88 e1       	ldi	r24, 0x18	; 24
     4d4:	8a 95       	dec	r24
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <emv_refresh+0x48>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <emv_refresh+0x4e>
	_delay_us(10);
	RCK_LOW;
     4da:	c7 98       	cbi	0x18, 7	; 24
     4dc:	08 95       	ret

000004de <emv_ports_init>:
uint16_t emv_control_word = 0xffff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
     4de:	87 b3       	in	r24, 0x17	; 23
     4e0:	80 6e       	ori	r24, 0xE0	; 224
     4e2:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
     4e4:	e4 e6       	ldi	r30, 0x64	; 100
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	88 61       	ori	r24, 0x18	; 24
     4ec:	80 83       	st	Z, r24
	SCK_LOW;
     4ee:	e5 e6       	ldi	r30, 0x65	; 101
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	87 7f       	andi	r24, 0xF7	; 247
     4f6:	80 83       	st	Z, r24
	RCK_LOW;
     4f8:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
     4fa:	80 81       	ld	r24, Z
     4fc:	80 61       	ori	r24, 0x10	; 16
     4fe:	80 83       	st	Z, r24
	OEn_LOW;
     500:	c6 98       	cbi	0x18, 6	; 24

	emv_refresh();
     502:	c4 cf       	rjmp	.-120    	; 0x48c <emv_refresh>
     504:	08 95       	ret

00000506 <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
     506:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
     508:	e1 e6       	ldi	r30, 0x61	; 97
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	80 83       	st	Z, r24
	DDRG |=_BV(0);
     512:	e4 e6       	ldi	r30, 0x64	; 100
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
     51c:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
     51e:	e2 e6       	ldi	r30, 0x62	; 98
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 60       	ori	r24, 0x08	; 8
     526:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
     528:	e5 e6       	ldi	r30, 0x65	; 101
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	80 83       	st	Z, r24
     532:	08 95       	ret

00000534 <Alarm>:
	
}

void Alarm(bool state){
	if(state==ON){
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <Alarm+0x8>
		PORTB &=~_BV(0);
     538:	c0 98       	cbi	0x18, 0	; 24
     53a:	08 95       	ret
		//PORTG |=_BV(0);
	}
	else{
		PORTB |= _BV(0);
     53c:	c0 9a       	sbi	0x18, 0	; 24
     53e:	08 95       	ret

00000540 <DrawScreen>:
uint8_t Get_Workmode(void){
	return PD_Mode;
}

	void DrawScreen(void){
		lcd12864_clear();
     540:	83 d6       	rcall	.+3334   	; 0x1248 <lcd12864_clear>
		lcd12864_set_pos(0,1);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	8a d6       	rcall	.+3348   	; 0x125c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     548:	80 91 b6 04 	lds	r24, 0x04B6
     54c:	90 91 b7 04 	lds	r25, 0x04B7
     550:	a0 d6       	rcall	.+3392   	; 0x1292 <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     552:	62 e0       	ldi	r22, 0x02	; 2
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	82 d6       	rcall	.+3332   	; 0x125c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     558:	80 91 b8 04 	lds	r24, 0x04B8
     55c:	90 91 b9 04 	lds	r25, 0x04B9
     560:	98 d6       	rcall	.+3376   	; 0x1292 <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	7a d6       	rcall	.+3316   	; 0x125c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     568:	80 91 ba 04 	lds	r24, 0x04BA
     56c:	90 91 bb 04 	lds	r25, 0x04BB
     570:	90 d6       	rcall	.+3360   	; 0x1292 <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     572:	64 e0       	ldi	r22, 0x04	; 4
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	72 d6       	rcall	.+3300   	; 0x125c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     578:	80 91 bc 04 	lds	r24, 0x04BC
     57c:	90 91 bd 04 	lds	r25, 0x04BD
     580:	88 d6       	rcall	.+3344   	; 0x1292 <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
     582:	80 91 be 04 	lds	r24, 0x04BE
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	51 f0       	breq	.+20     	; 0x59e <DrawScreen+0x5e>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	71 f0       	breq	.+28     	; 0x5aa <DrawScreen+0x6a>
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	89 f4       	brne	.+34     	; 0x5b4 <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	62 d6       	rcall	.+3268   	; 0x125c <lcd12864_set_pos>
				lcd12864_write_char('*');
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	79 d6       	rcall	.+3314   	; 0x128e <lcd12864_write_char>
				break;
     59c:	0b c0       	rjmp	.+22     	; 0x5b4 <DrawScreen+0x74>
			case 2:
				lcd12864_set_pos(0,2);
     59e:	62 e0       	ldi	r22, 0x02	; 2
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	5c d6       	rcall	.+3256   	; 0x125c <lcd12864_set_pos>
				lcd12864_write_char('*');
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	73 d6       	rcall	.+3302   	; 0x128e <lcd12864_write_char>
				break;
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <DrawScreen+0x74>
			case 3:
				lcd12864_set_pos(0,3);
     5aa:	63 e0       	ldi	r22, 0x03	; 3
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	56 d6       	rcall	.+3244   	; 0x125c <lcd12864_set_pos>
				lcd12864_write_char('*');
     5b0:	8a e2       	ldi	r24, 0x2A	; 42
     5b2:	6d d6       	rcall	.+3290   	; 0x128e <lcd12864_write_char>
				break;
			default:
				break;	
		}
		lcd12864_send_cmd(0x36);
     5b4:	86 e3       	ldi	r24, 0x36	; 54
     5b6:	38 d6       	rcall	.+3184   	; 0x1228 <lcd12864_send_cmd>
		lcd12864_send_cmd(0x30);
     5b8:	80 e3       	ldi	r24, 0x30	; 48
     5ba:	36 c6       	rjmp	.+3180   	; 0x1228 <lcd12864_send_cmd>
     5bc:	08 95       	ret

000005be <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     5be:	20 91 02 01 	lds	r18, 0x0102
     5c2:	30 91 03 01 	lds	r19, 0x0103
     5c6:	28 17       	cp	r18, r24
     5c8:	39 07       	cpc	r19, r25
     5ca:	59 f0       	breq	.+22     	; 0x5e2 <FindState+0x24>
     5cc:	ea e1       	ldi	r30, 0x1A	; 26
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	b9 01       	movw	r22, r18
     5d6:	40 81       	ld	r20, Z
     5d8:	51 81       	ldd	r21, Z+1	; 0x01
     5da:	48 17       	cp	r20, r24
     5dc:	59 07       	cpc	r21, r25
     5de:	91 f4       	brne	.+36     	; 0x604 <FindState+0x46>
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <FindState+0x28>
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     5e6:	cb 01       	movw	r24, r22
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	68 0f       	add	r22, r24
     5ee:	79 1f       	adc	r23, r25
     5f0:	cb 01       	movw	r24, r22
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	8e 5f       	subi	r24, 0xFE	; 254
     600:	9e 4f       	sbci	r25, 0xFE	; 254
     602:	08 95       	ret
     604:	2f 5f       	subi	r18, 0xFF	; 255
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	78 96       	adiw	r30, 0x18	; 24
		lcd12864_send_cmd(0x30);
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     60a:	24 31       	cpi	r18, 0x14	; 20
     60c:	31 05       	cpc	r19, r1
     60e:	11 f7       	brne	.-60     	; 0x5d4 <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     614:	08 95       	ret

00000616 <State_Update>:
		lcd12864_SetWhite(6,4,4,0);
		lcd12864_SetWhite(12,4,4,0);
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     616:	e0 91 b1 04 	lds	r30, 0x04B1
     61a:	f0 91 b2 04 	lds	r31, 0x04B2
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	20 e2       	ldi	r18, 0x20	; 32
     626:	92 07       	cpc	r25, r18
     628:	09 f4       	brne	.+2      	; 0x62c <State_Update+0x16>
     62a:	a4 c1       	rjmp	.+840    	; 0x974 <State_Update+0x35e>
     62c:	78 f5       	brcc	.+94     	; 0x68c <State_Update+0x76>
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	20 e1       	ldi	r18, 0x10	; 16
     632:	92 07       	cpc	r25, r18
     634:	09 f4       	brne	.+2      	; 0x638 <State_Update+0x22>
     636:	ea c0       	rjmp	.+468    	; 0x80c <State_Update+0x1f6>
     638:	a0 f4       	brcc	.+40     	; 0x662 <State_Update+0x4c>
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	20 e1       	ldi	r18, 0x10	; 16
     63e:	92 07       	cpc	r25, r18
     640:	09 f4       	brne	.+2      	; 0x644 <State_Update+0x2e>
     642:	78 c0       	rjmp	.+240    	; 0x734 <State_Update+0x11e>
     644:	20 f4       	brcc	.+8      	; 0x64e <State_Update+0x38>
     646:	89 2b       	or	r24, r25
     648:	09 f4       	brne	.+2      	; 0x64c <State_Update+0x36>
     64a:	51 c0       	rjmp	.+162    	; 0x6ee <State_Update+0xd8>
     64c:	08 95       	ret
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	20 e1       	ldi	r18, 0x10	; 16
     652:	92 07       	cpc	r25, r18
     654:	09 f4       	brne	.+2      	; 0x658 <State_Update+0x42>
     656:	92 c0       	rjmp	.+292    	; 0x77c <State_Update+0x166>
     658:	83 30       	cpi	r24, 0x03	; 3
     65a:	90 41       	sbci	r25, 0x10	; 16
     65c:	09 f4       	brne	.+2      	; 0x660 <State_Update+0x4a>
     65e:	b2 c0       	rjmp	.+356    	; 0x7c4 <State_Update+0x1ae>
     660:	08 95       	ret
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	20 e2       	ldi	r18, 0x20	; 32
     666:	92 07       	cpc	r25, r18
     668:	09 f4       	brne	.+2      	; 0x66c <State_Update+0x56>
     66a:	18 c1       	rjmp	.+560    	; 0x89c <State_Update+0x286>
     66c:	28 f4       	brcc	.+10     	; 0x678 <State_Update+0x62>
     66e:	85 30       	cpi	r24, 0x05	; 5
     670:	90 41       	sbci	r25, 0x10	; 16
     672:	09 f4       	brne	.+2      	; 0x676 <State_Update+0x60>
     674:	ef c0       	rjmp	.+478    	; 0x854 <State_Update+0x23e>
     676:	08 95       	ret
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	20 e2       	ldi	r18, 0x20	; 32
     67c:	92 07       	cpc	r25, r18
     67e:	09 f4       	brne	.+2      	; 0x682 <State_Update+0x6c>
     680:	31 c1       	rjmp	.+610    	; 0x8e4 <State_Update+0x2ce>
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	90 42       	sbci	r25, 0x20	; 32
     686:	09 f4       	brne	.+2      	; 0x68a <State_Update+0x74>
     688:	51 c1       	rjmp	.+674    	; 0x92c <State_Update+0x316>
     68a:	08 95       	ret
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	20 e3       	ldi	r18, 0x30	; 48
     690:	92 07       	cpc	r25, r18
     692:	09 f4       	brne	.+2      	; 0x696 <State_Update+0x80>
     694:	23 c2       	rjmp	.+1094   	; 0xadc <State_Update+0x4c6>
     696:	88 f4       	brcc	.+34     	; 0x6ba <State_Update+0xa4>
     698:	86 30       	cpi	r24, 0x06	; 6
     69a:	20 e2       	ldi	r18, 0x20	; 32
     69c:	92 07       	cpc	r25, r18
     69e:	09 f4       	brne	.+2      	; 0x6a2 <State_Update+0x8c>
     6a0:	b1 c1       	rjmp	.+866    	; 0xa04 <State_Update+0x3ee>
     6a2:	08 f4       	brcc	.+2      	; 0x6a6 <State_Update+0x90>
     6a4:	8b c1       	rjmp	.+790    	; 0x9bc <State_Update+0x3a6>
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	20 e3       	ldi	r18, 0x30	; 48
     6aa:	92 07       	cpc	r25, r18
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <State_Update+0x9a>
     6ae:	ce c1       	rjmp	.+924    	; 0xa4c <State_Update+0x436>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	90 43       	sbci	r25, 0x30	; 48
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <State_Update+0xa2>
     6b6:	ee c1       	rjmp	.+988    	; 0xa94 <State_Update+0x47e>
     6b8:	08 95       	ret
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	21 e3       	ldi	r18, 0x31	; 49
     6be:	92 07       	cpc	r25, r18
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <State_Update+0xae>
     6c2:	78 c2       	rjmp	.+1264   	; 0xbb4 <State_Update+0x59e>
     6c4:	50 f4       	brcc	.+20     	; 0x6da <State_Update+0xc4>
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	20 e3       	ldi	r18, 0x30	; 48
     6ca:	92 07       	cpc	r25, r18
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <State_Update+0xba>
     6ce:	2a c2       	rjmp	.+1108   	; 0xb24 <State_Update+0x50e>
     6d0:	85 30       	cpi	r24, 0x05	; 5
     6d2:	90 43       	sbci	r25, 0x30	; 48
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <State_Update+0xc2>
     6d6:	4a c2       	rjmp	.+1172   	; 0xb6c <State_Update+0x556>
     6d8:	08 95       	ret
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	21 e3       	ldi	r18, 0x31	; 49
     6de:	92 07       	cpc	r25, r18
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <State_Update+0xce>
     6e2:	99 c2       	rjmp	.+1330   	; 0xc16 <State_Update+0x600>
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 43       	sbci	r25, 0x31	; 49
     6e8:	09 f4       	brne	.+2      	; 0x6ec <State_Update+0xd6>
     6ea:	c6 c2       	rjmp	.+1420   	; 0xc78 <State_Update+0x662>
     6ec:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     6ee:	80 91 e2 02 	lds	r24, 0x02E2
     6f2:	90 91 e3 02 	lds	r25, 0x02E3
     6f6:	90 93 b7 04 	sts	0x04B7, r25
     6fa:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     6fe:	80 91 e4 02 	lds	r24, 0x02E4
     702:	90 91 e5 02 	lds	r25, 0x02E5
     706:	90 93 b9 04 	sts	0x04B9, r25
     70a:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     70e:	80 91 e6 02 	lds	r24, 0x02E6
     712:	90 91 e7 02 	lds	r25, 0x02E7
     716:	90 93 bb 04 	sts	0x04BB, r25
     71a:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     71e:	80 91 e8 02 	lds	r24, 0x02E8
     722:	90 91 e9 02 	lds	r25, 0x02E9
     726:	90 93 bd 04 	sts	0x04BD, r25
     72a:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 0;
     72e:	10 92 be 04 	sts	0x04BE, r1
				break;
     732:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     734:	80 91 ec 02 	lds	r24, 0x02EC
     738:	90 91 ed 02 	lds	r25, 0x02ED
     73c:	90 93 b7 04 	sts	0x04B7, r25
     740:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     744:	80 91 ee 02 	lds	r24, 0x02EE
     748:	90 91 ef 02 	lds	r25, 0x02EF
     74c:	90 93 b9 04 	sts	0x04B9, r25
     750:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     754:	80 91 f0 02 	lds	r24, 0x02F0
     758:	90 91 f1 02 	lds	r25, 0x02F1
     75c:	90 93 bb 04 	sts	0x04BB, r25
     760:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     764:	80 91 1a 03 	lds	r24, 0x031A
     768:	90 91 1b 03 	lds	r25, 0x031B
     76c:	90 93 bd 04 	sts	0x04BD, r25
     770:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 be 04 	sts	0x04BE, r24
				break;
     77a:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     77c:	80 91 ec 02 	lds	r24, 0x02EC
     780:	90 91 ed 02 	lds	r25, 0x02ED
     784:	90 93 b7 04 	sts	0x04B7, r25
     788:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     78c:	80 91 ee 02 	lds	r24, 0x02EE
     790:	90 91 ef 02 	lds	r25, 0x02EF
     794:	90 93 b9 04 	sts	0x04B9, r25
     798:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     79c:	80 91 f0 02 	lds	r24, 0x02F0
     7a0:	90 91 f1 02 	lds	r25, 0x02F1
     7a4:	90 93 bb 04 	sts	0x04BB, r25
     7a8:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7ac:	80 91 1a 03 	lds	r24, 0x031A
     7b0:	90 91 1b 03 	lds	r25, 0x031B
     7b4:	90 93 bd 04 	sts	0x04BD, r25
     7b8:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	80 93 be 04 	sts	0x04BE, r24
				break;
     7c2:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     7c4:	80 91 ec 02 	lds	r24, 0x02EC
     7c8:	90 91 ed 02 	lds	r25, 0x02ED
     7cc:	90 93 b7 04 	sts	0x04B7, r25
     7d0:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     7d4:	80 91 ee 02 	lds	r24, 0x02EE
     7d8:	90 91 ef 02 	lds	r25, 0x02EF
     7dc:	90 93 b9 04 	sts	0x04B9, r25
     7e0:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     7e4:	80 91 f0 02 	lds	r24, 0x02F0
     7e8:	90 91 f1 02 	lds	r25, 0x02F1
     7ec:	90 93 bb 04 	sts	0x04BB, r25
     7f0:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7f4:	80 91 1a 03 	lds	r24, 0x031A
     7f8:	90 91 1b 03 	lds	r25, 0x031B
     7fc:	90 93 bd 04 	sts	0x04BD, r25
     800:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 3;
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	80 93 be 04 	sts	0x04BE, r24
				break;
     80a:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     80c:	80 91 f2 02 	lds	r24, 0x02F2
     810:	90 91 f3 02 	lds	r25, 0x02F3
     814:	90 93 b7 04 	sts	0x04B7, r25
     818:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     81c:	80 91 f4 02 	lds	r24, 0x02F4
     820:	90 91 f5 02 	lds	r25, 0x02F5
     824:	90 93 b9 04 	sts	0x04B9, r25
     828:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     82c:	80 91 e2 02 	lds	r24, 0x02E2
     830:	90 91 e3 02 	lds	r25, 0x02E3
     834:	90 93 bb 04 	sts	0x04BB, r25
     838:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     83c:	80 91 1a 03 	lds	r24, 0x031A
     840:	90 91 1b 03 	lds	r25, 0x031B
     844:	90 93 bd 04 	sts	0x04BD, r25
     848:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 be 04 	sts	0x04BE, r24
				break;
     852:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     854:	80 91 f2 02 	lds	r24, 0x02F2
     858:	90 91 f3 02 	lds	r25, 0x02F3
     85c:	90 93 b7 04 	sts	0x04B7, r25
     860:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     864:	80 91 f4 02 	lds	r24, 0x02F4
     868:	90 91 f5 02 	lds	r25, 0x02F5
     86c:	90 93 b9 04 	sts	0x04B9, r25
     870:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     874:	80 91 e2 02 	lds	r24, 0x02E2
     878:	90 91 e3 02 	lds	r25, 0x02E3
     87c:	90 93 bb 04 	sts	0x04BB, r25
     880:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     884:	80 91 1a 03 	lds	r24, 0x031A
     888:	90 91 1b 03 	lds	r25, 0x031B
     88c:	90 93 bd 04 	sts	0x04BD, r25
     890:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	80 93 be 04 	sts	0x04BE, r24
				break;
     89a:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     89c:	80 91 f6 02 	lds	r24, 0x02F6
     8a0:	90 91 f7 02 	lds	r25, 0x02F7
     8a4:	90 93 b7 04 	sts	0x04B7, r25
     8a8:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     8ac:	80 91 f8 02 	lds	r24, 0x02F8
     8b0:	90 91 f9 02 	lds	r25, 0x02F9
     8b4:	90 93 b9 04 	sts	0x04B9, r25
     8b8:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     8bc:	80 91 fa 02 	lds	r24, 0x02FA
     8c0:	90 91 fb 02 	lds	r25, 0x02FB
     8c4:	90 93 bb 04 	sts	0x04BB, r25
     8c8:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8cc:	80 91 1a 03 	lds	r24, 0x031A
     8d0:	90 91 1b 03 	lds	r25, 0x031B
     8d4:	90 93 bd 04 	sts	0x04BD, r25
     8d8:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 be 04 	sts	0x04BE, r24
				break;
     8e2:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8e4:	80 91 f6 02 	lds	r24, 0x02F6
     8e8:	90 91 f7 02 	lds	r25, 0x02F7
     8ec:	90 93 b7 04 	sts	0x04B7, r25
     8f0:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     8f4:	80 91 f8 02 	lds	r24, 0x02F8
     8f8:	90 91 f9 02 	lds	r25, 0x02F9
     8fc:	90 93 b9 04 	sts	0x04B9, r25
     900:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     904:	80 91 fa 02 	lds	r24, 0x02FA
     908:	90 91 fb 02 	lds	r25, 0x02FB
     90c:	90 93 bb 04 	sts	0x04BB, r25
     910:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     914:	80 91 1a 03 	lds	r24, 0x031A
     918:	90 91 1b 03 	lds	r25, 0x031B
     91c:	90 93 bd 04 	sts	0x04BD, r25
     920:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	80 93 be 04 	sts	0x04BE, r24
				break;
     92a:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     92c:	80 91 f6 02 	lds	r24, 0x02F6
     930:	90 91 f7 02 	lds	r25, 0x02F7
     934:	90 93 b7 04 	sts	0x04B7, r25
     938:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     93c:	80 91 f8 02 	lds	r24, 0x02F8
     940:	90 91 f9 02 	lds	r25, 0x02F9
     944:	90 93 b9 04 	sts	0x04B9, r25
     948:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     94c:	80 91 fa 02 	lds	r24, 0x02FA
     950:	90 91 fb 02 	lds	r25, 0x02FB
     954:	90 93 bb 04 	sts	0x04BB, r25
     958:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     95c:	80 91 1a 03 	lds	r24, 0x031A
     960:	90 91 1b 03 	lds	r25, 0x031B
     964:	90 93 bd 04 	sts	0x04BD, r25
     968:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 3;
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	80 93 be 04 	sts	0x04BE, r24
				break;
     972:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     974:	80 91 fc 02 	lds	r24, 0x02FC
     978:	90 91 fd 02 	lds	r25, 0x02FD
     97c:	90 93 b7 04 	sts	0x04B7, r25
     980:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     984:	80 91 fe 02 	lds	r24, 0x02FE
     988:	90 91 ff 02 	lds	r25, 0x02FF
     98c:	90 93 b9 04 	sts	0x04B9, r25
     990:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     994:	80 91 00 03 	lds	r24, 0x0300
     998:	90 91 01 03 	lds	r25, 0x0301
     99c:	90 93 bb 04 	sts	0x04BB, r25
     9a0:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9a4:	80 91 1a 03 	lds	r24, 0x031A
     9a8:	90 91 1b 03 	lds	r25, 0x031B
     9ac:	90 93 bd 04 	sts	0x04BD, r25
     9b0:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 be 04 	sts	0x04BE, r24
				break;
     9ba:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     9bc:	80 91 fc 02 	lds	r24, 0x02FC
     9c0:	90 91 fd 02 	lds	r25, 0x02FD
     9c4:	90 93 b7 04 	sts	0x04B7, r25
     9c8:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     9cc:	80 91 fe 02 	lds	r24, 0x02FE
     9d0:	90 91 ff 02 	lds	r25, 0x02FF
     9d4:	90 93 b9 04 	sts	0x04B9, r25
     9d8:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9dc:	80 91 00 03 	lds	r24, 0x0300
     9e0:	90 91 01 03 	lds	r25, 0x0301
     9e4:	90 93 bb 04 	sts	0x04BB, r25
     9e8:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9ec:	80 91 1a 03 	lds	r24, 0x031A
     9f0:	90 91 1b 03 	lds	r25, 0x031B
     9f4:	90 93 bd 04 	sts	0x04BD, r25
     9f8:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	80 93 be 04 	sts	0x04BE, r24
				break;
     a02:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     a04:	80 91 fc 02 	lds	r24, 0x02FC
     a08:	90 91 fd 02 	lds	r25, 0x02FD
     a0c:	90 93 b7 04 	sts	0x04B7, r25
     a10:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     a14:	80 91 fe 02 	lds	r24, 0x02FE
     a18:	90 91 ff 02 	lds	r25, 0x02FF
     a1c:	90 93 b9 04 	sts	0x04B9, r25
     a20:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     a24:	80 91 00 03 	lds	r24, 0x0300
     a28:	90 91 01 03 	lds	r25, 0x0301
     a2c:	90 93 bb 04 	sts	0x04BB, r25
     a30:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a34:	80 91 1a 03 	lds	r24, 0x031A
     a38:	90 91 1b 03 	lds	r25, 0x031B
     a3c:	90 93 bd 04 	sts	0x04BD, r25
     a40:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 3;
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	80 93 be 04 	sts	0x04BE, r24
				break;
     a4a:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a4c:	80 91 02 03 	lds	r24, 0x0302
     a50:	90 91 03 03 	lds	r25, 0x0303
     a54:	90 93 b7 04 	sts	0x04B7, r25
     a58:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a5c:	80 91 04 03 	lds	r24, 0x0304
     a60:	90 91 05 03 	lds	r25, 0x0305
     a64:	90 93 b9 04 	sts	0x04B9, r25
     a68:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a6c:	80 91 06 03 	lds	r24, 0x0306
     a70:	90 91 07 03 	lds	r25, 0x0307
     a74:	90 93 bb 04 	sts	0x04BB, r25
     a78:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a7c:	80 91 1a 03 	lds	r24, 0x031A
     a80:	90 91 1b 03 	lds	r25, 0x031B
     a84:	90 93 bd 04 	sts	0x04BD, r25
     a88:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1; 
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 be 04 	sts	0x04BE, r24
				break;
     a92:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a94:	80 91 02 03 	lds	r24, 0x0302
     a98:	90 91 03 03 	lds	r25, 0x0303
     a9c:	90 93 b7 04 	sts	0x04B7, r25
     aa0:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     aa4:	80 91 04 03 	lds	r24, 0x0304
     aa8:	90 91 05 03 	lds	r25, 0x0305
     aac:	90 93 b9 04 	sts	0x04B9, r25
     ab0:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     ab4:	80 91 06 03 	lds	r24, 0x0306
     ab8:	90 91 07 03 	lds	r25, 0x0307
     abc:	90 93 bb 04 	sts	0x04BB, r25
     ac0:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ac4:	80 91 1a 03 	lds	r24, 0x031A
     ac8:	90 91 1b 03 	lds	r25, 0x031B
     acc:	90 93 bd 04 	sts	0x04BD, r25
     ad0:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	80 93 be 04 	sts	0x04BE, r24
				break;
     ada:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     adc:	80 91 02 03 	lds	r24, 0x0302
     ae0:	90 91 03 03 	lds	r25, 0x0303
     ae4:	90 93 b7 04 	sts	0x04B7, r25
     ae8:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     aec:	80 91 04 03 	lds	r24, 0x0304
     af0:	90 91 05 03 	lds	r25, 0x0305
     af4:	90 93 b9 04 	sts	0x04B9, r25
     af8:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     afc:	80 91 06 03 	lds	r24, 0x0306
     b00:	90 91 07 03 	lds	r25, 0x0307
     b04:	90 93 bb 04 	sts	0x04BB, r25
     b08:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b0c:	80 91 1a 03 	lds	r24, 0x031A
     b10:	90 91 1b 03 	lds	r25, 0x031B
     b14:	90 93 bd 04 	sts	0x04BD, r25
     b18:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 3;
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	80 93 be 04 	sts	0x04BE, r24
				break;
     b22:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b24:	80 91 08 03 	lds	r24, 0x0308
     b28:	90 91 09 03 	lds	r25, 0x0309
     b2c:	90 93 b7 04 	sts	0x04B7, r25
     b30:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b34:	80 91 0a 03 	lds	r24, 0x030A
     b38:	90 91 0b 03 	lds	r25, 0x030B
     b3c:	90 93 b9 04 	sts	0x04B9, r25
     b40:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b44:	80 91 e2 02 	lds	r24, 0x02E2
     b48:	90 91 e3 02 	lds	r25, 0x02E3
     b4c:	90 93 bb 04 	sts	0x04BB, r25
     b50:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b54:	80 91 1a 03 	lds	r24, 0x031A
     b58:	90 91 1b 03 	lds	r25, 0x031B
     b5c:	90 93 bd 04 	sts	0x04BD, r25
     b60:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 be 04 	sts	0x04BE, r24
				break;
     b6a:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b6c:	80 91 08 03 	lds	r24, 0x0308
     b70:	90 91 09 03 	lds	r25, 0x0309
     b74:	90 93 b7 04 	sts	0x04B7, r25
     b78:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b7c:	80 91 0a 03 	lds	r24, 0x030A
     b80:	90 91 0b 03 	lds	r25, 0x030B
     b84:	90 93 b9 04 	sts	0x04B9, r25
     b88:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b8c:	80 91 e2 02 	lds	r24, 0x02E2
     b90:	90 91 e3 02 	lds	r25, 0x02E3
     b94:	90 93 bb 04 	sts	0x04BB, r25
     b98:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b9c:	80 91 1a 03 	lds	r24, 0x031A
     ba0:	90 91 1b 03 	lds	r25, 0x031B
     ba4:	90 93 bd 04 	sts	0x04BD, r25
     ba8:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index = 2;
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	80 93 be 04 	sts	0x04BE, r24
				break;
     bb2:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
     bb4:	80 91 20 03 	lds	r24, 0x0320
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	49 f4       	brne	.+18     	; 0xbce <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
     bbc:	80 91 0c 03 	lds	r24, 0x030C
     bc0:	90 91 0d 03 	lds	r25, 0x030D
     bc4:	90 93 b7 04 	sts	0x04B7, r25
     bc8:	80 93 b6 04 	sts	0x04B6, r24
     bcc:	08 c0       	rjmp	.+16     	; 0xbde <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
     bce:	80 91 0e 03 	lds	r24, 0x030E
     bd2:	90 91 0f 03 	lds	r25, 0x030F
     bd6:	90 93 b7 04 	sts	0x04B7, r25
     bda:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     bde:	80 91 10 03 	lds	r24, 0x0310
     be2:	90 91 11 03 	lds	r25, 0x0311
     be6:	90 93 b9 04 	sts	0x04B9, r25
     bea:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     bee:	80 91 12 03 	lds	r24, 0x0312
     bf2:	90 91 13 03 	lds	r25, 0x0313
     bf6:	90 93 bb 04 	sts	0x04BB, r25
     bfa:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     bfe:	80 91 1a 03 	lds	r24, 0x031A
     c02:	90 91 1b 03 	lds	r25, 0x031B
     c06:	90 93 bd 04 	sts	0x04BD, r25
     c0a:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index=1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 be 04 	sts	0x04BE, r24
				break;
     c14:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
     c16:	80 91 20 03 	lds	r24, 0x0320
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	49 f4       	brne	.+18     	; 0xc30 <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c1e:	80 91 0c 03 	lds	r24, 0x030C
     c22:	90 91 0d 03 	lds	r25, 0x030D
     c26:	90 93 b7 04 	sts	0x04B7, r25
     c2a:	80 93 b6 04 	sts	0x04B6, r24
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     c30:	80 91 0e 03 	lds	r24, 0x030E
     c34:	90 91 0f 03 	lds	r25, 0x030F
     c38:	90 93 b7 04 	sts	0x04B7, r25
     c3c:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     c40:	80 91 10 03 	lds	r24, 0x0310
     c44:	90 91 11 03 	lds	r25, 0x0311
     c48:	90 93 b9 04 	sts	0x04B9, r25
     c4c:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     c50:	80 91 12 03 	lds	r24, 0x0312
     c54:	90 91 13 03 	lds	r25, 0x0313
     c58:	90 93 bb 04 	sts	0x04BB, r25
     c5c:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c60:	80 91 1a 03 	lds	r24, 0x031A
     c64:	90 91 1b 03 	lds	r25, 0x031B
     c68:	90 93 bd 04 	sts	0x04BD, r25
     c6c:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index=2;
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 93 be 04 	sts	0x04BE, r24
				break;
     c76:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
     c78:	80 91 20 03 	lds	r24, 0x0320
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	49 f4       	brne	.+18     	; 0xc92 <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c80:	80 91 0c 03 	lds	r24, 0x030C
     c84:	90 91 0d 03 	lds	r25, 0x030D
     c88:	90 93 b7 04 	sts	0x04B7, r25
     c8c:	80 93 b6 04 	sts	0x04B6, r24
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     c92:	80 91 0e 03 	lds	r24, 0x030E
     c96:	90 91 0f 03 	lds	r25, 0x030F
     c9a:	90 93 b7 04 	sts	0x04B7, r25
     c9e:	80 93 b6 04 	sts	0x04B6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     ca2:	80 91 10 03 	lds	r24, 0x0310
     ca6:	90 91 11 03 	lds	r25, 0x0311
     caa:	90 93 b9 04 	sts	0x04B9, r25
     cae:	80 93 b8 04 	sts	0x04B8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     cb2:	80 91 12 03 	lds	r24, 0x0312
     cb6:	90 91 13 03 	lds	r25, 0x0313
     cba:	90 93 bb 04 	sts	0x04BB, r25
     cbe:	80 93 ba 04 	sts	0x04BA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     cc2:	80 91 1a 03 	lds	r24, 0x031A
     cc6:	90 91 1b 03 	lds	r25, 0x031B
     cca:	90 93 bd 04 	sts	0x04BD, r25
     cce:	80 93 bc 04 	sts	0x04BC, r24
				SYS_Screen_Buffer.white_index=3;
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	80 93 be 04 	sts	0x04BE, r24
     cd8:	08 95       	ret

00000cda <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	6f dc       	rcall	.-1826   	; 0x5be <FindState>
     ce0:	90 93 b2 04 	sts	0x04B2, r25
     ce4:	80 93 b1 04 	sts	0x04B1, r24
	
		Current_TimerFunc = SYS_State->Timer_Action;
     ce8:	dc 01       	movw	r26, r24
     cea:	56 96       	adiw	r26, 0x16	; 22
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	57 97       	sbiw	r26, 0x17	; 23
     cf2:	f0 93 b0 04 	sts	0x04B0, r31
     cf6:	e0 93 af 04 	sts	0x04AF, r30
		Current_TimerFunc();
     cfa:	09 95       	icall
		Timer0_RegisterCallbackFunction(SYS_State->Timer_Action,1000);
     cfc:	e0 91 b1 04 	lds	r30, 0x04B1
     d00:	f0 91 b2 04 	lds	r31, 0x04B2
     d04:	68 ee       	ldi	r22, 0xE8	; 232
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	86 89       	ldd	r24, Z+22	; 0x16
     d0a:	97 89       	ldd	r25, Z+23	; 0x17
     d0c:	48 d1       	rcall	.+656    	; 0xf9e <Timer0_RegisterCallbackFunction>
		State_Update();
     d0e:	83 dc       	rcall	.-1786   	; 0x616 <State_Update>
		DrawScreen();
     d10:	17 dc       	rcall	.-2002   	; 0x540 <DrawScreen>
		lcd12864_SetWhite(0,4,4,0);
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	44 e0       	ldi	r20, 0x04	; 4
     d16:	64 e0       	ldi	r22, 0x04	; 4
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	d7 d2       	rcall	.+1454   	; 0x12ca <lcd12864_SetWhite>
		lcd12864_SetWhite(6,4,4,0);
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	44 e0       	ldi	r20, 0x04	; 4
     d20:	64 e0       	ldi	r22, 0x04	; 4
     d22:	86 e0       	ldi	r24, 0x06	; 6
     d24:	d2 d2       	rcall	.+1444   	; 0x12ca <lcd12864_SetWhite>
		lcd12864_SetWhite(12,4,4,0);
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	44 e0       	ldi	r20, 0x04	; 4
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	8c e0       	ldi	r24, 0x0C	; 12
     d2e:	cd c2       	rjmp	.+1434   	; 0x12ca <lcd12864_SetWhite>
     d30:	08 95       	ret

00000d32 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
     d32:	45 d2       	rcall	.+1162   	; 0x11be <getkey>
		switch(key){
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	71 f0       	breq	.+28     	; 0xd54 <Menu_Poll+0x22>
     d38:	38 f4       	brcc	.+14     	; 0xd48 <Menu_Poll+0x16>
     d3a:	88 23       	and	r24, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <Menu_Poll+0xe>
     d3e:	3a c0       	rjmp	.+116    	; 0xdb4 <Menu_Poll+0x82>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	09 f4       	brne	.+2      	; 0xd46 <Menu_Poll+0x14>
     d44:	4f c0       	rjmp	.+158    	; 0xde4 <Menu_Poll+0xb2>
     d46:	7e c0       	rjmp	.+252    	; 0xe44 <Menu_Poll+0x112>
     d48:	83 30       	cpi	r24, 0x03	; 3
     d4a:	e1 f0       	breq	.+56     	; 0xd84 <Menu_Poll+0x52>
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Menu_Poll+0x20>
     d50:	61 c0       	rjmp	.+194    	; 0xe14 <Menu_Poll+0xe2>
     d52:	78 c0       	rjmp	.+240    	; 0xe44 <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
     d54:	e0 91 b1 04 	lds	r30, 0x04B1
     d58:	f0 91 b2 04 	lds	r31, 0x04B2
     d5c:	02 88       	ldd	r0, Z+18	; 0x12
     d5e:	f3 89       	ldd	r31, Z+19	; 0x13
     d60:	e0 2d       	mov	r30, r0
     d62:	30 97       	sbiw	r30, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <Menu_Poll+0x36>
					SYS_State->Right_Action();
     d66:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
     d68:	e0 91 b1 04 	lds	r30, 0x04B1
     d6c:	f0 91 b2 04 	lds	r31, 0x04B2
     d70:	80 85       	ldd	r24, Z+8	; 0x08
     d72:	91 85       	ldd	r25, Z+9	; 0x09
     d74:	24 dc       	rcall	.-1976   	; 0x5be <FindState>
     d76:	90 93 b2 04 	sts	0x04B2, r25
     d7a:	80 93 b1 04 	sts	0x04B1, r24
				State_Update();
     d7e:	4b dc       	rcall	.-1898   	; 0x616 <State_Update>
				DrawScreen();
     d80:	df db       	rcall	.-2114   	; 0x540 <DrawScreen>
				break;
     d82:	62 c0       	rjmp	.+196    	; 0xe48 <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
     d84:	e0 91 b1 04 	lds	r30, 0x04B1
     d88:	f0 91 b2 04 	lds	r31, 0x04B2
     d8c:	00 88       	ldd	r0, Z+16	; 0x10
     d8e:	f1 89       	ldd	r31, Z+17	; 0x11
     d90:	e0 2d       	mov	r30, r0
     d92:	30 97       	sbiw	r30, 0x00	; 0
     d94:	09 f0       	breq	.+2      	; 0xd98 <Menu_Poll+0x66>
					SYS_State->Left_Action();
     d96:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
     d98:	e0 91 b1 04 	lds	r30, 0x04B1
     d9c:	f0 91 b2 04 	lds	r31, 0x04B2
     da0:	86 81       	ldd	r24, Z+6	; 0x06
     da2:	97 81       	ldd	r25, Z+7	; 0x07
     da4:	0c dc       	rcall	.-2024   	; 0x5be <FindState>
     da6:	90 93 b2 04 	sts	0x04B2, r25
     daa:	80 93 b1 04 	sts	0x04B1, r24
				State_Update();
     dae:	33 dc       	rcall	.-1946   	; 0x616 <State_Update>
				DrawScreen();
     db0:	c7 db       	rcall	.-2162   	; 0x540 <DrawScreen>
				break;
     db2:	4a c0       	rjmp	.+148    	; 0xe48 <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
     db4:	e0 91 b1 04 	lds	r30, 0x04B1
     db8:	f0 91 b2 04 	lds	r31, 0x04B2
     dbc:	04 84       	ldd	r0, Z+12	; 0x0c
     dbe:	f5 85       	ldd	r31, Z+13	; 0x0d
     dc0:	e0 2d       	mov	r30, r0
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <Menu_Poll+0x96>
				SYS_State->Up_Action();
     dc6:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
     dc8:	e0 91 b1 04 	lds	r30, 0x04B1
     dcc:	f0 91 b2 04 	lds	r31, 0x04B2
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	f4 db       	rcall	.-2072   	; 0x5be <FindState>
     dd6:	90 93 b2 04 	sts	0x04B2, r25
     dda:	80 93 b1 04 	sts	0x04B1, r24
				State_Update();
     dde:	1b dc       	rcall	.-1994   	; 0x616 <State_Update>
				DrawScreen();
     de0:	af db       	rcall	.-2210   	; 0x540 <DrawScreen>
				break;
     de2:	32 c0       	rjmp	.+100    	; 0xe48 <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
     de4:	e0 91 b1 04 	lds	r30, 0x04B1
     de8:	f0 91 b2 04 	lds	r31, 0x04B2
     dec:	06 84       	ldd	r0, Z+14	; 0x0e
     dee:	f7 85       	ldd	r31, Z+15	; 0x0f
     df0:	e0 2d       	mov	r30, r0
     df2:	30 97       	sbiw	r30, 0x00	; 0
     df4:	09 f0       	breq	.+2      	; 0xdf8 <Menu_Poll+0xc6>
				SYS_State->Down_Action();
     df6:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
     df8:	e0 91 b1 04 	lds	r30, 0x04B1
     dfc:	f0 91 b2 04 	lds	r31, 0x04B2
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	dc db       	rcall	.-2120   	; 0x5be <FindState>
     e06:	90 93 b2 04 	sts	0x04B2, r25
     e0a:	80 93 b1 04 	sts	0x04B1, r24
				State_Update();
     e0e:	03 dc       	rcall	.-2042   	; 0x616 <State_Update>
				DrawScreen();
     e10:	97 db       	rcall	.-2258   	; 0x540 <DrawScreen>
				break;
     e12:	1a c0       	rjmp	.+52     	; 0xe48 <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
     e14:	e0 91 b1 04 	lds	r30, 0x04B1
     e18:	f0 91 b2 04 	lds	r31, 0x04B2
     e1c:	04 88       	ldd	r0, Z+20	; 0x14
     e1e:	f5 89       	ldd	r31, Z+21	; 0x15
     e20:	e0 2d       	mov	r30, r0
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	09 f0       	breq	.+2      	; 0xe28 <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
     e26:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
     e28:	e0 91 b1 04 	lds	r30, 0x04B1
     e2c:	f0 91 b2 04 	lds	r31, 0x04B2
     e30:	82 85       	ldd	r24, Z+10	; 0x0a
     e32:	93 85       	ldd	r25, Z+11	; 0x0b
     e34:	c4 db       	rcall	.-2168   	; 0x5be <FindState>
     e36:	90 93 b2 04 	sts	0x04B2, r25
     e3a:	80 93 b1 04 	sts	0x04B1, r24
				State_Update();
     e3e:	eb db       	rcall	.-2090   	; 0x616 <State_Update>
				DrawScreen();
     e40:	7f db       	rcall	.-2306   	; 0x540 <DrawScreen>
				break;
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
     e44:	8f 3f       	cpi	r24, 0xFF	; 255
     e46:	d1 f0       	breq	.+52     	; 0xe7c <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
     e48:	80 91 af 04 	lds	r24, 0x04AF
     e4c:	90 91 b0 04 	lds	r25, 0x04B0
     e50:	fb d0       	rcall	.+502    	; 0x1048 <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
     e52:	e0 91 b1 04 	lds	r30, 0x04B1
     e56:	f0 91 b2 04 	lds	r31, 0x04B2
     e5a:	06 88       	ldd	r0, Z+22	; 0x16
     e5c:	f7 89       	ldd	r31, Z+23	; 0x17
     e5e:	e0 2d       	mov	r30, r0
     e60:	f0 93 b0 04 	sts	0x04B0, r31
     e64:	e0 93 af 04 	sts	0x04AF, r30
			if(Current_TimerFunc != NULL){
     e68:	30 97       	sbiw	r30, 0x00	; 0
     e6a:	41 f0       	breq	.+16     	; 0xe7c <Menu_Poll+0x14a>
			Current_TimerFunc();
     e6c:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
     e6e:	68 ee       	ldi	r22, 0xE8	; 232
     e70:	73 e0       	ldi	r23, 0x03	; 3
     e72:	80 91 af 04 	lds	r24, 0x04AF
     e76:	90 91 b0 04 	lds	r25, 0x04B0
     e7a:	91 c0       	rjmp	.+290    	; 0xf9e <Timer0_RegisterCallbackFunction>
     e7c:	08 95       	ret

00000e7e <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
     e7e:	e7 ec       	ldi	r30, 0xC7	; 199
     e80:	f4 e0       	ldi	r31, 0x04	; 4
     e82:	87 ef       	ldi	r24, 0xF7	; 247
     e84:	94 e0       	ldi	r25, 0x04	; 4
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
     e86:	11 82       	std	Z+1, r1	; 0x01
     e88:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
     e8a:	13 82       	std	Z+3, r1	; 0x03
     e8c:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
     e8e:	15 82       	std	Z+5, r1	; 0x05
     e90:	14 82       	std	Z+4, r1	; 0x04
     e92:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
     e94:	e8 17       	cp	r30, r24
     e96:	f9 07       	cpc	r31, r25
     e98:	b1 f7       	brne	.-20     	; 0xe86 <Timer0_Init+0x8>
     e9a:	ef eb       	ldi	r30, 0xBF	; 191
     e9c:	f4 e0       	ldi	r31, 0x04	; 4
     e9e:	87 ec       	ldi	r24, 0xC7	; 199
     ea0:	94 e0       	ldi	r25, 0x04	; 4
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     ea6:	e8 17       	cp	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
     eac:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
     eae:	83 b7       	in	r24, 0x33	; 51
     eb0:	87 60       	ori	r24, 0x07	; 7
     eb2:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
     eb4:	88 eb       	ldi	r24, 0xB8	; 184
     eb6:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
     eb8:	86 b7       	in	r24, 0x36	; 54
     eba:	81 60       	ori	r24, 0x01	; 1
     ebc:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
     ebe:	87 b7       	in	r24, 0x37	; 55
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	87 bf       	out	0x37, r24	; 55
			sei();
     ec4:	78 94       	sei
     ec6:	08 95       	ret

00000ec8 <__vector_15>:
}


ISR(TIMER0_COMP_vect){
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
     ef6:	88 eb       	ldi	r24, 0xB8	; 184
     ef8:	82 bf       	out	0x32, r24	; 50
     efa:	c7 ec       	ldi	r28, 0xC7	; 199
     efc:	d4 e0       	ldi	r29, 0x04	; 4
     efe:	07 ef       	ldi	r16, 0xF7	; 247
     f00:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
     f02:	88 81       	ld	r24, Y
     f04:	99 81       	ldd	r25, Y+1	; 0x01
     f06:	89 2b       	or	r24, r25
     f08:	81 f0       	breq	.+32     	; 0xf2a <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	2a 81       	ldd	r18, Y+2	; 0x02
     f10:	3b 81       	ldd	r19, Y+3	; 0x03
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	31 f4       	brne	.+12     	; 0xf24 <__vector_15+0x5c>
				EventList[i].counter = 0;
     f18:	1d 82       	std	Y+5, r1	; 0x05
     f1a:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
     f1c:	e8 81       	ld	r30, Y
     f1e:	f9 81       	ldd	r31, Y+1	; 0x01
     f20:	09 95       	icall
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	9d 83       	std	Y+5, r25	; 0x05
     f28:	8c 83       	std	Y+4, r24	; 0x04
     f2a:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
     f2c:	c0 17       	cp	r28, r16
     f2e:	d1 07       	cpc	r29, r17
     f30:	41 f7       	brne	.-48     	; 0xf02 <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
     f32:	80 91 b3 04 	lds	r24, 0x04B3
     f36:	90 91 b4 04 	lds	r25, 0x04B4
     f3a:	9c 01       	movw	r18, r24
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	30 93 b4 04 	sts	0x04B4, r19
     f44:	20 93 b3 04 	sts	0x04B3, r18
     f48:	84 36       	cpi	r24, 0x64	; 100
     f4a:	91 05       	cpc	r25, r1
     f4c:	89 f4       	brne	.+34     	; 0xf70 <__vector_15+0xa8>
     f4e:	ef eb       	ldi	r30, 0xBF	; 191
     f50:	f4 e0       	ldi	r31, 0x04	; 4
     f52:	87 ec       	ldi	r24, 0xC7	; 199
     f54:	94 e0       	ldi	r25, 0x04	; 4
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
     f56:	20 81       	ld	r18, Z
     f58:	21 50       	subi	r18, 0x01	; 1
     f5a:	2e 3f       	cpi	r18, 0xFE	; 254
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <__vector_15+0x98>
				CountDownTimers[i]--;
     f5e:	20 83       	st	Z, r18
     f60:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
     f62:	e8 17       	cp	r30, r24
     f64:	f9 07       	cpc	r31, r25
     f66:	b9 f7       	brne	.-18     	; 0xf56 <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
     f68:	10 92 b4 04 	sts	0x04B4, r1
     f6c:	10 92 b3 04 	sts	0x04B3, r1
	}
	
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	0f 90       	pop	r0
     f92:	0b be       	out	0x3b, r0	; 59
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
     fa2:	6a 30       	cpi	r22, 0x0A	; 10
     fa4:	71 05       	cpc	r23, r1
     fa6:	10 f4       	brcc	.+4      	; 0xfac <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     fac:	c0 91 c7 04 	lds	r28, 0x04C7
     fb0:	d0 91 c8 04 	lds	r29, 0x04C8
     fb4:	c8 17       	cp	r28, r24
     fb6:	d9 07       	cpc	r29, r25
     fb8:	09 f4       	brne	.+2      	; 0xfbc <Timer0_RegisterCallbackFunction+0x1e>
     fba:	3e c0       	rjmp	.+124    	; 0x1038 <Timer0_RegisterCallbackFunction+0x9a>
     fbc:	a7 ef       	ldi	r26, 0xF7	; 247
     fbe:	b4 e0       	ldi	r27, 0x04	; 4
     fc0:	ed ec       	ldi	r30, 0xCD	; 205
     fc2:	f4 e0       	ldi	r31, 0x04	; 4
     fc4:	40 81       	ld	r20, Z
     fc6:	51 81       	ldd	r21, Z+1	; 0x01
     fc8:	48 17       	cp	r20, r24
     fca:	59 07       	cpc	r21, r25
     fcc:	b9 f1       	breq	.+110    	; 0x103c <Timer0_RegisterCallbackFunction+0x9e>
     fce:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     fd0:	ea 17       	cp	r30, r26
     fd2:	fb 07       	cpc	r31, r27
     fd4:	b9 f7       	brne	.-18     	; 0xfc4 <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
     fd6:	cd 2b       	or	r28, r29
     fd8:	51 f0       	breq	.+20     	; 0xfee <Timer0_RegisterCallbackFunction+0x50>
     fda:	ed ec       	ldi	r30, 0xCD	; 205
     fdc:	f4 e0       	ldi	r31, 0x04	; 4
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	ea 01       	movw	r28, r20
     fe4:	a0 81       	ld	r26, Z
     fe6:	b1 81       	ldd	r27, Z+1	; 0x01
     fe8:	ab 2b       	or	r26, r27
     fea:	f9 f4       	brne	.+62     	; 0x102a <Timer0_RegisterCallbackFunction+0x8c>
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <Timer0_RegisterCallbackFunction+0x54>
     fee:	c0 e0       	ldi	r28, 0x00	; 0
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
     ff2:	ae 01       	movw	r20, r28
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	fa 01       	movw	r30, r20
     ffa:	ec 0f       	add	r30, r28
     ffc:	fd 1f       	adc	r31, r29
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	e9 53       	subi	r30, 0x39	; 57
    1004:	fb 4f       	sbci	r31, 0xFB	; 251
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
    100a:	9b 01       	movw	r18, r22
    100c:	ad ec       	ldi	r26, 0xCD	; 205
    100e:	bc ec       	ldi	r27, 0xCC	; 204
    1010:	24 d4       	rcall	.+2120   	; 0x185a <__umulhisi3>
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	93 83       	std	Z+3, r25	; 0x03
    1020:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
    1022:	15 82       	std	Z+5, r1	; 0x05
    1024:	14 82       	std	Z+4, r1	; 0x04
			return true;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <Timer0_RegisterCallbackFunction+0xa4>
    102a:	4f 5f       	subi	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1030:	48 30       	cpi	r20, 0x08	; 8
    1032:	51 05       	cpc	r21, r1
    1034:	b1 f6       	brne	.-84     	; 0xfe2 <Timer0_RegisterCallbackFunction+0x44>
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <Timer0_RegisterCallbackFunction+0xa4>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    1040:	80 e0       	ldi	r24, 0x00	; 0
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
    1048:	20 91 c7 04 	lds	r18, 0x04C7
    104c:	30 91 c8 04 	lds	r19, 0x04C8
    1050:	28 17       	cp	r18, r24
    1052:	39 07       	cpc	r19, r25
    1054:	59 f0       	breq	.+22     	; 0x106c <Timer0_RemoveCallbackFunction+0x24>
    1056:	ed ec       	ldi	r30, 0xCD	; 205
    1058:	f4 e0       	ldi	r31, 0x04	; 4
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	40 81       	ld	r20, Z
    1062:	51 81       	ldd	r21, Z+1	; 0x01
    1064:	48 17       	cp	r20, r24
    1066:	59 07       	cpc	r21, r25
    1068:	e1 f4       	brne	.+56     	; 0x10a2 <Timer0_RemoveCallbackFunction+0x5a>
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <Timer0_RemoveCallbackFunction+0x28>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
    1070:	cb 01       	movw	r24, r22
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	fc 01       	movw	r30, r24
    1078:	e6 0f       	add	r30, r22
    107a:	f7 1f       	adc	r31, r23
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	e9 53       	subi	r30, 0x39	; 57
    1082:	fb 4f       	sbci	r31, 0xFB	; 251
    1084:	11 82       	std	Z+1, r1	; 0x01
    1086:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
    108c:	68 0f       	add	r22, r24
    108e:	79 1f       	adc	r23, r25
    1090:	fb 01       	movw	r30, r22
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e9 53       	subi	r30, 0x39	; 57
    1098:	fb 4f       	sbci	r31, 0xFB	; 251
    109a:	15 82       	std	Z+5, r1	; 0x05
    109c:	14 82       	std	Z+4, r1	; 0x04
			return true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    10a8:	28 30       	cpi	r18, 0x08	; 8
    10aa:	31 05       	cpc	r19, r1
    10ac:	c1 f6       	brne	.-80     	; 0x105e <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
}
    10b0:	08 95       	ret

000010b2 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
    10b2:	80 91 bf 04 	lds	r24, 0x04BF
    10b6:	8f 3f       	cpi	r24, 0xFF	; 255
    10b8:	51 f0       	breq	.+20     	; 0x10ce <Timer0_AllocateCountdownTimer+0x1c>
    10ba:	e0 ec       	ldi	r30, 0xC0	; 192
    10bc:	f4 e0       	ldi	r31, 0x04	; 4
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	82 2f       	mov	r24, r18
    10c4:	a9 01       	movw	r20, r18
    10c6:	91 91       	ld	r25, Z+
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	51 f4       	brne	.+20     	; 0x10e0 <Timer0_AllocateCountdownTimer+0x2e>
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <Timer0_AllocateCountdownTimer+0x22>
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10d2:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
    10d4:	fa 01       	movw	r30, r20
    10d6:	e1 54       	subi	r30, 0x41	; 65
    10d8:	fb 4f       	sbci	r31, 0xFB	; 251
    10da:	10 82       	st	Z, r1
		return i+1;
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	08 95       	ret
    10e0:	2f 5f       	subi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10e4:	28 30       	cpi	r18, 0x08	; 8
    10e6:	31 05       	cpc	r19, r1
    10e8:	61 f7       	brne	.-40     	; 0x10c2 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
    10ea:	80 e0       	ldi	r24, 0x00	; 0
}
    10ec:	08 95       	ret

000010ee <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
    10ee:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
    10f4:	ea e6       	ldi	r30, 0x6A	; 106
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
    10fe:	89 b7       	in	r24, 0x39	; 57
    1100:	82 60       	ori	r24, 0x02	; 2
    1102:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
    1104:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
    1106:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
    1108:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
    110a:	d3 df       	rcall	.-90     	; 0x10b2 <Timer0_AllocateCountdownTimer>
    110c:	80 93 f7 04 	sts	0x04F7, r24
    1110:	08 95       	ret

00001112 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
    1112:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
    1114:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1116:	80 fd       	sbrc	r24, 0
    1118:	15 c0       	rjmp	.+42     	; 0x1144 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    111a:	81 fd       	sbrc	r24, 1
    111c:	15 c0       	rjmp	.+42     	; 0x1148 <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    111e:	82 fd       	sbrc	r24, 2
    1120:	15 c0       	rjmp	.+42     	; 0x114c <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1122:	83 fd       	sbrc	r24, 3
    1124:	15 c0       	rjmp	.+42     	; 0x1150 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1126:	84 fd       	sbrc	r24, 4
    1128:	15 c0       	rjmp	.+42     	; 0x1154 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    112a:	85 fd       	sbrc	r24, 5
    112c:	15 c0       	rjmp	.+42     	; 0x1158 <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    112e:	86 fd       	sbrc	r24, 6
    1130:	15 c0       	rjmp	.+42     	; 0x115c <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1132:	88 23       	and	r24, r24
    1134:	d4 f4       	brge	.+52     	; 0x116a <button_interrupt+0x58>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    1138:	90 93 21 03 	sts	0x0321, r25
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 b5 04 	sts	0x04B5, r24
    1142:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1144:	95 e0       	ldi	r25, 0x05	; 5
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    1148:	97 e0       	ldi	r25, 0x07	; 7
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1150:	96 e0       	ldi	r25, 0x06	; 6
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1160:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    1162:	80 91 b5 04 	lds	r24, 0x04B5
    1166:	88 23       	and	r24, r24
    1168:	39 f3       	breq	.-50     	; 0x1138 <button_interrupt+0x26>
    116a:	08 95       	ret

0000116c <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	0b b6       	in	r0, 0x3b	; 59
    1178:	0f 92       	push	r0
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31
cli();	
    1192:	f8 94       	cli
button_interrupt();
    1194:	be df       	rcall	.-132    	; 0x1112 <button_interrupt>
sei();
    1196:	78 94       	sei
}
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0b be       	out	0x3b, r0	; 59
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    11be:	f8 94       	cli
	if(KEY_VALID){
    11c0:	80 91 b5 04 	lds	r24, 0x04B5
    11c4:	88 23       	and	r24, r24
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <getkey+0x14>
		k = KEY;
    11c8:	80 91 21 03 	lds	r24, 0x0321
		KEY_VALID = false;
    11cc:	10 92 b5 04 	sts	0x04B5, r1
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <getkey+0x16>
		
	}
	else k=KEY_NULL;
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    11d4:	78 94       	sei
	
	return k;
	
	
	
    11d6:	08 95       	ret

000011d8 <lcd12864_send_byte>:
	lcd12864_write_char('.');
	float digi = v - (int)v;
	digi*=100;
	itoa((int)digi,str,10);
	lcd12864_write_str(str);
}
    11d8:	98 e0       	ldi	r25, 0x08	; 8
    11da:	1b 98       	cbi	0x03, 3	; 3
    11dc:	88 23       	and	r24, r24
    11de:	14 f4       	brge	.+4      	; 0x11e4 <lcd12864_send_byte+0xc>
    11e0:	1c 9a       	sbi	0x03, 4	; 3
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <lcd12864_send_byte+0xe>
    11e4:	1c 98       	cbi	0x03, 4	; 3
    11e6:	88 0f       	add	r24, r24
    11e8:	00 00       	nop
    11ea:	00 00       	nop
    11ec:	00 00       	nop
    11ee:	1b 9a       	sbi	0x03, 3	; 3
    11f0:	00 00       	nop
    11f2:	00 00       	nop
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	89 f7       	brne	.-30     	; 0x11da <lcd12864_send_byte+0x2>
    11f8:	08 95       	ret

000011fa <lcd12864_wait_busy>:
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	88 3b       	cpi	r24, 0xB8	; 184
    1202:	91 05       	cpc	r25, r1
    1204:	e1 f7       	brne	.-8      	; 0x11fe <lcd12864_wait_busy+0x4>
    1206:	08 95       	ret

00001208 <lcd12864_send_data>:
    1208:	cf 93       	push	r28
    120a:	c8 2f       	mov	r28, r24
    120c:	1e 9a       	sbi	0x03, 6	; 3
    120e:	8a ef       	ldi	r24, 0xFA	; 250
    1210:	e3 df       	rcall	.-58     	; 0x11d8 <lcd12864_send_byte>
    1212:	8c 2f       	mov	r24, r28
    1214:	80 7f       	andi	r24, 0xF0	; 240
    1216:	e0 df       	rcall	.-64     	; 0x11d8 <lcd12864_send_byte>
    1218:	8c 2f       	mov	r24, r28
    121a:	82 95       	swap	r24
    121c:	80 7f       	andi	r24, 0xF0	; 240
    121e:	dc df       	rcall	.-72     	; 0x11d8 <lcd12864_send_byte>
    1220:	1e 98       	cbi	0x03, 6	; 3
    1222:	eb df       	rcall	.-42     	; 0x11fa <lcd12864_wait_busy>
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <lcd12864_send_cmd>:
    1228:	cf 93       	push	r28
    122a:	c8 2f       	mov	r28, r24
    122c:	1e 9a       	sbi	0x03, 6	; 3
    122e:	88 ef       	ldi	r24, 0xF8	; 248
    1230:	d3 df       	rcall	.-90     	; 0x11d8 <lcd12864_send_byte>
    1232:	8c 2f       	mov	r24, r28
    1234:	80 7f       	andi	r24, 0xF0	; 240
    1236:	d0 df       	rcall	.-96     	; 0x11d8 <lcd12864_send_byte>
    1238:	8c 2f       	mov	r24, r28
    123a:	82 95       	swap	r24
    123c:	80 7f       	andi	r24, 0xF0	; 240
    123e:	cc df       	rcall	.-104    	; 0x11d8 <lcd12864_send_byte>
    1240:	dc df       	rcall	.-72     	; 0x11fa <lcd12864_wait_busy>
    1242:	1e 98       	cbi	0x03, 6	; 3
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <lcd12864_clear>:
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	ee df       	rcall	.-36     	; 0x1228 <lcd12864_send_cmd>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	81 15       	cp	r24, r1
    1254:	20 e3       	ldi	r18, 0x30	; 48
    1256:	92 07       	cpc	r25, r18
    1258:	d9 f7       	brne	.-10     	; 0x1250 <lcd12864_clear+0x8>
    125a:	08 95       	ret

0000125c <lcd12864_set_pos>:
    125c:	62 30       	cpi	r22, 0x02	; 2
    125e:	89 f0       	breq	.+34     	; 0x1282 <lcd12864_set_pos+0x26>
    1260:	18 f4       	brcc	.+6      	; 0x1268 <lcd12864_set_pos+0xc>
    1262:	61 30       	cpi	r22, 0x01	; 1
    1264:	31 f0       	breq	.+12     	; 0x1272 <lcd12864_set_pos+0x16>
    1266:	0b c0       	rjmp	.+22     	; 0x127e <lcd12864_set_pos+0x22>
    1268:	63 30       	cpi	r22, 0x03	; 3
    126a:	29 f0       	breq	.+10     	; 0x1276 <lcd12864_set_pos+0x1a>
    126c:	64 30       	cpi	r22, 0x04	; 4
    126e:	29 f0       	breq	.+10     	; 0x127a <lcd12864_set_pos+0x1e>
    1270:	06 c0       	rjmp	.+12     	; 0x127e <lcd12864_set_pos+0x22>
    1272:	90 e8       	ldi	r25, 0x80	; 128
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <lcd12864_set_pos+0x28>
    1276:	98 e8       	ldi	r25, 0x88	; 136
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <lcd12864_set_pos+0x28>
    127a:	98 e9       	ldi	r25, 0x98	; 152
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <lcd12864_set_pos+0x28>
    127e:	98 e9       	ldi	r25, 0x98	; 152
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <lcd12864_set_pos+0x28>
    1282:	90 e9       	ldi	r25, 0x90	; 144
    1284:	81 31       	cpi	r24, 0x11	; 17
    1286:	10 f4       	brcc	.+4      	; 0x128c <lcd12864_set_pos+0x30>
    1288:	89 2b       	or	r24, r25
    128a:	ce cf       	rjmp	.-100    	; 0x1228 <lcd12864_send_cmd>
    128c:	08 95       	ret

0000128e <lcd12864_write_char>:
    128e:	bc cf       	rjmp	.-136    	; 0x1208 <lcd12864_send_data>
    1290:	08 95       	ret

00001292 <lcd12864_write_str>:
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	88 81       	ld	r24, Y
    129c:	88 23       	and	r24, r24
    129e:	49 f0       	breq	.+18     	; 0x12b2 <lcd12864_write_str+0x20>
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	b2 df       	rcall	.-156    	; 0x1208 <lcd12864_send_data>
    12a4:	1f 5f       	subi	r17, 0xFF	; 255
    12a6:	fe 01       	movw	r30, r28
    12a8:	e1 0f       	add	r30, r17
    12aa:	f1 1d       	adc	r31, r1
    12ac:	80 81       	ld	r24, Z
    12ae:	81 11       	cpse	r24, r1
    12b0:	f8 cf       	rjmp	.-16     	; 0x12a2 <lcd12864_write_str+0x10>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	08 95       	ret

000012ba <lcd12864_write_int>:
    12ba:	4a e0       	ldi	r20, 0x0A	; 10
    12bc:	6e e9       	ldi	r22, 0x9E	; 158
    12be:	74 e0       	ldi	r23, 0x04	; 4
    12c0:	db d2       	rcall	.+1462   	; 0x1878 <__itoa_ncheck>


void lcd12864_write_int(int v){
	char *str="    ";
	itoa(v,str,10);
	lcd12864_write_str(str);
    12c2:	8e e9       	ldi	r24, 0x9E	; 158
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	e5 cf       	rjmp	.-54     	; 0x1292 <lcd12864_write_str>
    12c8:	08 95       	ret

000012ca <lcd12864_SetWhite>:
}



void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	d8 2f       	mov	r29, r24
    12da:	14 2f       	mov	r17, r20
    12dc:	65 30       	cpi	r22, 0x05	; 5
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <lcd12864_SetWhite+0x18>
    12e0:	64 e0       	ldi	r22, 0x04	; 4
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
    12e2:	66 23       	and	r22, r22
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <lcd12864_SetWhite+0x1e>
    12e6:	b8 c0       	rjmp	.+368    	; 0x1458 <lcd12864_SetWhite+0x18e>
	uint8_t block;
	if(clear) block=0x00; 
    12e8:	c1 e0       	ldi	r28, 0x01	; 1
    12ea:	21 11       	cpse	r18, r1
    12ec:	c0 e0       	ldi	r28, 0x00	; 0
    12ee:	c1 95       	neg	r28
	else block = 0xff;
	
	switch(y){
    12f0:	62 30       	cpi	r22, 0x02	; 2
    12f2:	99 f0       	breq	.+38     	; 0x131a <lcd12864_SetWhite+0x50>
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <lcd12864_SetWhite+0x32>
    12f6:	61 30       	cpi	r22, 0x01	; 1
    12f8:	91 f5       	brne	.+100    	; 0x135e <lcd12864_SetWhite+0x94>
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <lcd12864_SetWhite+0x3c>
    12fc:	63 30       	cpi	r22, 0x03	; 3
    12fe:	c1 f0       	breq	.+48     	; 0x1330 <lcd12864_SetWhite+0x66>
    1300:	64 30       	cpi	r22, 0x04	; 4
    1302:	09 f1       	breq	.+66     	; 0x1346 <lcd12864_SetWhite+0x7c>
    1304:	2c c0       	rjmp	.+88     	; 0x135e <lcd12864_SetWhite+0x94>
		case 1:
			start_x = 0x80+x/2;
    1306:	8d 2f       	mov	r24, r29
    1308:	86 95       	lsr	r24
    130a:	68 94       	set
    130c:	ff 24       	eor	r15, r15
    130e:	f7 f8       	bld	r15, 7
    1310:	f8 0e       	add	r15, r24
			start_y = 0x80;
    1312:	68 94       	set
    1314:	ee 24       	eor	r14, r14
    1316:	e7 f8       	bld	r14, 7
			break;
    1318:	24 c0       	rjmp	.+72     	; 0x1362 <lcd12864_SetWhite+0x98>
		case 2:
			start_x = 0x80+x/2;
    131a:	8d 2f       	mov	r24, r29
    131c:	86 95       	lsr	r24
    131e:	68 94       	set
    1320:	ff 24       	eor	r15, r15
    1322:	f7 f8       	bld	r15, 7
    1324:	f8 0e       	add	r15, r24
			start_y=0x90;
    1326:	0f 2e       	mov	r0, r31
    1328:	f0 e9       	ldi	r31, 0x90	; 144
    132a:	ef 2e       	mov	r14, r31
    132c:	f0 2d       	mov	r31, r0
			break;
    132e:	19 c0       	rjmp	.+50     	; 0x1362 <lcd12864_SetWhite+0x98>
		case 3:
			start_x = 0x88+x/2;
    1330:	8d 2f       	mov	r24, r29
    1332:	86 95       	lsr	r24
    1334:	0f 2e       	mov	r0, r31
    1336:	f8 e8       	ldi	r31, 0x88	; 136
    1338:	ff 2e       	mov	r15, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	f8 0e       	add	r15, r24
			start_y = 0x80;
    133e:	68 94       	set
    1340:	ee 24       	eor	r14, r14
    1342:	e7 f8       	bld	r14, 7
			break;
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <lcd12864_SetWhite+0x98>
		case 4:
			start_x = 0x88+x/2;
    1346:	8d 2f       	mov	r24, r29
    1348:	86 95       	lsr	r24
    134a:	0f 2e       	mov	r0, r31
    134c:	f8 e8       	ldi	r31, 0x88	; 136
    134e:	ff 2e       	mov	r15, r31
    1350:	f0 2d       	mov	r31, r0
    1352:	f8 0e       	add	r15, r24
			start_y = 0x90;
    1354:	0f 2e       	mov	r0, r31
    1356:	f0 e9       	ldi	r31, 0x90	; 144
    1358:	ef 2e       	mov	r14, r31
    135a:	f0 2d       	mov	r31, r0
			break;
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <lcd12864_SetWhite+0x98>


void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
    135e:	e1 2c       	mov	r14, r1
    1360:	f1 2c       	mov	r15, r1
			break;
		default:
			break;
	}
	
	lcd12864_send_cmd(0x34);
    1362:	84 e3       	ldi	r24, 0x34	; 52
    1364:	61 df       	rcall	.-318    	; 0x1228 <lcd12864_send_cmd>
	
	if(x%2==0 && width%2==0){
    1366:	8d 2f       	mov	r24, r29
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	91 2f       	mov	r25, r17
    136c:	91 70       	andi	r25, 0x01	; 1
    136e:	d1 2b       	or	r29, r17
    1370:	d0 fd       	sbrc	r29, 0
    1372:	16 c0       	rjmp	.+44     	; 0x13a0 <lcd12864_SetWhite+0xd6>
		real_width = width/2;
    1374:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1376:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1378:	d1 2c       	mov	r13, r1
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    137a:	80 2f       	mov	r24, r16
    137c:	8e 0d       	add	r24, r14
    137e:	54 df       	rcall	.-344    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1380:	8f 2d       	mov	r24, r15
    1382:	52 df       	rcall	.-348    	; 0x1228 <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    1384:	11 23       	and	r17, r17
    1386:	41 f0       	breq	.+16     	; 0x1398 <lcd12864_SetWhite+0xce>
    1388:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    138a:	8c 2f       	mov	r24, r28
    138c:	3d df       	rcall	.-390    	; 0x1208 <lcd12864_send_data>
				lcd12864_send_data(block);
    138e:	8c 2f       	mov	r24, r28
    1390:	3b df       	rcall	.-394    	; 0x1208 <lcd12864_send_data>
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1392:	df 5f       	subi	r29, 0xFF	; 255
    1394:	d1 13       	cpse	r29, r17
    1396:	f9 cf       	rjmp	.-14     	; 0x138a <lcd12864_SetWhite+0xc0>
	
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
    1398:	0f 5f       	subi	r16, 0xFF	; 255
    139a:	00 31       	cpi	r16, 0x10	; 16
    139c:	71 f7       	brne	.-36     	; 0x137a <lcd12864_SetWhite+0xb0>
    139e:	57 c0       	rjmp	.+174    	; 0x144e <lcd12864_SetWhite+0x184>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
		}
	}
	else if(x%2==0 && width%2!=0){
    13a0:	81 11       	cpse	r24, r1
    13a2:	1d c0       	rjmp	.+58     	; 0x13de <lcd12864_SetWhite+0x114>
    13a4:	99 23       	and	r25, r25
    13a6:	09 f4       	brne	.+2      	; 0x13aa <lcd12864_SetWhite+0xe0>
    13a8:	52 c0       	rjmp	.+164    	; 0x144e <lcd12864_SetWhite+0x184>
		real_width = width/2;
    13aa:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    13ac:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    13ae:	d1 2c       	mov	r13, r1
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    13b0:	80 2f       	mov	r24, r16
    13b2:	8e 0d       	add	r24, r14
    13b4:	39 df       	rcall	.-398    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    13b6:	8f 2d       	mov	r24, r15
    13b8:	37 df       	rcall	.-402    	; 0x1228 <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    13ba:	11 23       	and	r17, r17
    13bc:	41 f0       	breq	.+16     	; 0x13ce <lcd12864_SetWhite+0x104>
    13be:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    13c0:	8c 2f       	mov	r24, r28
    13c2:	22 df       	rcall	.-444    	; 0x1208 <lcd12864_send_data>
				lcd12864_send_data(block);
    13c4:	8c 2f       	mov	r24, r28
    13c6:	20 df       	rcall	.-448    	; 0x1208 <lcd12864_send_data>
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    13c8:	df 5f       	subi	r29, 0xFF	; 255
    13ca:	d1 13       	cpse	r29, r17
    13cc:	f9 cf       	rjmp	.-14     	; 0x13c0 <lcd12864_SetWhite+0xf6>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    13ce:	8c 2f       	mov	r24, r28
    13d0:	1b df       	rcall	.-458    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    13d2:	8d 2d       	mov	r24, r13
    13d4:	19 df       	rcall	.-462    	; 0x1208 <lcd12864_send_data>
			}
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    13d6:	0f 5f       	subi	r16, 0xFF	; 255
    13d8:	00 31       	cpi	r16, 0x10	; 16
    13da:	51 f7       	brne	.-44     	; 0x13b0 <lcd12864_SetWhite+0xe6>
    13dc:	38 c0       	rjmp	.+112    	; 0x144e <lcd12864_SetWhite+0x184>
			}
			lcd12864_send_data(block);
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
    13de:	91 11       	cpse	r25, r1
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <lcd12864_SetWhite+0x154>
		real_width = width/2-1;
    13e2:	16 95       	lsr	r17
    13e4:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<16;i++){
    13e6:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    13e8:	80 2f       	mov	r24, r16
    13ea:	8e 0d       	add	r24, r14
    13ec:	1d df       	rcall	.-454    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    13ee:	8f 2d       	mov	r24, r15
    13f0:	1b df       	rcall	.-458    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	09 df       	rcall	.-494    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(block);
    13f6:	8c 2f       	mov	r24, r28
    13f8:	07 df       	rcall	.-498    	; 0x1208 <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    13fa:	11 23       	and	r17, r17
    13fc:	41 f0       	breq	.+16     	; 0x140e <lcd12864_SetWhite+0x144>
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    1400:	8c 2f       	mov	r24, r28
    1402:	02 df       	rcall	.-508    	; 0x1208 <lcd12864_send_data>
				lcd12864_send_data(block);
    1404:	8c 2f       	mov	r24, r28
    1406:	00 df       	rcall	.-512    	; 0x1208 <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    1408:	df 5f       	subi	r29, 0xFF	; 255
    140a:	1d 13       	cpse	r17, r29
    140c:	f9 cf       	rjmp	.-14     	; 0x1400 <lcd12864_SetWhite+0x136>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    140e:	8c 2f       	mov	r24, r28
    1410:	fb de       	rcall	.-522    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	f9 de       	rcall	.-526    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
		real_width = width/2-1;
		for(i=0;i<16;i++){
    1416:	0f 5f       	subi	r16, 0xFF	; 255
    1418:	00 31       	cpi	r16, 0x10	; 16
    141a:	31 f7       	brne	.-52     	; 0x13e8 <lcd12864_SetWhite+0x11e>
    141c:	18 c0       	rjmp	.+48     	; 0x144e <lcd12864_SetWhite+0x184>
			lcd12864_send_data(0x00);
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
    141e:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1420:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    1422:	80 2f       	mov	r24, r16
    1424:	8e 0d       	add	r24, r14
    1426:	00 df       	rcall	.-512    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1428:	8f 2d       	mov	r24, r15
    142a:	fe de       	rcall	.-516    	; 0x1228 <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	ec de       	rcall	.-552    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(block);
    1430:	8c 2f       	mov	r24, r28
    1432:	ea de       	rcall	.-556    	; 0x1208 <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    1434:	11 23       	and	r17, r17
    1436:	41 f0       	breq	.+16     	; 0x1448 <lcd12864_SetWhite+0x17e>
    1438:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    143a:	8c 2f       	mov	r24, r28
    143c:	e5 de       	rcall	.-566    	; 0x1208 <lcd12864_send_data>
				lcd12864_send_data(block);
    143e:	8c 2f       	mov	r24, r28
    1440:	e3 de       	rcall	.-570    	; 0x1208 <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    1442:	df 5f       	subi	r29, 0xFF	; 255
    1444:	d1 13       	cpse	r29, r17
    1446:	f9 cf       	rjmp	.-14     	; 0x143a <lcd12864_SetWhite+0x170>
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    1448:	0f 5f       	subi	r16, 0xFF	; 255
    144a:	00 31       	cpi	r16, 0x10	; 16
    144c:	51 f7       	brne	.-44     	; 0x1422 <lcd12864_SetWhite+0x158>
			}
			
		}
	}
	
	lcd12864_send_cmd(0x36);
    144e:	86 e3       	ldi	r24, 0x36	; 54
    1450:	eb de       	rcall	.-554    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_send_cmd(0x30);		
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	e9 de       	rcall	.-558    	; 0x1228 <lcd12864_send_cmd>
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <lcd12864_SetWhite+0x198>
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
	uint8_t block;
	if(clear) block=0x00; 
    1458:	c1 e0       	ldi	r28, 0x01	; 1
    145a:	21 11       	cpse	r18, r1
    145c:	c0 e0       	ldi	r28, 0x00	; 0
    145e:	c1 95       	neg	r28
    1460:	52 cf       	rjmp	.-348    	; 0x1306 <lcd12864_SetWhite+0x3c>
		}
	}
	
	lcd12864_send_cmd(0x36);
	lcd12864_send_cmd(0x30);		
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	08 95       	ret

00001472 <lcd12864_clrGDRAM>:

void lcd12864_clrGDRAM(void){
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
    1478:	84 e3       	ldi	r24, 0x34	; 52
    147a:	d6 de       	rcall	.-596    	; 0x1228 <lcd12864_send_cmd>
    147c:	d0 e8       	ldi	r29, 0x80	; 128
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
    147e:	10 e1       	ldi	r17, 0x10	; 16

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    1480:	8d 2f       	mov	r24, r29
    1482:	d2 de       	rcall	.-604    	; 0x1228 <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	d0 de       	rcall	.-608    	; 0x1228 <lcd12864_send_cmd>
    1488:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	bd de       	rcall	.-646    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	bb de       	rcall	.-650    	; 0x1208 <lcd12864_send_data>
    1492:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    1494:	d1 f7       	brne	.-12     	; 0x148a <lcd12864_clrGDRAM+0x18>
    1496:	df 5f       	subi	r29, 0xFF	; 255
}

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
    1498:	d0 39       	cpi	r29, 0x90	; 144
    149a:	91 f7       	brne	.-28     	; 0x1480 <lcd12864_clrGDRAM+0xe>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
    149c:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    149e:	8d 2f       	mov	r24, r29
    14a0:	c3 de       	rcall	.-634    	; 0x1228 <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    14a2:	80 e8       	ldi	r24, 0x80	; 128
    14a4:	c1 de       	rcall	.-638    	; 0x1228 <lcd12864_send_cmd>
    14a6:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	ae de       	rcall	.-676    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	ac de       	rcall	.-680    	; 0x1208 <lcd12864_send_data>
    14b0:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <lcd12864_clrGDRAM+0x36>
    14b4:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    14b6:	d0 3a       	cpi	r29, 0xA0	; 160
    14b8:	91 f7       	brne	.-28     	; 0x149e <lcd12864_clrGDRAM+0x2c>
    14ba:	d0 e8       	ldi	r29, 0x80	; 128
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
    14bc:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    14be:	8d 2f       	mov	r24, r29
    14c0:	b3 de       	rcall	.-666    	; 0x1228 <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    14c2:	88 e8       	ldi	r24, 0x88	; 136
    14c4:	b1 de       	rcall	.-670    	; 0x1228 <lcd12864_send_cmd>
    14c6:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	9e de       	rcall	.-708    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	9c de       	rcall	.-712    	; 0x1208 <lcd12864_send_data>
    14d0:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    14d2:	d1 f7       	brne	.-12     	; 0x14c8 <lcd12864_clrGDRAM+0x56>
    14d4:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    14d6:	d0 39       	cpi	r29, 0x90	; 144
    14d8:	91 f7       	brne	.-28     	; 0x14be <lcd12864_clrGDRAM+0x4c>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
    14da:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    14dc:	8d 2f       	mov	r24, r29
    14de:	a4 de       	rcall	.-696    	; 0x1228 <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    14e0:	88 e8       	ldi	r24, 0x88	; 136
    14e2:	a2 de       	rcall	.-700    	; 0x1228 <lcd12864_send_cmd>
    14e4:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	8f de       	rcall	.-738    	; 0x1208 <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	8d de       	rcall	.-742    	; 0x1208 <lcd12864_send_data>
    14ee:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    14f0:	d1 f7       	brne	.-12     	; 0x14e6 <lcd12864_clrGDRAM+0x74>
    14f2:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    14f4:	d0 3a       	cpi	r29, 0xA0	; 160
    14f6:	91 f7       	brne	.-28     	; 0x14dc <lcd12864_clrGDRAM+0x6a>
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	
	lcd12864_send_cmd(0x30);
    14f8:	80 e3       	ldi	r24, 0x30	; 48
    14fa:	96 de       	rcall	.-724    	; 0x1228 <lcd12864_send_cmd>
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	08 95       	ret

00001504 <lcd12864_init>:
#include <stdlib.h>
#define DELAY 150


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
    1504:	82 b1       	in	r24, 0x02	; 2
    1506:	88 6f       	ori	r24, 0xF8	; 248
    1508:	82 b9       	out	0x02, r24	; 2
	LCD12864_RESET_0;
    150a:	1d 98       	cbi	0x03, 5	; 3
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	81 15       	cp	r24, r1
    1514:	20 ef       	ldi	r18, 0xF0	; 240
    1516:	92 07       	cpc	r25, r18
    1518:	d9 f7       	brne	.-10     	; 0x1510 <lcd12864_init+0xc>
	delay_ms(50);
	LCD12864_RESET;
    151a:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
    151c:	1f 98       	cbi	0x03, 7	; 3
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	81 15       	cp	r24, r1
    1526:	20 e3       	ldi	r18, 0x30	; 48
    1528:	92 07       	cpc	r25, r18
    152a:	d9 f7       	brne	.-10     	; 0x1522 <lcd12864_init+0x1e>
	delay_ms(10);
	lcd12864_send_cmd(0x30);
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	7c de       	rcall	.-776    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	7a de       	rcall	.-780    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_send_cmd(0x01);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	78 de       	rcall	.-784    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_send_cmd(0x02);
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	76 de       	rcall	.-788    	; 0x1228 <lcd12864_send_cmd>

	lcd12864_send_cmd(0x80);
    153c:	80 e8       	ldi	r24, 0x80	; 128
    153e:	74 de       	rcall	.-792    	; 0x1228 <lcd12864_send_cmd>

	lcd12864_send_cmd(0x04);
    1540:	84 e0       	ldi	r24, 0x04	; 4
    1542:	72 de       	rcall	.-796    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1544:	8c e0       	ldi	r24, 0x0C	; 12
    1546:	70 de       	rcall	.-800    	; 0x1228 <lcd12864_send_cmd>
	lcd12864_clrGDRAM();
    1548:	94 cf       	rjmp	.-216    	; 0x1472 <lcd12864_clrGDRAM>
    154a:	08 95       	ret

0000154c <__subsf3>:
    154c:	50 58       	subi	r21, 0x80	; 128

0000154e <__addsf3>:
    154e:	bb 27       	eor	r27, r27
    1550:	aa 27       	eor	r26, r26
    1552:	0e d0       	rcall	.+28     	; 0x1570 <__addsf3x>
    1554:	e5 c0       	rjmp	.+458    	; 0x1720 <__fp_round>
    1556:	d6 d0       	rcall	.+428    	; 0x1704 <__fp_pscA>
    1558:	30 f0       	brcs	.+12     	; 0x1566 <__addsf3+0x18>
    155a:	db d0       	rcall	.+438    	; 0x1712 <__fp_pscB>
    155c:	20 f0       	brcs	.+8      	; 0x1566 <__addsf3+0x18>
    155e:	31 f4       	brne	.+12     	; 0x156c <__addsf3+0x1e>
    1560:	9f 3f       	cpi	r25, 0xFF	; 255
    1562:	11 f4       	brne	.+4      	; 0x1568 <__addsf3+0x1a>
    1564:	1e f4       	brtc	.+6      	; 0x156c <__addsf3+0x1e>
    1566:	cb c0       	rjmp	.+406    	; 0x16fe <__fp_nan>
    1568:	0e f4       	brtc	.+2      	; 0x156c <__addsf3+0x1e>
    156a:	e0 95       	com	r30
    156c:	e7 fb       	bst	r30, 7
    156e:	c1 c0       	rjmp	.+386    	; 0x16f2 <__fp_inf>

00001570 <__addsf3x>:
    1570:	e9 2f       	mov	r30, r25
    1572:	e7 d0       	rcall	.+462    	; 0x1742 <__fp_split3>
    1574:	80 f3       	brcs	.-32     	; 0x1556 <__addsf3+0x8>
    1576:	ba 17       	cp	r27, r26
    1578:	62 07       	cpc	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	84 07       	cpc	r24, r20
    157e:	95 07       	cpc	r25, r21
    1580:	18 f0       	brcs	.+6      	; 0x1588 <__addsf3x+0x18>
    1582:	71 f4       	brne	.+28     	; 0x15a0 <__addsf3x+0x30>
    1584:	9e f5       	brtc	.+102    	; 0x15ec <__addsf3x+0x7c>
    1586:	ff c0       	rjmp	.+510    	; 0x1786 <__fp_zero>
    1588:	0e f4       	brtc	.+2      	; 0x158c <__addsf3x+0x1c>
    158a:	e0 95       	com	r30
    158c:	0b 2e       	mov	r0, r27
    158e:	ba 2f       	mov	r27, r26
    1590:	a0 2d       	mov	r26, r0
    1592:	0b 01       	movw	r0, r22
    1594:	b9 01       	movw	r22, r18
    1596:	90 01       	movw	r18, r0
    1598:	0c 01       	movw	r0, r24
    159a:	ca 01       	movw	r24, r20
    159c:	a0 01       	movw	r20, r0
    159e:	11 24       	eor	r1, r1
    15a0:	ff 27       	eor	r31, r31
    15a2:	59 1b       	sub	r21, r25
    15a4:	99 f0       	breq	.+38     	; 0x15cc <__addsf3x+0x5c>
    15a6:	59 3f       	cpi	r21, 0xF9	; 249
    15a8:	50 f4       	brcc	.+20     	; 0x15be <__addsf3x+0x4e>
    15aa:	50 3e       	cpi	r21, 0xE0	; 224
    15ac:	68 f1       	brcs	.+90     	; 0x1608 <__addsf3x+0x98>
    15ae:	1a 16       	cp	r1, r26
    15b0:	f0 40       	sbci	r31, 0x00	; 0
    15b2:	a2 2f       	mov	r26, r18
    15b4:	23 2f       	mov	r18, r19
    15b6:	34 2f       	mov	r19, r20
    15b8:	44 27       	eor	r20, r20
    15ba:	58 5f       	subi	r21, 0xF8	; 248
    15bc:	f3 cf       	rjmp	.-26     	; 0x15a4 <__addsf3x+0x34>
    15be:	46 95       	lsr	r20
    15c0:	37 95       	ror	r19
    15c2:	27 95       	ror	r18
    15c4:	a7 95       	ror	r26
    15c6:	f0 40       	sbci	r31, 0x00	; 0
    15c8:	53 95       	inc	r21
    15ca:	c9 f7       	brne	.-14     	; 0x15be <__addsf3x+0x4e>
    15cc:	7e f4       	brtc	.+30     	; 0x15ec <__addsf3x+0x7c>
    15ce:	1f 16       	cp	r1, r31
    15d0:	ba 0b       	sbc	r27, r26
    15d2:	62 0b       	sbc	r22, r18
    15d4:	73 0b       	sbc	r23, r19
    15d6:	84 0b       	sbc	r24, r20
    15d8:	ba f0       	brmi	.+46     	; 0x1608 <__addsf3x+0x98>
    15da:	91 50       	subi	r25, 0x01	; 1
    15dc:	a1 f0       	breq	.+40     	; 0x1606 <__addsf3x+0x96>
    15de:	ff 0f       	add	r31, r31
    15e0:	bb 1f       	adc	r27, r27
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	c2 f7       	brpl	.-16     	; 0x15da <__addsf3x+0x6a>
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <__addsf3x+0x98>
    15ec:	ba 0f       	add	r27, r26
    15ee:	62 1f       	adc	r22, r18
    15f0:	73 1f       	adc	r23, r19
    15f2:	84 1f       	adc	r24, r20
    15f4:	48 f4       	brcc	.+18     	; 0x1608 <__addsf3x+0x98>
    15f6:	87 95       	ror	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b7 95       	ror	r27
    15fe:	f7 95       	ror	r31
    1600:	9e 3f       	cpi	r25, 0xFE	; 254
    1602:	08 f0       	brcs	.+2      	; 0x1606 <__addsf3x+0x96>
    1604:	b3 cf       	rjmp	.-154    	; 0x156c <__addsf3+0x1e>
    1606:	93 95       	inc	r25
    1608:	88 0f       	add	r24, r24
    160a:	08 f0       	brcs	.+2      	; 0x160e <__addsf3x+0x9e>
    160c:	99 27       	eor	r25, r25
    160e:	ee 0f       	add	r30, r30
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	08 95       	ret

00001616 <__fixsfsi>:
    1616:	04 d0       	rcall	.+8      	; 0x1620 <__fixunssfsi>
    1618:	68 94       	set
    161a:	b1 11       	cpse	r27, r1
    161c:	b5 c0       	rjmp	.+362    	; 0x1788 <__fp_szero>
    161e:	08 95       	ret

00001620 <__fixunssfsi>:
    1620:	98 d0       	rcall	.+304    	; 0x1752 <__fp_splitA>
    1622:	88 f0       	brcs	.+34     	; 0x1646 <__fixunssfsi+0x26>
    1624:	9f 57       	subi	r25, 0x7F	; 127
    1626:	90 f0       	brcs	.+36     	; 0x164c <__fixunssfsi+0x2c>
    1628:	b9 2f       	mov	r27, r25
    162a:	99 27       	eor	r25, r25
    162c:	b7 51       	subi	r27, 0x17	; 23
    162e:	a0 f0       	brcs	.+40     	; 0x1658 <__fixunssfsi+0x38>
    1630:	d1 f0       	breq	.+52     	; 0x1666 <__fixunssfsi+0x46>
    1632:	66 0f       	add	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	1a f0       	brmi	.+6      	; 0x1642 <__fixunssfsi+0x22>
    163c:	ba 95       	dec	r27
    163e:	c9 f7       	brne	.-14     	; 0x1632 <__fixunssfsi+0x12>
    1640:	12 c0       	rjmp	.+36     	; 0x1666 <__fixunssfsi+0x46>
    1642:	b1 30       	cpi	r27, 0x01	; 1
    1644:	81 f0       	breq	.+32     	; 0x1666 <__fixunssfsi+0x46>
    1646:	9f d0       	rcall	.+318    	; 0x1786 <__fp_zero>
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	08 95       	ret
    164c:	9c c0       	rjmp	.+312    	; 0x1786 <__fp_zero>
    164e:	67 2f       	mov	r22, r23
    1650:	78 2f       	mov	r23, r24
    1652:	88 27       	eor	r24, r24
    1654:	b8 5f       	subi	r27, 0xF8	; 248
    1656:	39 f0       	breq	.+14     	; 0x1666 <__fixunssfsi+0x46>
    1658:	b9 3f       	cpi	r27, 0xF9	; 249
    165a:	cc f3       	brlt	.-14     	; 0x164e <__fixunssfsi+0x2e>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b3 95       	inc	r27
    1664:	d9 f7       	brne	.-10     	; 0x165c <__fixunssfsi+0x3c>
    1666:	3e f4       	brtc	.+14     	; 0x1676 <__fixunssfsi+0x56>
    1668:	90 95       	com	r25
    166a:	80 95       	com	r24
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__floatunsisf>:
    1678:	e8 94       	clt
    167a:	09 c0       	rjmp	.+18     	; 0x168e <__floatsisf+0x12>

0000167c <__floatsisf>:
    167c:	97 fb       	bst	r25, 7
    167e:	3e f4       	brtc	.+14     	; 0x168e <__floatsisf+0x12>
    1680:	90 95       	com	r25
    1682:	80 95       	com	r24
    1684:	70 95       	com	r23
    1686:	61 95       	neg	r22
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	8f 4f       	sbci	r24, 0xFF	; 255
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	99 23       	and	r25, r25
    1690:	a9 f0       	breq	.+42     	; 0x16bc <__floatsisf+0x40>
    1692:	f9 2f       	mov	r31, r25
    1694:	96 e9       	ldi	r25, 0x96	; 150
    1696:	bb 27       	eor	r27, r27
    1698:	93 95       	inc	r25
    169a:	f6 95       	lsr	r31
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f1 11       	cpse	r31, r1
    16a6:	f8 cf       	rjmp	.-16     	; 0x1698 <__floatsisf+0x1c>
    16a8:	fa f4       	brpl	.+62     	; 0x16e8 <__floatsisf+0x6c>
    16aa:	bb 0f       	add	r27, r27
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <__floatsisf+0x36>
    16ae:	60 ff       	sbrs	r22, 0
    16b0:	1b c0       	rjmp	.+54     	; 0x16e8 <__floatsisf+0x6c>
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	16 c0       	rjmp	.+44     	; 0x16e8 <__floatsisf+0x6c>
    16bc:	88 23       	and	r24, r24
    16be:	11 f0       	breq	.+4      	; 0x16c4 <__floatsisf+0x48>
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	11 c0       	rjmp	.+34     	; 0x16e6 <__floatsisf+0x6a>
    16c4:	77 23       	and	r23, r23
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <__floatsisf+0x54>
    16c8:	9e e8       	ldi	r25, 0x8E	; 142
    16ca:	87 2f       	mov	r24, r23
    16cc:	76 2f       	mov	r23, r22
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__floatsisf+0x5e>
    16d0:	66 23       	and	r22, r22
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__floatsisf+0x74>
    16d4:	96 e8       	ldi	r25, 0x86	; 134
    16d6:	86 2f       	mov	r24, r22
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	2a f0       	brmi	.+10     	; 0x16e8 <__floatsisf+0x6c>
    16de:	9a 95       	dec	r25
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	da f7       	brpl	.-10     	; 0x16de <__floatsisf+0x62>
    16e8:	88 0f       	add	r24, r24
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <__fp_inf>:
    16f2:	97 f9       	bld	r25, 7
    16f4:	9f 67       	ori	r25, 0x7F	; 127
    16f6:	80 e8       	ldi	r24, 0x80	; 128
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	08 95       	ret

000016fe <__fp_nan>:
    16fe:	9f ef       	ldi	r25, 0xFF	; 255
    1700:	80 ec       	ldi	r24, 0xC0	; 192
    1702:	08 95       	ret

00001704 <__fp_pscA>:
    1704:	00 24       	eor	r0, r0
    1706:	0a 94       	dec	r0
    1708:	16 16       	cp	r1, r22
    170a:	17 06       	cpc	r1, r23
    170c:	18 06       	cpc	r1, r24
    170e:	09 06       	cpc	r0, r25
    1710:	08 95       	ret

00001712 <__fp_pscB>:
    1712:	00 24       	eor	r0, r0
    1714:	0a 94       	dec	r0
    1716:	12 16       	cp	r1, r18
    1718:	13 06       	cpc	r1, r19
    171a:	14 06       	cpc	r1, r20
    171c:	05 06       	cpc	r0, r21
    171e:	08 95       	ret

00001720 <__fp_round>:
    1720:	09 2e       	mov	r0, r25
    1722:	03 94       	inc	r0
    1724:	00 0c       	add	r0, r0
    1726:	11 f4       	brne	.+4      	; 0x172c <__fp_round+0xc>
    1728:	88 23       	and	r24, r24
    172a:	52 f0       	brmi	.+20     	; 0x1740 <__fp_round+0x20>
    172c:	bb 0f       	add	r27, r27
    172e:	40 f4       	brcc	.+16     	; 0x1740 <__fp_round+0x20>
    1730:	bf 2b       	or	r27, r31
    1732:	11 f4       	brne	.+4      	; 0x1738 <__fp_round+0x18>
    1734:	60 ff       	sbrs	r22, 0
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <__fp_round+0x20>
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	08 95       	ret

00001742 <__fp_split3>:
    1742:	57 fd       	sbrc	r21, 7
    1744:	90 58       	subi	r25, 0x80	; 128
    1746:	44 0f       	add	r20, r20
    1748:	55 1f       	adc	r21, r21
    174a:	59 f0       	breq	.+22     	; 0x1762 <__fp_splitA+0x10>
    174c:	5f 3f       	cpi	r21, 0xFF	; 255
    174e:	71 f0       	breq	.+28     	; 0x176c <__fp_splitA+0x1a>
    1750:	47 95       	ror	r20

00001752 <__fp_splitA>:
    1752:	88 0f       	add	r24, r24
    1754:	97 fb       	bst	r25, 7
    1756:	99 1f       	adc	r25, r25
    1758:	61 f0       	breq	.+24     	; 0x1772 <__fp_splitA+0x20>
    175a:	9f 3f       	cpi	r25, 0xFF	; 255
    175c:	79 f0       	breq	.+30     	; 0x177c <__fp_splitA+0x2a>
    175e:	87 95       	ror	r24
    1760:	08 95       	ret
    1762:	12 16       	cp	r1, r18
    1764:	13 06       	cpc	r1, r19
    1766:	14 06       	cpc	r1, r20
    1768:	55 1f       	adc	r21, r21
    176a:	f2 cf       	rjmp	.-28     	; 0x1750 <__fp_split3+0xe>
    176c:	46 95       	lsr	r20
    176e:	f1 df       	rcall	.-30     	; 0x1752 <__fp_splitA>
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <__fp_splitA+0x30>
    1772:	16 16       	cp	r1, r22
    1774:	17 06       	cpc	r1, r23
    1776:	18 06       	cpc	r1, r24
    1778:	99 1f       	adc	r25, r25
    177a:	f1 cf       	rjmp	.-30     	; 0x175e <__fp_splitA+0xc>
    177c:	86 95       	lsr	r24
    177e:	71 05       	cpc	r23, r1
    1780:	61 05       	cpc	r22, r1
    1782:	08 94       	sec
    1784:	08 95       	ret

00001786 <__fp_zero>:
    1786:	e8 94       	clt

00001788 <__fp_szero>:
    1788:	bb 27       	eor	r27, r27
    178a:	66 27       	eor	r22, r22
    178c:	77 27       	eor	r23, r23
    178e:	cb 01       	movw	r24, r22
    1790:	97 f9       	bld	r25, 7
    1792:	08 95       	ret

00001794 <__mulsf3>:
    1794:	0b d0       	rcall	.+22     	; 0x17ac <__mulsf3x>
    1796:	c4 cf       	rjmp	.-120    	; 0x1720 <__fp_round>
    1798:	b5 df       	rcall	.-150    	; 0x1704 <__fp_pscA>
    179a:	28 f0       	brcs	.+10     	; 0x17a6 <__mulsf3+0x12>
    179c:	ba df       	rcall	.-140    	; 0x1712 <__fp_pscB>
    179e:	18 f0       	brcs	.+6      	; 0x17a6 <__mulsf3+0x12>
    17a0:	95 23       	and	r25, r21
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__mulsf3+0x12>
    17a4:	a6 cf       	rjmp	.-180    	; 0x16f2 <__fp_inf>
    17a6:	ab cf       	rjmp	.-170    	; 0x16fe <__fp_nan>
    17a8:	11 24       	eor	r1, r1
    17aa:	ee cf       	rjmp	.-36     	; 0x1788 <__fp_szero>

000017ac <__mulsf3x>:
    17ac:	ca df       	rcall	.-108    	; 0x1742 <__fp_split3>
    17ae:	a0 f3       	brcs	.-24     	; 0x1798 <__mulsf3+0x4>

000017b0 <__mulsf3_pse>:
    17b0:	95 9f       	mul	r25, r21
    17b2:	d1 f3       	breq	.-12     	; 0x17a8 <__mulsf3+0x14>
    17b4:	95 0f       	add	r25, r21
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	55 1f       	adc	r21, r21
    17ba:	62 9f       	mul	r22, r18
    17bc:	f0 01       	movw	r30, r0
    17be:	72 9f       	mul	r23, r18
    17c0:	bb 27       	eor	r27, r27
    17c2:	f0 0d       	add	r31, r0
    17c4:	b1 1d       	adc	r27, r1
    17c6:	63 9f       	mul	r22, r19
    17c8:	aa 27       	eor	r26, r26
    17ca:	f0 0d       	add	r31, r0
    17cc:	b1 1d       	adc	r27, r1
    17ce:	aa 1f       	adc	r26, r26
    17d0:	64 9f       	mul	r22, r20
    17d2:	66 27       	eor	r22, r22
    17d4:	b0 0d       	add	r27, r0
    17d6:	a1 1d       	adc	r26, r1
    17d8:	66 1f       	adc	r22, r22
    17da:	82 9f       	mul	r24, r18
    17dc:	22 27       	eor	r18, r18
    17de:	b0 0d       	add	r27, r0
    17e0:	a1 1d       	adc	r26, r1
    17e2:	62 1f       	adc	r22, r18
    17e4:	73 9f       	mul	r23, r19
    17e6:	b0 0d       	add	r27, r0
    17e8:	a1 1d       	adc	r26, r1
    17ea:	62 1f       	adc	r22, r18
    17ec:	83 9f       	mul	r24, r19
    17ee:	a0 0d       	add	r26, r0
    17f0:	61 1d       	adc	r22, r1
    17f2:	22 1f       	adc	r18, r18
    17f4:	74 9f       	mul	r23, r20
    17f6:	33 27       	eor	r19, r19
    17f8:	a0 0d       	add	r26, r0
    17fa:	61 1d       	adc	r22, r1
    17fc:	23 1f       	adc	r18, r19
    17fe:	84 9f       	mul	r24, r20
    1800:	60 0d       	add	r22, r0
    1802:	21 1d       	adc	r18, r1
    1804:	82 2f       	mov	r24, r18
    1806:	76 2f       	mov	r23, r22
    1808:	6a 2f       	mov	r22, r26
    180a:	11 24       	eor	r1, r1
    180c:	9f 57       	subi	r25, 0x7F	; 127
    180e:	50 40       	sbci	r21, 0x00	; 0
    1810:	8a f0       	brmi	.+34     	; 0x1834 <__mulsf3_pse+0x84>
    1812:	e1 f0       	breq	.+56     	; 0x184c <__mulsf3_pse+0x9c>
    1814:	88 23       	and	r24, r24
    1816:	4a f0       	brmi	.+18     	; 0x182a <__mulsf3_pse+0x7a>
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	bb 1f       	adc	r27, r27
    181e:	66 1f       	adc	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	88 1f       	adc	r24, r24
    1824:	91 50       	subi	r25, 0x01	; 1
    1826:	50 40       	sbci	r21, 0x00	; 0
    1828:	a9 f7       	brne	.-22     	; 0x1814 <__mulsf3_pse+0x64>
    182a:	9e 3f       	cpi	r25, 0xFE	; 254
    182c:	51 05       	cpc	r21, r1
    182e:	70 f0       	brcs	.+28     	; 0x184c <__mulsf3_pse+0x9c>
    1830:	60 cf       	rjmp	.-320    	; 0x16f2 <__fp_inf>
    1832:	aa cf       	rjmp	.-172    	; 0x1788 <__fp_szero>
    1834:	5f 3f       	cpi	r21, 0xFF	; 255
    1836:	ec f3       	brlt	.-6      	; 0x1832 <__mulsf3_pse+0x82>
    1838:	98 3e       	cpi	r25, 0xE8	; 232
    183a:	dc f3       	brlt	.-10     	; 0x1832 <__mulsf3_pse+0x82>
    183c:	86 95       	lsr	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	b7 95       	ror	r27
    1844:	f7 95       	ror	r31
    1846:	e7 95       	ror	r30
    1848:	9f 5f       	subi	r25, 0xFF	; 255
    184a:	c1 f7       	brne	.-16     	; 0x183c <__mulsf3_pse+0x8c>
    184c:	fe 2b       	or	r31, r30
    184e:	88 0f       	add	r24, r24
    1850:	91 1d       	adc	r25, r1
    1852:	96 95       	lsr	r25
    1854:	87 95       	ror	r24
    1856:	97 f9       	bld	r25, 7
    1858:	08 95       	ret

0000185a <__umulhisi3>:
    185a:	a2 9f       	mul	r26, r18
    185c:	b0 01       	movw	r22, r0
    185e:	b3 9f       	mul	r27, r19
    1860:	c0 01       	movw	r24, r0
    1862:	a3 9f       	mul	r26, r19
    1864:	70 0d       	add	r23, r0
    1866:	81 1d       	adc	r24, r1
    1868:	11 24       	eor	r1, r1
    186a:	91 1d       	adc	r25, r1
    186c:	b2 9f       	mul	r27, r18
    186e:	70 0d       	add	r23, r0
    1870:	81 1d       	adc	r24, r1
    1872:	11 24       	eor	r1, r1
    1874:	91 1d       	adc	r25, r1
    1876:	08 95       	ret

00001878 <__itoa_ncheck>:
    1878:	bb 27       	eor	r27, r27
    187a:	4a 30       	cpi	r20, 0x0A	; 10
    187c:	31 f4       	brne	.+12     	; 0x188a <__itoa_ncheck+0x12>
    187e:	99 23       	and	r25, r25
    1880:	22 f4       	brpl	.+8      	; 0x188a <__itoa_ncheck+0x12>
    1882:	bd e2       	ldi	r27, 0x2D	; 45
    1884:	90 95       	com	r25
    1886:	81 95       	neg	r24
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	01 c0       	rjmp	.+2      	; 0x188e <__utoa_common>

0000188c <__utoa_ncheck>:
    188c:	bb 27       	eor	r27, r27

0000188e <__utoa_common>:
    188e:	fb 01       	movw	r30, r22
    1890:	55 27       	eor	r21, r21
    1892:	aa 27       	eor	r26, r26
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	aa 1f       	adc	r26, r26
    189a:	a4 17       	cp	r26, r20
    189c:	10 f0       	brcs	.+4      	; 0x18a2 <__utoa_common+0x14>
    189e:	a4 1b       	sub	r26, r20
    18a0:	83 95       	inc	r24
    18a2:	50 51       	subi	r21, 0x10	; 16
    18a4:	b9 f7       	brne	.-18     	; 0x1894 <__utoa_common+0x6>
    18a6:	a0 5d       	subi	r26, 0xD0	; 208
    18a8:	aa 33       	cpi	r26, 0x3A	; 58
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <__utoa_common+0x20>
    18ac:	a9 5d       	subi	r26, 0xD9	; 217
    18ae:	a1 93       	st	Z+, r26
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	79 f7       	brne	.-34     	; 0x1892 <__utoa_common+0x4>
    18b4:	b1 11       	cpse	r27, r1
    18b6:	b1 93       	st	Z+, r27
    18b8:	11 92       	st	Z+, r1
    18ba:	cb 01       	movw	r24, r22
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <strrev>

000018be <strrev>:
    18be:	dc 01       	movw	r26, r24
    18c0:	fc 01       	movw	r30, r24
    18c2:	67 2f       	mov	r22, r23
    18c4:	71 91       	ld	r23, Z+
    18c6:	77 23       	and	r23, r23
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <strrev+0x4>
    18ca:	32 97       	sbiw	r30, 0x02	; 2
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <strrev+0x18>
    18ce:	7c 91       	ld	r23, X
    18d0:	6d 93       	st	X+, r22
    18d2:	70 83       	st	Z, r23
    18d4:	62 91       	ld	r22, -Z
    18d6:	ae 17       	cp	r26, r30
    18d8:	bf 07       	cpc	r27, r31
    18da:	c8 f3       	brcs	.-14     	; 0x18ce <strrev+0x10>
    18dc:	08 95       	ret

000018de <_exit>:
    18de:	f8 94       	cli

000018e0 <__stop_program>:
    18e0:	ff cf       	rjmp	.-2      	; 0x18e0 <__stop_program>

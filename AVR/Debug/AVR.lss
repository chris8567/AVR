
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b0  00800100  00002422  000024b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  008005b0  008005b0  00002966  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d8  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ca0  00000000  00000000  00002c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cec  00000000  00000000  0000590e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000463f  00000000  00000000  000065fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000065c  00000000  00000000  0000ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011084  00000000  00000000  0000b298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000172f  00000000  00000000  0001c31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0001da4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001636  00000000  00000000  0001dc93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_2>
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_15>
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 0e       	add	r15, r22
      8e:	15 0f       	add	r17, r21
      90:	34 0f       	add	r19, r20
      92:	53 0f       	add	r21, r19
      94:	72 0f       	add	r23, r18
      96:	91 0f       	add	r25, r17
      98:	b0 0f       	add	r27, r16

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	15 e0       	ldi	r17, 0x05	; 5
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 e2       	ldi	r30, 0x22	; 34
      ae:	f4 e2       	ldi	r31, 0x24	; 36
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 3b       	cpi	r26, 0xB0	; 176
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	26 e0       	ldi	r18, 0x06	; 6
      c2:	a0 eb       	ldi	r26, 0xB0	; 176
      c4:	b5 e0       	ldi	r27, 0x05	; 5
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	af 30       	cpi	r26, 0x0F	; 15
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 0f 12 	jmp	0x241e	; 0x241e <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      d8:	0e 94 41 0c 	call	0x1882	; 0x1882 <buttons_init>
	lcd12864_init();
      dc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd12864_init>
	init_IO();
      e0:	f9 d3       	rcall	.+2034   	; 0x8d4 <init_IO>
	emv_ports_init();
      e2:	fc d2       	rcall	.+1528   	; 0x6dc <emv_ports_init>
	Timer0_Init();
      e4:	0e 94 09 0b 	call	0x1612	; 0x1612 <Timer0_Init>
	ADC_init();
      e8:	68 d2       	rcall	.+1232   	; 0x5ba <ADC_init>
	Menu_Init();
      ea:	0e 94 3f 0a 	call	0x147e	; 0x147e <Menu_Init>
	

	while(1){
	Menu_Poll();
      ee:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <Menu_Poll>
      f2:	fd cf       	rjmp	.-6      	; 0xee <main+0x16>

000000f4 <Fun_UnitChange>:
	}


}

float Fun_UnitChange(uint16_t ADValue){
      f4:	bc 01       	movw	r22, r24
	float result; 
	if(PD_Unit == UNIT_PA)
      f6:	80 91 05 01 	lds	r24, 0x0105
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	89 f4       	brne	.+34     	; 0x120 <Fun_UnitChange+0x2c>
		result = ((float)ADValue * 3.4)/921.0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__floatunsisf>
     106:	2a e9       	ldi	r18, 0x9A	; 154
     108:	39 e9       	ldi	r19, 0x99	; 153
     10a:	49 e5       	ldi	r20, 0x59	; 89
     10c:	50 e4       	ldi	r21, 0x40	; 64
     10e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__mulsf3>
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	30 e4       	ldi	r19, 0x40	; 64
     116:	46 e6       	ldi	r20, 0x66	; 102
     118:	54 e4       	ldi	r21, 0x44	; 68
     11a:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__divsf3>
     11e:	08 95       	ret
	else
		result = ((float)ADValue * 346.7)/921.0;
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__floatunsisf>
     128:	2a e9       	ldi	r18, 0x9A	; 154
     12a:	39 e5       	ldi	r19, 0x59	; 89
     12c:	4d ea       	ldi	r20, 0xAD	; 173
     12e:	53 e4       	ldi	r21, 0x43	; 67
     130:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__mulsf3>
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e4       	ldi	r19, 0x40	; 64
     138:	46 e6       	ldi	r20, 0x66	; 102
     13a:	54 e4       	ldi	r21, 0x44	; 68
     13c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__divsf3>
	return result;
	
		
	
}
     140:	08 95       	ret

00000142 <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <Act_Update_Main+0x12>
     154:	00 d0       	rcall	.+0      	; 0x156 <Act_Update_Main+0x14>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 91 b8 05 	lds	r25, 0x05B8
     160:	91 11       	cpse	r25, r1
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	80 93 b8 05 	sts	0x05B8, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	int pressure_diff = (int)ADC_read(PRESSURE);
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	40 d2       	rcall	.+1152   	; 0x5ec <ADC_read>
     16c:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixsfsi>
     170:	6b 01       	movw	r12, r22
     172:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     174:	4a e0       	ldi	r20, 0x0A	; 10
     176:	be 01       	movw	r22, r28
     178:	6f 5f       	subi	r22, 0xFF	; 255
     17a:	7f 4f       	sbci	r23, 0xFF	; 255
     17c:	c6 01       	movw	r24, r12
     17e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__itoa_ncheck>
	itoa(pressure_diff,pdstr,10);
	lcd12864_set_pos(0,1);
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	switch(PD_Mode){
     18a:	80 91 00 01 	lds	r24, 0x0100
     18e:	82 30       	cpi	r24, 0x02	; 2
     190:	49 f0       	breq	.+18     	; 0x1a4 <Act_Update_Main+0x62>
     192:	83 30       	cpi	r24, 0x03	; 3
     194:	61 f0       	breq	.+24     	; 0x1ae <Act_Update_Main+0x6c>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	79 f4       	brne	.+30     	; 0x1b8 <Act_Update_Main+0x76>
		case 1:
		lcd12864_write_str(MODE1);
     19a:	8b e1       	ldi	r24, 0x1B	; 27
     19c:	94 e0       	ldi	r25, 0x04	; 4
     19e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		break;
     1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <Act_Update_Main+0x7e>
		case 2:
		lcd12864_write_str(MODE2);
     1a4:	8f e1       	ldi	r24, 0x1F	; 31
     1a6:	94 e0       	ldi	r25, 0x04	; 4
     1a8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		break;
     1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <Act_Update_Main+0x7e>
		case 3:
		lcd12864_write_str(MODE3);
     1ae:	83 e2       	ldi	r24, 0x23	; 35
     1b0:	94 e0       	ldi	r25, 0x04	; 4
     1b2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		break;
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <Act_Update_Main+0x7e>
		default:
		lcd12864_write_str(MODE0);
     1b8:	87 e2       	ldi	r24, 0x27	; 39
     1ba:	94 e0       	ldi	r25, 0x04	; 4
     1bc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		break;
	}
	
	lcd12864_set_pos(4,1);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	84 e0       	ldi	r24, 0x04	; 4
     1c4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	if(Blowing_State){
     1c8:	80 91 b9 05 	lds	r24, 0x05B9
     1cc:	88 23       	and	r24, r24
     1ce:	61 f0       	breq	.+24     	; 0x1e8 <Act_Update_Main+0xa6>
		if(blink_factor)
     1d0:	80 91 b8 05 	lds	r24, 0x05B8
     1d4:	88 23       	and	r24, r24
     1d6:	21 f0       	breq	.+8      	; 0x1e0 <Act_Update_Main+0x9e>
		lcd12864_write_char(0x0f);
     1d8:	8f e0       	ldi	r24, 0x0F	; 15
     1da:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
     1de:	0f c0       	rjmp	.+30     	; 0x1fe <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     1e0:	89 e0       	ldi	r24, 0x09	; 9
     1e2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
     1e6:	0b c0       	rjmp	.+22     	; 0x1fe <Act_Update_Main+0xbc>
	}
	else{
		if(blink_factor)
     1e8:	80 91 b8 05 	lds	r24, 0x05B8
     1ec:	88 23       	and	r24, r24
     1ee:	21 f0       	breq	.+8      	; 0x1f8 <Act_Update_Main+0xb6>
		lcd12864_write_char(0x07);
     1f0:	87 e0       	ldi	r24, 0x07	; 7
     1f2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
     1f6:	03 c0       	rjmp	.+6      	; 0x1fe <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	87 e0       	ldi	r24, 0x07	; 7
     202:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	if(Alarm_State){
     206:	80 91 ba 05 	lds	r24, 0x05BA
     20a:	88 23       	and	r24, r24
     20c:	61 f0       	breq	.+24     	; 0x226 <Act_Update_Main+0xe4>
		if(blink_factor)
     20e:	80 91 b8 05 	lds	r24, 0x05B8
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <Act_Update_Main+0xdc>
			lcd12864_write_char(0x21);
     216:	81 e2       	ldi	r24, 0x21	; 33
     218:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
     21c:	07 c0       	rjmp	.+14     	; 0x22c <Act_Update_Main+0xea>
		else
			lcd12864_write_char(' ');
     21e:	80 e2       	ldi	r24, 0x20	; 32
     220:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
     224:	03 c0       	rjmp	.+6      	; 0x22c <Act_Update_Main+0xea>
	}
	else{
		lcd12864_write_char(0x02);
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	85 e0       	ldi	r24, 0x05	; 5
     230:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	lcd12864_write_float(Fun_UnitChange(pressure_diff));
     234:	86 01       	movw	r16, r12
     236:	c6 01       	movw	r24, r12
     238:	5d df       	rcall	.-326    	; 0xf4 <Fun_UnitChange>
     23a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <lcd12864_write_float>
	lcd12864_set_pos(3,3);
     23e:	63 e0       	ldi	r22, 0x03	; 3
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	s++;
     246:	80 91 b6 05 	lds	r24, 0x05B6
     24a:	90 91 b7 05 	lds	r25, 0x05B7
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 b7 05 	sts	0x05B7, r25
     254:	80 93 b6 05 	sts	0x05B6, r24
	if(s==60){
     258:	cc 97       	sbiw	r24, 0x3c	; 60
     25a:	69 f4       	brne	.+26     	; 0x276 <Act_Update_Main+0x134>
		m++; s=0;
     25c:	80 91 b4 05 	lds	r24, 0x05B4
     260:	90 91 b5 05 	lds	r25, 0x05B5
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 b5 05 	sts	0x05B5, r25
     26a:	80 93 b4 05 	sts	0x05B4, r24
     26e:	10 92 b7 05 	sts	0x05B7, r1
     272:	10 92 b6 05 	sts	0x05B6, r1
	}
	if(m==60){
     276:	80 91 b4 05 	lds	r24, 0x05B4
     27a:	90 91 b5 05 	lds	r25, 0x05B5
     27e:	cc 97       	sbiw	r24, 0x3c	; 60
     280:	69 f4       	brne	.+26     	; 0x29c <Act_Update_Main+0x15a>
		hours++; m=0;
     282:	80 91 b2 05 	lds	r24, 0x05B2
     286:	90 91 b3 05 	lds	r25, 0x05B3
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 b3 05 	sts	0x05B3, r25
     290:	80 93 b2 05 	sts	0x05B2, r24
     294:	10 92 b5 05 	sts	0x05B5, r1
     298:	10 92 b4 05 	sts	0x05B4, r1
	}
	if(hours == 24){
     29c:	40 91 b2 05 	lds	r20, 0x05B2
     2a0:	50 91 b3 05 	lds	r21, 0x05B3
     2a4:	48 31       	cpi	r20, 0x18	; 24
     2a6:	51 05       	cpc	r21, r1
     2a8:	49 f4       	brne	.+18     	; 0x2bc <Act_Update_Main+0x17a>
		days++;
     2aa:	80 91 b0 05 	lds	r24, 0x05B0
     2ae:	90 91 b1 05 	lds	r25, 0x05B1
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	90 93 b1 05 	sts	0x05B1, r25
     2b8:	80 93 b0 05 	sts	0x05B0, r24
	}
	time[7]=m%10+'0';
     2bc:	e0 90 b4 05 	lds	r14, 0x05B4
     2c0:	f0 90 b5 05 	lds	r15, 0x05B5
     2c4:	eb e2       	ldi	r30, 0x2B	; 43
     2c6:	f4 e0       	ldi	r31, 0x04	; 4
     2c8:	97 01       	movw	r18, r14
     2ca:	ad ec       	ldi	r26, 0xCD	; 205
     2cc:	bc ec       	ldi	r27, 0xCC	; 204
     2ce:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     2d2:	96 95       	lsr	r25
     2d4:	87 95       	ror	r24
     2d6:	96 95       	lsr	r25
     2d8:	87 95       	ror	r24
     2da:	96 95       	lsr	r25
     2dc:	87 95       	ror	r24
     2de:	9c 01       	movw	r18, r24
     2e0:	22 0f       	add	r18, r18
     2e2:	33 1f       	adc	r19, r19
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	82 0f       	add	r24, r18
     2f2:	93 1f       	adc	r25, r19
     2f4:	97 01       	movw	r18, r14
     2f6:	28 1b       	sub	r18, r24
     2f8:	39 0b       	sbc	r19, r25
     2fa:	c9 01       	movw	r24, r18
     2fc:	80 5d       	subi	r24, 0xD0	; 208
     2fe:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     300:	97 01       	movw	r18, r14
     302:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     306:	96 95       	lsr	r25
     308:	87 95       	ror	r24
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	80 5d       	subi	r24, 0xD0	; 208
     314:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     316:	9a 01       	movw	r18, r20
     318:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     31c:	96 95       	lsr	r25
     31e:	87 95       	ror	r24
     320:	96 95       	lsr	r25
     322:	87 95       	ror	r24
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	9c 01       	movw	r18, r24
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	82 0f       	add	r24, r18
     33c:	93 1f       	adc	r25, r19
     33e:	9a 01       	movw	r18, r20
     340:	28 1b       	sub	r18, r24
     342:	39 0b       	sbc	r19, r25
     344:	c9 01       	movw	r24, r18
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     34a:	9a 01       	movw	r18, r20
     34c:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     350:	96 95       	lsr	r25
     352:	87 95       	ror	r24
     354:	96 95       	lsr	r25
     356:	87 95       	ror	r24
     358:	96 95       	lsr	r25
     35a:	87 95       	ror	r24
     35c:	80 5d       	subi	r24, 0xD0	; 208
     35e:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     360:	40 91 b0 05 	lds	r20, 0x05B0
     364:	50 91 b1 05 	lds	r21, 0x05B1
     368:	9a 01       	movw	r18, r20
     36a:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	96 95       	lsr	r25
     378:	87 95       	ror	r24
     37a:	9c 01       	movw	r18, r24
     37c:	22 0f       	add	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 01       	movw	r18, r20
     392:	28 1b       	sub	r18, r24
     394:	39 0b       	sbc	r19, r25
     396:	c9 01       	movw	r24, r18
     398:	80 5d       	subi	r24, 0xD0	; 208
     39a:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     39c:	9a 01       	movw	r18, r20
     39e:	0e 94 cd 11 	call	0x239a	; 0x239a <__umulhisi3>
     3a2:	96 95       	lsr	r25
     3a4:	87 95       	ror	r24
     3a6:	96 95       	lsr	r25
     3a8:	87 95       	ror	r24
     3aa:	96 95       	lsr	r25
     3ac:	87 95       	ror	r24
     3ae:	80 5d       	subi	r24, 0xD0	; 208
     3b0:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     3b2:	cf 01       	movw	r24, r30
     3b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
	
	
	if(pressure_diff > PD_Upper_Limit){
     3b8:	80 91 03 01 	lds	r24, 0x0103
     3bc:	90 91 04 01 	lds	r25, 0x0104
     3c0:	80 17       	cp	r24, r16
     3c2:	91 07       	cpc	r25, r17
     3c4:	28 f4       	brcc	.+10     	; 0x3d0 <Act_Update_Main+0x28e>
			start_sequence();
     3c6:	6b d2       	rcall	.+1238   	; 0x89e <start_sequence>
			Blowing_State = 1;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 b9 05 	sts	0x05B9, r24
     3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <Act_Update_Main+0x2a2>
	}
	else if(pressure_diff < PD_Lower_Limit){
     3d0:	80 91 01 01 	lds	r24, 0x0101
     3d4:	90 91 02 01 	lds	r25, 0x0102
     3d8:	08 17       	cp	r16, r24
     3da:	19 07       	cpc	r17, r25
     3dc:	18 f4       	brcc	.+6      	; 0x3e4 <Act_Update_Main+0x2a2>
		stop_sequence();
     3de:	70 d2       	rcall	.+1248   	; 0x8c0 <stop_sequence>
		Blowing_State = 0;
     3e0:	10 92 b9 05 	sts	0x05B9, r1
	}


}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	08 95       	ret

000003fe <Act_pressure_setting1_display>:
		
	
}

void Act_pressure_setting1_display(void){
	lcd12864_set_pos(5,2);
     3fe:	62 e0       	ldi	r22, 0x02	; 2
     400:	85 e0       	ldi	r24, 0x05	; 5
     402:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	lcd12864_write_float(Fun_UnitChange(PD_Upper_Limit));
     406:	80 91 03 01 	lds	r24, 0x0103
     40a:	90 91 04 01 	lds	r25, 0x0104
     40e:	72 de       	rcall	.-796    	; 0xf4 <Fun_UnitChange>
     410:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <lcd12864_write_float>
	lcd12864_set_pos(5,3);
     414:	63 e0       	ldi	r22, 0x03	; 3
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
	lcd12864_write_float(Fun_UnitChange(PD_Lower_Limit));
     41c:	80 91 01 01 	lds	r24, 0x0101
     420:	90 91 02 01 	lds	r25, 0x0102
     424:	67 de       	rcall	.-818    	; 0xf4 <Fun_UnitChange>
     426:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <lcd12864_write_float>
     42a:	08 95       	ret

0000042c <Act_PdUAddone>:
}


void Act_PdUAddone(void){
		if(PD_Upper_Limit+3<=950)
     42c:	80 91 03 01 	lds	r24, 0x0103
     430:	90 91 04 01 	lds	r25, 0x0104
     434:	03 96       	adiw	r24, 0x03	; 3
     436:	87 3b       	cpi	r24, 0xB7	; 183
     438:	23 e0       	ldi	r18, 0x03	; 3
     43a:	92 07       	cpc	r25, r18
     43c:	20 f4       	brcc	.+8      	; 0x446 <Act_PdUAddone+0x1a>
	PD_Upper_Limit +=3;
     43e:	90 93 04 01 	sts	0x0104, r25
     442:	80 93 03 01 	sts	0x0103, r24
     446:	08 95       	ret

00000448 <Act_PdUDecone>:
}

void Act_PdUDecone(void){
	if(PD_Upper_Limit-3>=PD_Lower_Limit)
     448:	80 91 03 01 	lds	r24, 0x0103
     44c:	90 91 04 01 	lds	r25, 0x0104
     450:	03 97       	sbiw	r24, 0x03	; 3
     452:	20 91 01 01 	lds	r18, 0x0101
     456:	30 91 02 01 	lds	r19, 0x0102
     45a:	82 17       	cp	r24, r18
     45c:	93 07       	cpc	r25, r19
     45e:	20 f0       	brcs	.+8      	; 0x468 <Act_PdUDecone+0x20>
	PD_Upper_Limit-=3;
     460:	90 93 04 01 	sts	0x0104, r25
     464:	80 93 03 01 	sts	0x0103, r24
     468:	08 95       	ret

0000046a <Act_PdDAddone>:
}
void Act_PdDAddone(void){
		if(PD_Lower_Limit+3<PD_Upper_Limit)
     46a:	80 91 01 01 	lds	r24, 0x0101
     46e:	90 91 02 01 	lds	r25, 0x0102
     472:	03 96       	adiw	r24, 0x03	; 3
     474:	20 91 03 01 	lds	r18, 0x0103
     478:	30 91 04 01 	lds	r19, 0x0104
     47c:	82 17       	cp	r24, r18
     47e:	93 07       	cpc	r25, r19
     480:	20 f4       	brcc	.+8      	; 0x48a <Act_PdDAddone+0x20>
		PD_Lower_Limit+=3;
     482:	90 93 02 01 	sts	0x0102, r25
     486:	80 93 01 01 	sts	0x0101, r24
     48a:	08 95       	ret

0000048c <Act_PdDDecone>:
}

void Act_PdDDecone(void){
	if(PD_Lower_Limit-3>=100)
     48c:	80 91 01 01 	lds	r24, 0x0101
     490:	90 91 02 01 	lds	r25, 0x0102
     494:	03 97       	sbiw	r24, 0x03	; 3
     496:	84 36       	cpi	r24, 0x64	; 100
     498:	91 05       	cpc	r25, r1
     49a:	20 f0       	brcs	.+8      	; 0x4a4 <Act_PdDDecone+0x18>
		PD_Lower_Limit-=3;
     49c:	90 93 02 01 	sts	0x0102, r25
     4a0:	80 93 01 01 	sts	0x0101, r24
     4a4:	08 95       	ret

000004a6 <Act_PdUAddten>:
}

void Act_PdUAddten(void){
	if(PD_Upper_Limit+30<=950)
     4a6:	80 91 03 01 	lds	r24, 0x0103
     4aa:	90 91 04 01 	lds	r25, 0x0104
     4ae:	4e 96       	adiw	r24, 0x1e	; 30
     4b0:	87 3b       	cpi	r24, 0xB7	; 183
     4b2:	23 e0       	ldi	r18, 0x03	; 3
     4b4:	92 07       	cpc	r25, r18
     4b6:	20 f4       	brcc	.+8      	; 0x4c0 <Act_PdUAddten+0x1a>
		PD_Upper_Limit +=30;
     4b8:	90 93 04 01 	sts	0x0104, r25
     4bc:	80 93 03 01 	sts	0x0103, r24
     4c0:	08 95       	ret

000004c2 <Act_PdUDecten>:
}

void Act_PdUDecten(void){
	if(PD_Upper_Limit-30>=PD_Lower_Limit)
     4c2:	80 91 03 01 	lds	r24, 0x0103
     4c6:	90 91 04 01 	lds	r25, 0x0104
     4ca:	4e 97       	sbiw	r24, 0x1e	; 30
     4cc:	20 91 01 01 	lds	r18, 0x0101
     4d0:	30 91 02 01 	lds	r19, 0x0102
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	20 f0       	brcs	.+8      	; 0x4e2 <Act_PdUDecten+0x20>
		PD_Upper_Limit-=30;
     4da:	90 93 04 01 	sts	0x0104, r25
     4de:	80 93 03 01 	sts	0x0103, r24
     4e2:	08 95       	ret

000004e4 <Act_PdDAddten>:
	
}

void Act_PdDAddten(void){
	
	if(PD_Lower_Limit+30<PD_Upper_Limit)
     4e4:	80 91 01 01 	lds	r24, 0x0101
     4e8:	90 91 02 01 	lds	r25, 0x0102
     4ec:	4e 96       	adiw	r24, 0x1e	; 30
     4ee:	20 91 03 01 	lds	r18, 0x0103
     4f2:	30 91 04 01 	lds	r19, 0x0104
     4f6:	82 17       	cp	r24, r18
     4f8:	93 07       	cpc	r25, r19
     4fa:	20 f4       	brcc	.+8      	; 0x504 <Act_PdDAddten+0x20>
		PD_Lower_Limit+=30;
     4fc:	90 93 02 01 	sts	0x0102, r25
     500:	80 93 01 01 	sts	0x0101, r24
     504:	08 95       	ret

00000506 <Act_PdDDecten>:
}

void Act_PdDDecten(void){
	if(PD_Lower_Limit-30>=100)
     506:	80 91 01 01 	lds	r24, 0x0101
     50a:	90 91 02 01 	lds	r25, 0x0102
     50e:	4e 97       	sbiw	r24, 0x1e	; 30
     510:	84 36       	cpi	r24, 0x64	; 100
     512:	91 05       	cpc	r25, r1
     514:	20 f0       	brcs	.+8      	; 0x51e <Act_PdDDecten+0x18>
	PD_Lower_Limit-=30;
     516:	90 93 02 01 	sts	0x0102, r25
     51a:	80 93 01 01 	sts	0x0101, r24
     51e:	08 95       	ret

00000520 <Act_PdUAddHud>:
}
void Act_PdUAddHud(void){
	if(PD_Upper_Limit+300<=950)
     520:	80 91 03 01 	lds	r24, 0x0103
     524:	90 91 04 01 	lds	r25, 0x0104
     528:	84 5d       	subi	r24, 0xD4	; 212
     52a:	9e 4f       	sbci	r25, 0xFE	; 254
     52c:	87 3b       	cpi	r24, 0xB7	; 183
     52e:	23 e0       	ldi	r18, 0x03	; 3
     530:	92 07       	cpc	r25, r18
     532:	20 f4       	brcc	.+8      	; 0x53c <Act_PdUAddHud+0x1c>
	PD_Upper_Limit +=300;
     534:	90 93 04 01 	sts	0x0104, r25
     538:	80 93 03 01 	sts	0x0103, r24
     53c:	08 95       	ret

0000053e <Act_PdUDecHud>:
}
void Act_PdUDecHud(void){
	if(PD_Upper_Limit-300>=PD_Lower_Limit)
     53e:	80 91 03 01 	lds	r24, 0x0103
     542:	90 91 04 01 	lds	r25, 0x0104
     546:	8c 52       	subi	r24, 0x2C	; 44
     548:	91 40       	sbci	r25, 0x01	; 1
     54a:	20 91 01 01 	lds	r18, 0x0101
     54e:	30 91 02 01 	lds	r19, 0x0102
     552:	82 17       	cp	r24, r18
     554:	93 07       	cpc	r25, r19
     556:	20 f0       	brcs	.+8      	; 0x560 <Act_PdUDecHud+0x22>
		PD_Upper_Limit-=300;
     558:	90 93 04 01 	sts	0x0104, r25
     55c:	80 93 03 01 	sts	0x0103, r24
     560:	08 95       	ret

00000562 <Act_PdDAddHud>:
}

void Act_PdDAddHud(void){
	
	if(PD_Lower_Limit+300<PD_Upper_Limit)
     562:	80 91 01 01 	lds	r24, 0x0101
     566:	90 91 02 01 	lds	r25, 0x0102
     56a:	84 5d       	subi	r24, 0xD4	; 212
     56c:	9e 4f       	sbci	r25, 0xFE	; 254
     56e:	20 91 03 01 	lds	r18, 0x0103
     572:	30 91 04 01 	lds	r19, 0x0104
     576:	82 17       	cp	r24, r18
     578:	93 07       	cpc	r25, r19
     57a:	20 f4       	brcc	.+8      	; 0x584 <Act_PdDAddHud+0x22>
	PD_Lower_Limit+=300;
     57c:	90 93 02 01 	sts	0x0102, r25
     580:	80 93 01 01 	sts	0x0101, r24
     584:	08 95       	ret

00000586 <Act_PdDDecHud>:
	
}
void Act_PdDDecHud(void){
	if(PD_Lower_Limit-300>=100)
     586:	80 91 01 01 	lds	r24, 0x0101
     58a:	90 91 02 01 	lds	r25, 0x0102
     58e:	8c 52       	subi	r24, 0x2C	; 44
     590:	91 40       	sbci	r25, 0x01	; 1
     592:	84 36       	cpi	r24, 0x64	; 100
     594:	91 05       	cpc	r25, r1
     596:	20 f0       	brcs	.+8      	; 0x5a0 <Act_PdDDecHud+0x1a>
	PD_Lower_Limit-=300;
     598:	90 93 02 01 	sts	0x0102, r25
     59c:	80 93 01 01 	sts	0x0101, r24
     5a0:	08 95       	ret

000005a2 <Act_SwitchUnit>:
}
void Act_SwitchUnit(void){
	if(PD_Unit == UNIT_PA)
     5a2:	80 91 05 01 	lds	r24, 0x0105
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <Act_SwitchUnit+0x10>
		PD_Unit = UNIT_MMH2O;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 05 01 	sts	0x0105, r24
     5b0:	08 95       	ret
	else
		PD_Unit = UNIT_PA; 
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	80 93 05 01 	sts	0x0105, r24
     5b8:	08 95       	ret

000005ba <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     5ba:	e1 e6       	ldi	r30, 0x61	; 97
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8c 7f       	andi	r24, 0xFC	; 252
     5c2:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     5c4:	86 e8       	ldi	r24, 0x86	; 134
     5c6:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     5c8:	80 e1       	ldi	r24, 0x10	; 16
     5ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     5cc:	35 98       	cbi	0x06, 5	; 6
     5ce:	08 95       	ret

000005d0 <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     5d0:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     5d2:	34 9b       	sbis	0x06, 4	; 6
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d6:	86 ef       	ldi	r24, 0xF6	; 246
     5d8:	8a 95       	dec	r24
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     5dc:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     5de:	85 b1       	in	r24, 0x05	; 5
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	98 2f       	mov	r25, r24
     5e4:	88 27       	eor	r24, r24

	return result;	
}
     5e6:	82 0f       	add	r24, r18
     5e8:	91 1d       	adc	r25, r1
     5ea:	08 95       	ret

000005ec <ADC_read>:

float ADC_read(uint8_t target){
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	89 f0       	breq	.+34     	; 0x61c <ADC_read+0x30>
     5fa:	28 f4       	brcc	.+10     	; 0x606 <ADC_read+0x1a>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	41 f0       	breq	.+16     	; 0x610 <ADC_read+0x24>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	49 f0       	breq	.+18     	; 0x616 <ADC_read+0x2a>
     604:	37 c0       	rjmp	.+110    	; 0x674 <ADC_read+0x88>
     606:	84 30       	cpi	r24, 0x04	; 4
     608:	61 f0       	breq	.+24     	; 0x622 <ADC_read+0x36>
     60a:	85 30       	cpi	r24, 0x05	; 5
     60c:	69 f0       	breq	.+26     	; 0x628 <ADC_read+0x3c>
     60e:	32 c0       	rjmp	.+100    	; 0x674 <ADC_read+0x88>
		case PRESSURE:
			ADMUX = 0x10;
     610:	80 e1       	ldi	r24, 0x10	; 16
     612:	87 b9       	out	0x07, r24	; 7
			break;
     614:	2f c0       	rjmp	.+94     	; 0x674 <ADC_read+0x88>
		case EMV:
			ADMUX = 0b00000100;
     616:	84 e0       	ldi	r24, 0x04	; 4
     618:	87 b9       	out	0x07, r24	; 7
			break;
     61a:	2c c0       	rjmp	.+88     	; 0x674 <ADC_read+0x88>
		case VIN:
			ADMUX = 0b00000101;
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	87 b9       	out	0x07, r24	; 7
			break;
     620:	29 c0       	rjmp	.+82     	; 0x674 <ADC_read+0x88>
		case VPP:
			ADMUX = 0b00000110;
     622:	86 e0       	ldi	r24, 0x06	; 6
     624:	87 b9       	out	0x07, r24	; 7
			break;
     626:	26 c0       	rjmp	.+76     	; 0x674 <ADC_read+0x88>
		case VCC:
			ADMUX = 0b00000111;
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	87 b9       	out	0x07, r24	; 7
			break;
     62c:	23 c0       	rjmp	.+70     	; 0x674 <ADC_read+0x88>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     62e:	d0 df       	rcall	.-96     	; 0x5d0 <ADC_readonce>
     630:	bc 01       	movw	r22, r24
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__floatunsisf>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
     64a:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     64c:	81 f7       	brne	.-32     	; 0x62e <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	5e e3       	ldi	r21, 0x3E	; 62
     656:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__mulsf3>
	buff/=1024;
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	5a e3       	ldi	r21, 0x3A	; 58
     662:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__mulsf3>
	buff*=SCALE;
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	4a e7       	ldi	r20, 0x7A	; 122
     66c:	54 e4       	ldi	r21, 0x44	; 68
     66e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__mulsf3>
     672:	05 c0       	rjmp	.+10     	; 0x67e <ADC_read+0x92>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     674:	c8 e0       	ldi	r28, 0x08	; 8
     676:	c1 2c       	mov	r12, r1
     678:	d1 2c       	mov	r13, r1
     67a:	76 01       	movw	r14, r12
     67c:	d8 cf       	rjmp	.-80     	; 0x62e <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     67e:	cf 91       	pop	r28
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	08 95       	ret

0000068a <emv_refresh>:

void set_blower_interval(uint8_t intv_s){
	blower_interval_s = intv_s;
}
void set_blower_on_time(uint8_t time_ms){
	blower_on_time_ms = time_ms;
     68a:	80 91 08 01 	lds	r24, 0x0108
     68e:	90 91 09 01 	lds	r25, 0x0109
     692:	20 e1       	ldi	r18, 0x10	; 16
     694:	e5 e6       	ldi	r30, 0x65	; 101
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	99 23       	and	r25, r25
     69a:	14 f4       	brge	.+4      	; 0x6a0 <emv_refresh+0x16>
     69c:	c5 9a       	sbi	0x18, 5	; 24
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <emv_refresh+0x18>
     6a0:	c5 98       	cbi	0x18, 5	; 24
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	38 e1       	ldi	r19, 0x18	; 24
     6a8:	3a 95       	dec	r19
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <emv_refresh+0x1e>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <emv_refresh+0x24>
     6ae:	30 81       	ld	r19, Z
     6b0:	38 60       	ori	r19, 0x08	; 8
     6b2:	30 83       	st	Z, r19
     6b4:	38 e1       	ldi	r19, 0x18	; 24
     6b6:	3a 95       	dec	r19
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <emv_refresh+0x2c>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <emv_refresh+0x32>
     6bc:	30 81       	ld	r19, Z
     6be:	37 7f       	andi	r19, 0xF7	; 247
     6c0:	30 83       	st	Z, r19
     6c2:	38 e1       	ldi	r19, 0x18	; 24
     6c4:	3a 95       	dec	r19
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <emv_refresh+0x3a>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <emv_refresh+0x40>
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	29 f7       	brne	.-54     	; 0x698 <emv_refresh+0xe>
     6ce:	c7 9a       	sbi	0x18, 7	; 24
     6d0:	88 e1       	ldi	r24, 0x18	; 24
     6d2:	8a 95       	dec	r24
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <emv_refresh+0x48>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <emv_refresh+0x4e>
     6d8:	c7 98       	cbi	0x18, 7	; 24
     6da:	08 95       	ret

000006dc <emv_ports_init>:
     6dc:	87 b3       	in	r24, 0x17	; 23
     6de:	80 6e       	ori	r24, 0xE0	; 224
     6e0:	87 bb       	out	0x17, r24	; 23
     6e2:	e4 e6       	ldi	r30, 0x64	; 100
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	88 61       	ori	r24, 0x18	; 24
     6ea:	80 83       	st	Z, r24
     6ec:	e5 e6       	ldi	r30, 0x65	; 101
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	87 7f       	andi	r24, 0xF7	; 247
     6f4:	80 83       	st	Z, r24
     6f6:	c7 98       	cbi	0x18, 7	; 24
     6f8:	80 81       	ld	r24, Z
     6fa:	80 61       	ori	r24, 0x10	; 16
     6fc:	80 83       	st	Z, r24
     6fe:	c6 98       	cbi	0x18, 6	; 24
     700:	c4 cf       	rjmp	.-120    	; 0x68a <emv_refresh>
     702:	08 95       	ret

00000704 <unset_emv_channel>:
     704:	81 31       	cpi	r24, 0x11	; 17
     706:	98 f4       	brcc	.+38     	; 0x72e <unset_emv_channel+0x2a>
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	02 c0       	rjmp	.+4      	; 0x714 <unset_emv_channel+0x10>
     710:	44 0f       	add	r20, r20
     712:	55 1f       	adc	r21, r21
     714:	8a 95       	dec	r24
     716:	e2 f7       	brpl	.-8      	; 0x710 <unset_emv_channel+0xc>
     718:	ca 01       	movw	r24, r20
     71a:	20 91 08 01 	lds	r18, 0x0108
     71e:	30 91 09 01 	lds	r19, 0x0109
     722:	82 2b       	or	r24, r18
     724:	93 2b       	or	r25, r19
     726:	90 93 09 01 	sts	0x0109, r25
     72a:	80 93 08 01 	sts	0x0108, r24
     72e:	ad cf       	rjmp	.-166    	; 0x68a <emv_refresh>
     730:	08 95       	ret

00000732 <set_emv_channel>:
     732:	81 31       	cpi	r24, 0x11	; 17
     734:	a8 f4       	brcc	.+42     	; 0x760 <set_emv_channel+0x2e>
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	02 c0       	rjmp	.+4      	; 0x742 <set_emv_channel+0x10>
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	8a 95       	dec	r24
     744:	e2 f7       	brpl	.-8      	; 0x73e <set_emv_channel+0xc>
     746:	ca 01       	movw	r24, r20
     748:	80 95       	com	r24
     74a:	90 95       	com	r25
     74c:	20 91 08 01 	lds	r18, 0x0108
     750:	30 91 09 01 	lds	r19, 0x0109
     754:	82 23       	and	r24, r18
     756:	93 23       	and	r25, r19
     758:	90 93 09 01 	sts	0x0109, r25
     75c:	80 93 08 01 	sts	0x0108, r24
     760:	94 cf       	rjmp	.-216    	; 0x68a <emv_refresh>
     762:	08 95       	ret

00000764 <blow_seq>:
     764:	80 91 c0 05 	lds	r24, 0x05C0
     768:	81 11       	cpse	r24, r1
     76a:	28 c0       	rjmp	.+80     	; 0x7bc <blow_seq+0x58>
     76c:	80 91 be 05 	lds	r24, 0x05BE
     770:	90 91 bf 05 	lds	r25, 0x05BF
     774:	89 2b       	or	r24, r25
     776:	11 f5       	brne	.+68     	; 0x7bc <blow_seq+0x58>
     778:	80 91 bc 05 	lds	r24, 0x05BC
     77c:	90 91 bd 05 	lds	r25, 0x05BD
     780:	89 2b       	or	r24, r25
     782:	e1 f4       	brne	.+56     	; 0x7bc <blow_seq+0x58>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	d5 df       	rcall	.-86     	; 0x732 <set_emv_channel>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 bb 05 	sts	0x05BB, r24
     78e:	80 91 be 05 	lds	r24, 0x05BE
     792:	90 91 bf 05 	lds	r25, 0x05BF
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	90 93 bf 05 	sts	0x05BF, r25
     79c:	80 93 be 05 	sts	0x05BE, r24
     7a0:	30 91 07 01 	lds	r19, 0x0107
     7a4:	2d ec       	ldi	r18, 0xCD	; 205
     7a6:	32 9f       	mul	r19, r18
     7a8:	21 2d       	mov	r18, r1
     7aa:	11 24       	eor	r1, r1
     7ac:	26 95       	lsr	r18
     7ae:	26 95       	lsr	r18
     7b0:	26 95       	lsr	r18
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	82 17       	cp	r24, r18
     7b6:	93 07       	cpc	r25, r19
     7b8:	b1 f5       	brne	.+108    	; 0x826 <blow_seq+0xc2>
     7ba:	27 c0       	rjmp	.+78     	; 0x80a <blow_seq+0xa6>
     7bc:	40 91 bb 05 	lds	r20, 0x05BB
     7c0:	44 23       	and	r20, r20
     7c2:	b9 f0       	breq	.+46     	; 0x7f2 <blow_seq+0x8e>
     7c4:	80 91 be 05 	lds	r24, 0x05BE
     7c8:	90 91 bf 05 	lds	r25, 0x05BF
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	90 93 bf 05 	sts	0x05BF, r25
     7d2:	80 93 be 05 	sts	0x05BE, r24
     7d6:	30 91 07 01 	lds	r19, 0x0107
     7da:	2d ec       	ldi	r18, 0xCD	; 205
     7dc:	32 9f       	mul	r19, r18
     7de:	21 2d       	mov	r18, r1
     7e0:	11 24       	eor	r1, r1
     7e2:	26 95       	lsr	r18
     7e4:	26 95       	lsr	r18
     7e6:	26 95       	lsr	r18
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	82 17       	cp	r24, r18
     7ec:	93 07       	cpc	r25, r19
     7ee:	d9 f4       	brne	.+54     	; 0x826 <blow_seq+0xc2>
     7f0:	0a c0       	rjmp	.+20     	; 0x806 <blow_seq+0xa2>
     7f2:	80 91 bc 05 	lds	r24, 0x05BC
     7f6:	90 91 bd 05 	lds	r25, 0x05BD
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	90 93 bd 05 	sts	0x05BD, r25
     800:	80 93 bc 05 	sts	0x05BC, r24
     804:	10 c0       	rjmp	.+32     	; 0x826 <blow_seq+0xc2>
     806:	41 30       	cpi	r20, 0x01	; 1
     808:	71 f4       	brne	.+28     	; 0x826 <blow_seq+0xc2>
     80a:	80 91 c0 05 	lds	r24, 0x05C0
     80e:	7a df       	rcall	.-268    	; 0x704 <unset_emv_channel>
     810:	10 92 bb 05 	sts	0x05BB, r1
     814:	10 92 bf 05 	sts	0x05BF, r1
     818:	10 92 be 05 	sts	0x05BE, r1
     81c:	80 91 c0 05 	lds	r24, 0x05C0
     820:	8f 5f       	subi	r24, 0xFF	; 255
     822:	80 93 c0 05 	sts	0x05C0, r24
     826:	20 91 06 01 	lds	r18, 0x0106
     82a:	84 e6       	ldi	r24, 0x64	; 100
     82c:	28 9f       	mul	r18, r24
     82e:	90 01       	movw	r18, r0
     830:	11 24       	eor	r1, r1
     832:	80 91 bc 05 	lds	r24, 0x05BC
     836:	90 91 bd 05 	lds	r25, 0x05BD
     83a:	28 17       	cp	r18, r24
     83c:	39 07       	cpc	r19, r25
     83e:	71 f4       	brne	.+28     	; 0x85c <blow_seq+0xf8>
     840:	80 91 bb 05 	lds	r24, 0x05BB
     844:	81 11       	cpse	r24, r1
     846:	0a c0       	rjmp	.+20     	; 0x85c <blow_seq+0xf8>
     848:	80 91 c0 05 	lds	r24, 0x05C0
     84c:	72 df       	rcall	.-284    	; 0x732 <set_emv_channel>
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 bb 05 	sts	0x05BB, r24
     854:	10 92 bd 05 	sts	0x05BD, r1
     858:	10 92 bc 05 	sts	0x05BC, r1
     85c:	80 91 c0 05 	lds	r24, 0x05C0
     860:	80 31       	cpi	r24, 0x10	; 16
     862:	e1 f4       	brne	.+56     	; 0x89c <blow_seq+0x138>
     864:	10 92 c0 05 	sts	0x05C0, r1
     868:	10 92 bd 05 	sts	0x05BD, r1
     86c:	10 92 bc 05 	sts	0x05BC, r1
     870:	10 92 bf 05 	sts	0x05BF, r1
     874:	10 92 be 05 	sts	0x05BE, r1
     878:	80 91 c9 05 	lds	r24, 0x05C9
     87c:	90 91 ca 05 	lds	r25, 0x05CA
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 ca 05 	sts	0x05CA, r25
     886:	80 93 c9 05 	sts	0x05C9, r24
     88a:	80 91 c1 05 	lds	r24, 0x05C1
     88e:	81 11       	cpse	r24, r1
     890:	05 c0       	rjmp	.+10     	; 0x89c <blow_seq+0x138>
     892:	82 eb       	ldi	r24, 0xB2	; 178
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	a2 d7       	rcall	.+3908   	; 0x17dc <Timer0_RemoveCallbackFunction>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	33 c0       	rjmp	.+102    	; 0x902 <Clean>
     89c:	08 95       	ret

0000089e <start_sequence>:
}
uint8_t start_sequence(void){
	if(emv_working == true) 
     89e:	80 91 c1 05 	lds	r24, 0x05C1
     8a2:	81 11       	cpse	r24, r1
     8a4:	0b c0       	rjmp	.+22     	; 0x8bc <start_sequence+0x1e>
	return 1;
	emv_working = true;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 c1 05 	sts	0x05C1, r24
	Clean(true);
     8ac:	2a d0       	rcall	.+84     	; 0x902 <Clean>
	Timer0_RegisterCallbackFunction(blow_seq,10);
     8ae:	6a e0       	ldi	r22, 0x0A	; 10
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	82 eb       	ldi	r24, 0xB2	; 178
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	3d d7       	rcall	.+3706   	; 0x1732 <Timer0_RegisterCallbackFunction>
	return 0;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret
void set_blower_on_time(uint8_t time_ms){
	blower_on_time_ms = time_ms;
}
uint8_t start_sequence(void){
	if(emv_working == true) 
	return 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
	emv_working = true;
	Clean(true);
	Timer0_RegisterCallbackFunction(blow_seq,10);
	return 0;
}
     8be:	08 95       	ret

000008c0 <stop_sequence>:

uint8_t stop_sequence(void){
	if(emv_working == false)
     8c0:	80 91 c1 05 	lds	r24, 0x05C1
     8c4:	88 23       	and	r24, r24
     8c6:	21 f0       	breq	.+8      	; 0x8d0 <stop_sequence+0x10>
	return 1;
	emv_working = false;
     8c8:	10 92 c1 05 	sts	0x05C1, r1

	return 0;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
	return 0;
}

uint8_t stop_sequence(void){
	if(emv_working == false)
	return 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
	emv_working = false;

	return 0;
	
}
     8d2:	08 95       	ret

000008d4 <init_IO>:
	if(state==ALARM_ON){
		PORTB &=~_BV(0);
		//PORTG |=_BV(0);
	}
	else{
		PORTB |= _BV(0);
     8d4:	b8 9a       	sbi	0x17, 0	; 23
     8d6:	e1 e6       	ldi	r30, 0x61	; 97
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	80 83       	st	Z, r24
     8e0:	e4 e6       	ldi	r30, 0x64	; 100
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	81 60       	ori	r24, 0x01	; 1
     8e8:	80 83       	st	Z, r24
     8ea:	c0 9a       	sbi	0x18, 0	; 24
     8ec:	e2 e6       	ldi	r30, 0x62	; 98
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	88 60       	ori	r24, 0x08	; 8
     8f4:	80 83       	st	Z, r24
     8f6:	e5 e6       	ldi	r30, 0x65	; 101
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	8e 7f       	andi	r24, 0xFE	; 254
     8fe:	80 83       	st	Z, r24
     900:	08 95       	ret

00000902 <Clean>:
	}
	
}

void Clean(bool state){
	if(state==ALARM_ON){
     902:	88 23       	and	r24, r24
     904:	31 f0       	breq	.+12     	; 0x912 <Clean+0x10>
		PORTF &=~_BV(3);
     906:	e2 e6       	ldi	r30, 0x62	; 98
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	87 7f       	andi	r24, 0xF7	; 247
     90e:	80 83       	st	Z, r24
     910:	08 95       	ret
	}
	else{
		PORTF |= _BV(3);
     912:	e2 e6       	ldi	r30, 0x62	; 98
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	88 60       	ori	r24, 0x08	; 8
     91a:	80 83       	st	Z, r24
     91c:	08 95       	ret

0000091e <DrawScreen>:
//	CurrentState				UP_NEXT					DOWN_NEXT						LEFT_NEXT					RIGHT_NEXT					ENT_NEXT					UP_ACTION		DOWN_ACTION			LEFT_ACTION		RIGHT_ACTION		ENT_ACTION		TIMER_ACTI
	  


	void DrawScreen(void){
		lcd12864_clear();
     91e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <lcd12864_clear>
		lcd12864_set_pos(0,1);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     92a:	80 91 cb 05 	lds	r24, 0x05CB
     92e:	90 91 cc 05 	lds	r25, 0x05CC
     932:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     93e:	80 91 cd 05 	lds	r24, 0x05CD
     942:	90 91 ce 05 	lds	r25, 0x05CE
     946:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     952:	80 91 cf 05 	lds	r24, 0x05CF
     956:	90 91 d0 05 	lds	r25, 0x05D0
     95a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     95e:	64 e0       	ldi	r22, 0x04	; 4
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     966:	80 91 d1 05 	lds	r24, 0x05D1
     96a:	90 91 d2 05 	lds	r25, 0x05D2
     96e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd12864_write_str>
		lcd12864_Focus(SYS_Screen_Buffer.menu, SYS_Screen_Buffer.index, SYS_Screen_Buffer.focus);		
     972:	40 91 d5 05 	lds	r20, 0x05D5
     976:	60 91 d4 05 	lds	r22, 0x05D4
     97a:	80 91 d3 05 	lds	r24, 0x05D3
     97e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <lcd12864_Focus>
     982:	08 95       	ret

00000984 <FindState>:
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     984:	20 91 0a 01 	lds	r18, 0x010A
     988:	30 91 0b 01 	lds	r19, 0x010B
     98c:	28 17       	cp	r18, r24
     98e:	39 07       	cpc	r19, r25
     990:	59 f0       	breq	.+22     	; 0x9a8 <FindState+0x24>
     992:	e2 e2       	ldi	r30, 0x22	; 34
     994:	f1 e0       	ldi	r31, 0x01	; 1
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	b9 01       	movw	r22, r18
     99c:	40 81       	ld	r20, Z
     99e:	51 81       	ldd	r21, Z+1	; 0x01
     9a0:	48 17       	cp	r20, r24
     9a2:	59 07       	cpc	r21, r25
     9a4:	91 f4       	brne	.+36     	; 0x9ca <FindState+0x46>
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <FindState+0x28>
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     9ac:	cb 01       	movw	r24, r22
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	68 0f       	add	r22, r24
     9b4:	79 1f       	adc	r23, r25
     9b6:	cb 01       	movw	r24, r22
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	86 5f       	subi	r24, 0xF6	; 246
     9c6:	9e 4f       	sbci	r25, 0xFE	; 254
     9c8:	08 95       	ret
     9ca:	2f 5f       	subi	r18, 0xFF	; 255
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
     9ce:	78 96       	adiw	r30, 0x18	; 24
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
		lcd12864_Focus(SYS_Screen_Buffer.menu, SYS_Screen_Buffer.index, SYS_Screen_Buffer.focus);		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     9d0:	2d 31       	cpi	r18, 0x1D	; 29
     9d2:	31 05       	cpc	r19, r1
     9d4:	11 f7       	brne	.-60     	; 0x99a <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     9da:	08 95       	ret

000009dc <State_Update>:
		lcd12864_Focus(0,0,0);

	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     9dc:	e0 91 c4 05 	lds	r30, 0x05C4
     9e0:	f0 91 c5 05 	lds	r31, 0x05C5
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	20 e3       	ldi	r18, 0x30	; 48
     9ec:	92 07       	cpc	r25, r18
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <State_Update+0x16>
     9f0:	82 c2       	rjmp	.+1284   	; 0xef6 <State_Update+0x51a>
     9f2:	e0 f5       	brcc	.+120    	; 0xa6c <State_Update+0x90>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	20 e2       	ldi	r18, 0x20	; 32
     9f8:	92 07       	cpc	r25, r18
     9fa:	09 f4       	brne	.+2      	; 0x9fe <State_Update+0x22>
     9fc:	64 c1       	rjmp	.+712    	; 0xcc6 <State_Update+0x2ea>
     9fe:	d0 f4       	brcc	.+52     	; 0xa34 <State_Update+0x58>
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	20 e1       	ldi	r18, 0x10	; 16
     a04:	92 07       	cpc	r25, r18
     a06:	09 f4       	brne	.+2      	; 0xa0a <State_Update+0x2e>
     a08:	be c0       	rjmp	.+380    	; 0xb86 <State_Update+0x1aa>
     a0a:	40 f4       	brcc	.+16     	; 0xa1c <State_Update+0x40>
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	09 f4       	brne	.+2      	; 0xa12 <State_Update+0x36>
     a10:	6b c0       	rjmp	.+214    	; 0xae8 <State_Update+0x10c>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	90 41       	sbci	r25, 0x10	; 16
     a16:	09 f4       	brne	.+2      	; 0xa1a <State_Update+0x3e>
     a18:	8e c0       	rjmp	.+284    	; 0xb36 <State_Update+0x15a>
     a1a:	1a c5       	rjmp	.+2612   	; 0x1450 <__stack+0x351>
     a1c:	84 30       	cpi	r24, 0x04	; 4
     a1e:	20 e1       	ldi	r18, 0x10	; 16
     a20:	92 07       	cpc	r25, r18
     a22:	09 f4       	brne	.+2      	; 0xa26 <State_Update+0x4a>
     a24:	00 c1       	rjmp	.+512    	; 0xc26 <State_Update+0x24a>
     a26:	08 f4       	brcc	.+2      	; 0xa2a <State_Update+0x4e>
     a28:	d6 c0       	rjmp	.+428    	; 0xbd6 <State_Update+0x1fa>
     a2a:	85 30       	cpi	r24, 0x05	; 5
     a2c:	90 41       	sbci	r25, 0x10	; 16
     a2e:	09 f4       	brne	.+2      	; 0xa32 <State_Update+0x56>
     a30:	22 c1       	rjmp	.+580    	; 0xc76 <State_Update+0x29a>
     a32:	0e c5       	rjmp	.+2588   	; 0x1450 <__stack+0x351>
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	20 e2       	ldi	r18, 0x20	; 32
     a38:	92 07       	cpc	r25, r18
     a3a:	09 f4       	brne	.+2      	; 0xa3e <State_Update+0x62>
     a3c:	bc c1       	rjmp	.+888    	; 0xdb6 <State_Update+0x3da>
     a3e:	50 f4       	brcc	.+20     	; 0xa54 <State_Update+0x78>
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	20 e2       	ldi	r18, 0x20	; 32
     a44:	92 07       	cpc	r25, r18
     a46:	09 f4       	brne	.+2      	; 0xa4a <State_Update+0x6e>
     a48:	66 c1       	rjmp	.+716    	; 0xd16 <State_Update+0x33a>
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	90 42       	sbci	r25, 0x20	; 32
     a4e:	09 f4       	brne	.+2      	; 0xa52 <State_Update+0x76>
     a50:	8a c1       	rjmp	.+788    	; 0xd66 <State_Update+0x38a>
     a52:	fe c4       	rjmp	.+2556   	; 0x1450 <__stack+0x351>
     a54:	86 30       	cpi	r24, 0x06	; 6
     a56:	20 e2       	ldi	r18, 0x20	; 32
     a58:	92 07       	cpc	r25, r18
     a5a:	09 f4       	brne	.+2      	; 0xa5e <State_Update+0x82>
     a5c:	fc c1       	rjmp	.+1016   	; 0xe56 <State_Update+0x47a>
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <State_Update+0x86>
     a60:	d2 c1       	rjmp	.+932    	; 0xe06 <State_Update+0x42a>
     a62:	81 30       	cpi	r24, 0x01	; 1
     a64:	90 43       	sbci	r25, 0x30	; 48
     a66:	09 f4       	brne	.+2      	; 0xa6a <State_Update+0x8e>
     a68:	1e c2       	rjmp	.+1084   	; 0xea6 <State_Update+0x4ca>
     a6a:	f2 c4       	rjmp	.+2532   	; 0x1450 <__stack+0x351>
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	21 e3       	ldi	r18, 0x31	; 49
     a70:	92 07       	cpc	r25, r18
     a72:	09 f4       	brne	.+2      	; 0xa76 <State_Update+0x9a>
     a74:	7f c3       	rjmp	.+1790   	; 0x1174 <__stack+0x75>
     a76:	e0 f4       	brcc	.+56     	; 0xab0 <State_Update+0xd4>
     a78:	85 30       	cpi	r24, 0x05	; 5
     a7a:	20 e3       	ldi	r18, 0x30	; 48
     a7c:	92 07       	cpc	r25, r18
     a7e:	09 f4       	brne	.+2      	; 0xa82 <State_Update+0xa6>
     a80:	b2 c2       	rjmp	.+1380   	; 0xfe6 <State_Update+0x60a>
     a82:	50 f4       	brcc	.+20     	; 0xa98 <State_Update+0xbc>
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	20 e3       	ldi	r18, 0x30	; 48
     a88:	92 07       	cpc	r25, r18
     a8a:	09 f4       	brne	.+2      	; 0xa8e <State_Update+0xb2>
     a8c:	5c c2       	rjmp	.+1208   	; 0xf46 <State_Update+0x56a>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	90 43       	sbci	r25, 0x30	; 48
     a92:	09 f4       	brne	.+2      	; 0xa96 <State_Update+0xba>
     a94:	80 c2       	rjmp	.+1280   	; 0xf96 <State_Update+0x5ba>
     a96:	dc c4       	rjmp	.+2488   	; 0x1450 <__stack+0x351>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	21 e3       	ldi	r18, 0x31	; 49
     a9c:	92 07       	cpc	r25, r18
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <State_Update+0xc6>
     aa0:	ff c2       	rjmp	.+1534   	; 0x10a0 <State_Update+0x6c4>
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <State_Update+0xca>
     aa4:	32 c3       	rjmp	.+1636   	; 0x110a <__stack+0xb>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	91 43       	sbci	r25, 0x31	; 49
     aaa:	09 f4       	brne	.+2      	; 0xaae <State_Update+0xd2>
     aac:	c4 c2       	rjmp	.+1416   	; 0x1036 <State_Update+0x65a>
     aae:	d0 c4       	rjmp	.+2464   	; 0x1450 <__stack+0x351>
     ab0:	83 31       	cpi	r24, 0x13	; 19
     ab2:	21 e3       	ldi	r18, 0x31	; 49
     ab4:	92 07       	cpc	r25, r18
     ab6:	09 f4       	brne	.+2      	; 0xaba <State_Update+0xde>
     ab8:	f3 c3       	rjmp	.+2022   	; 0x12a0 <__stack+0x1a1>
     aba:	50 f4       	brcc	.+20     	; 0xad0 <State_Update+0xf4>
     abc:	81 31       	cpi	r24, 0x11	; 17
     abe:	21 e3       	ldi	r18, 0x31	; 49
     ac0:	92 07       	cpc	r25, r18
     ac2:	09 f4       	brne	.+2      	; 0xac6 <State_Update+0xea>
     ac4:	82 c3       	rjmp	.+1796   	; 0x11ca <__stack+0xcb>
     ac6:	82 31       	cpi	r24, 0x12	; 18
     ac8:	91 43       	sbci	r25, 0x31	; 49
     aca:	09 f4       	brne	.+2      	; 0xace <State_Update+0xf2>
     acc:	b4 c3       	rjmp	.+1896   	; 0x1236 <__stack+0x137>
     ace:	c0 c4       	rjmp	.+2432   	; 0x1450 <__stack+0x351>
     ad0:	85 31       	cpi	r24, 0x15	; 21
     ad2:	21 e3       	ldi	r18, 0x31	; 49
     ad4:	92 07       	cpc	r25, r18
     ad6:	09 f4       	brne	.+2      	; 0xada <State_Update+0xfe>
     ad8:	4f c4       	rjmp	.+2206   	; 0x1378 <__stack+0x279>
     ada:	08 f4       	brcc	.+2      	; 0xade <State_Update+0x102>
     adc:	17 c4       	rjmp	.+2094   	; 0x130c <__stack+0x20d>
     ade:	86 31       	cpi	r24, 0x16	; 22
     ae0:	91 43       	sbci	r25, 0x31	; 49
     ae2:	09 f4       	brne	.+2      	; 0xae6 <State_Update+0x10a>
     ae4:	7f c4       	rjmp	.+2302   	; 0x13e4 <__stack+0x2e5>
     ae6:	b4 c4       	rjmp	.+2408   	; 0x1450 <__stack+0x351>
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     ae8:	80 91 c2 03 	lds	r24, 0x03C2
     aec:	90 91 c3 03 	lds	r25, 0x03C3
     af0:	90 93 cc 05 	sts	0x05CC, r25
     af4:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     af8:	80 91 c4 03 	lds	r24, 0x03C4
     afc:	90 91 c5 03 	lds	r25, 0x03C5
     b00:	90 93 ce 05 	sts	0x05CE, r25
     b04:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     b08:	80 91 c6 03 	lds	r24, 0x03C6
     b0c:	90 91 c7 03 	lds	r25, 0x03C7
     b10:	90 93 d0 05 	sts	0x05D0, r25
     b14:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     b18:	80 91 c8 03 	lds	r24, 0x03C8
     b1c:	90 91 c9 03 	lds	r25, 0x03C9
     b20:	90 93 d2 05 	sts	0x05D2, r25
     b24:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     b28:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 0;
     b2c:	10 92 d4 05 	sts	0x05D4, r1
				SYS_Screen_Buffer.focus = 0;
     b30:	10 92 d5 05 	sts	0x05D5, r1
				break;
     b34:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     b36:	80 91 cc 03 	lds	r24, 0x03CC
     b3a:	90 91 cd 03 	lds	r25, 0x03CD
     b3e:	90 93 cc 05 	sts	0x05CC, r25
     b42:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     b46:	80 91 ce 03 	lds	r24, 0x03CE
     b4a:	90 91 cf 03 	lds	r25, 0x03CF
     b4e:	90 93 ce 05 	sts	0x05CE, r25
     b52:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     b56:	80 91 d0 03 	lds	r24, 0x03D0
     b5a:	90 91 d1 03 	lds	r25, 0x03D1
     b5e:	90 93 d0 05 	sts	0x05D0, r25
     b62:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b66:	80 91 fa 03 	lds	r24, 0x03FA
     b6a:	90 91 fb 03 	lds	r25, 0x03FB
     b6e:	90 93 d2 05 	sts	0x05D2, r25
     b72:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     b76:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     b80:	10 92 d5 05 	sts	0x05D5, r1
				break;
     b84:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     b86:	80 91 cc 03 	lds	r24, 0x03CC
     b8a:	90 91 cd 03 	lds	r25, 0x03CD
     b8e:	90 93 cc 05 	sts	0x05CC, r25
     b92:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     b96:	80 91 ce 03 	lds	r24, 0x03CE
     b9a:	90 91 cf 03 	lds	r25, 0x03CF
     b9e:	90 93 ce 05 	sts	0x05CE, r25
     ba2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     ba6:	80 91 d0 03 	lds	r24, 0x03D0
     baa:	90 91 d1 03 	lds	r25, 0x03D1
     bae:	90 93 d0 05 	sts	0x05D0, r25
     bb2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     bb6:	80 91 fa 03 	lds	r24, 0x03FA
     bba:	90 91 fb 03 	lds	r25, 0x03FB
     bbe:	90 93 d2 05 	sts	0x05D2, r25
     bc2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     bc6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     bd0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     bd4:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     bd6:	80 91 cc 03 	lds	r24, 0x03CC
     bda:	90 91 cd 03 	lds	r25, 0x03CD
     bde:	90 93 cc 05 	sts	0x05CC, r25
     be2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     be6:	80 91 ce 03 	lds	r24, 0x03CE
     bea:	90 91 cf 03 	lds	r25, 0x03CF
     bee:	90 93 ce 05 	sts	0x05CE, r25
     bf2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     bf6:	80 91 d0 03 	lds	r24, 0x03D0
     bfa:	90 91 d1 03 	lds	r25, 0x03D1
     bfe:	90 93 d0 05 	sts	0x05D0, r25
     c02:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c06:	80 91 fa 03 	lds	r24, 0x03FA
     c0a:	90 91 fb 03 	lds	r25, 0x03FB
     c0e:	90 93 d2 05 	sts	0x05D2, r25
     c12:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     c16:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     c20:	10 92 d5 05 	sts	0x05D5, r1
				break;
     c24:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     c26:	80 91 d2 03 	lds	r24, 0x03D2
     c2a:	90 91 d3 03 	lds	r25, 0x03D3
     c2e:	90 93 cc 05 	sts	0x05CC, r25
     c32:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     c36:	80 91 d4 03 	lds	r24, 0x03D4
     c3a:	90 91 d5 03 	lds	r25, 0x03D5
     c3e:	90 93 ce 05 	sts	0x05CE, r25
     c42:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     c46:	80 91 c2 03 	lds	r24, 0x03C2
     c4a:	90 91 c3 03 	lds	r25, 0x03C3
     c4e:	90 93 d0 05 	sts	0x05D0, r25
     c52:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c56:	80 91 fa 03 	lds	r24, 0x03FA
     c5a:	90 91 fb 03 	lds	r25, 0x03FB
     c5e:	90 93 d2 05 	sts	0x05D2, r25
     c62:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     c66:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     c70:	10 92 d5 05 	sts	0x05D5, r1
				break;
     c74:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     c76:	80 91 d2 03 	lds	r24, 0x03D2
     c7a:	90 91 d3 03 	lds	r25, 0x03D3
     c7e:	90 93 cc 05 	sts	0x05CC, r25
     c82:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     c86:	80 91 d4 03 	lds	r24, 0x03D4
     c8a:	90 91 d5 03 	lds	r25, 0x03D5
     c8e:	90 93 ce 05 	sts	0x05CE, r25
     c92:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     c96:	80 91 c2 03 	lds	r24, 0x03C2
     c9a:	90 91 c3 03 	lds	r25, 0x03C3
     c9e:	90 93 d0 05 	sts	0x05D0, r25
     ca2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ca6:	80 91 fa 03 	lds	r24, 0x03FA
     caa:	90 91 fb 03 	lds	r25, 0x03FB
     cae:	90 93 d2 05 	sts	0x05D2, r25
     cb2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     cb6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     cc0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     cc4:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     cc6:	80 91 d6 03 	lds	r24, 0x03D6
     cca:	90 91 d7 03 	lds	r25, 0x03D7
     cce:	90 93 cc 05 	sts	0x05CC, r25
     cd2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     cd6:	80 91 d8 03 	lds	r24, 0x03D8
     cda:	90 91 d9 03 	lds	r25, 0x03D9
     cde:	90 93 ce 05 	sts	0x05CE, r25
     ce2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     ce6:	80 91 da 03 	lds	r24, 0x03DA
     cea:	90 91 db 03 	lds	r25, 0x03DB
     cee:	90 93 d0 05 	sts	0x05D0, r25
     cf2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     cf6:	80 91 fa 03 	lds	r24, 0x03FA
     cfa:	90 91 fb 03 	lds	r25, 0x03FB
     cfe:	90 93 d2 05 	sts	0x05D2, r25
     d02:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     d06:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     d10:	10 92 d5 05 	sts	0x05D5, r1
				break;
     d14:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     d16:	80 91 d6 03 	lds	r24, 0x03D6
     d1a:	90 91 d7 03 	lds	r25, 0x03D7
     d1e:	90 93 cc 05 	sts	0x05CC, r25
     d22:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     d26:	80 91 d8 03 	lds	r24, 0x03D8
     d2a:	90 91 d9 03 	lds	r25, 0x03D9
     d2e:	90 93 ce 05 	sts	0x05CE, r25
     d32:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     d36:	80 91 da 03 	lds	r24, 0x03DA
     d3a:	90 91 db 03 	lds	r25, 0x03DB
     d3e:	90 93 d0 05 	sts	0x05D0, r25
     d42:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     d46:	80 91 fa 03 	lds	r24, 0x03FA
     d4a:	90 91 fb 03 	lds	r25, 0x03FB
     d4e:	90 93 d2 05 	sts	0x05D2, r25
     d52:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     d56:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     d60:	10 92 d5 05 	sts	0x05D5, r1
				break;
     d64:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     d66:	80 91 d6 03 	lds	r24, 0x03D6
     d6a:	90 91 d7 03 	lds	r25, 0x03D7
     d6e:	90 93 cc 05 	sts	0x05CC, r25
     d72:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     d76:	80 91 d8 03 	lds	r24, 0x03D8
     d7a:	90 91 d9 03 	lds	r25, 0x03D9
     d7e:	90 93 ce 05 	sts	0x05CE, r25
     d82:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     d86:	80 91 da 03 	lds	r24, 0x03DA
     d8a:	90 91 db 03 	lds	r25, 0x03DB
     d8e:	90 93 d0 05 	sts	0x05D0, r25
     d92:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     d96:	80 91 fa 03 	lds	r24, 0x03FA
     d9a:	90 91 fb 03 	lds	r25, 0x03FB
     d9e:	90 93 d2 05 	sts	0x05D2, r25
     da2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     da6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     db0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     db4:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     db6:	80 91 dc 03 	lds	r24, 0x03DC
     dba:	90 91 dd 03 	lds	r25, 0x03DD
     dbe:	90 93 cc 05 	sts	0x05CC, r25
     dc2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     dc6:	80 91 de 03 	lds	r24, 0x03DE
     dca:	90 91 df 03 	lds	r25, 0x03DF
     dce:	90 93 ce 05 	sts	0x05CE, r25
     dd2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     dd6:	80 91 e0 03 	lds	r24, 0x03E0
     dda:	90 91 e1 03 	lds	r25, 0x03E1
     dde:	90 93 d0 05 	sts	0x05D0, r25
     de2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     de6:	80 91 fa 03 	lds	r24, 0x03FA
     dea:	90 91 fb 03 	lds	r25, 0x03FB
     dee:	90 93 d2 05 	sts	0x05D2, r25
     df2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     df6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     e00:	10 92 d5 05 	sts	0x05D5, r1
				break;
     e04:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     e06:	80 91 dc 03 	lds	r24, 0x03DC
     e0a:	90 91 dd 03 	lds	r25, 0x03DD
     e0e:	90 93 cc 05 	sts	0x05CC, r25
     e12:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     e16:	80 91 de 03 	lds	r24, 0x03DE
     e1a:	90 91 df 03 	lds	r25, 0x03DF
     e1e:	90 93 ce 05 	sts	0x05CE, r25
     e22:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     e26:	80 91 e0 03 	lds	r24, 0x03E0
     e2a:	90 91 e1 03 	lds	r25, 0x03E1
     e2e:	90 93 d0 05 	sts	0x05D0, r25
     e32:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     e36:	80 91 fa 03 	lds	r24, 0x03FA
     e3a:	90 91 fb 03 	lds	r25, 0x03FB
     e3e:	90 93 d2 05 	sts	0x05D2, r25
     e42:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     e46:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     e50:	10 92 d5 05 	sts	0x05D5, r1
				break;
     e54:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     e56:	80 91 dc 03 	lds	r24, 0x03DC
     e5a:	90 91 dd 03 	lds	r25, 0x03DD
     e5e:	90 93 cc 05 	sts	0x05CC, r25
     e62:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     e66:	80 91 de 03 	lds	r24, 0x03DE
     e6a:	90 91 df 03 	lds	r25, 0x03DF
     e6e:	90 93 ce 05 	sts	0x05CE, r25
     e72:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     e76:	80 91 e0 03 	lds	r24, 0x03E0
     e7a:	90 91 e1 03 	lds	r25, 0x03E1
     e7e:	90 93 d0 05 	sts	0x05D0, r25
     e82:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     e86:	80 91 fa 03 	lds	r24, 0x03FA
     e8a:	90 91 fb 03 	lds	r25, 0x03FB
     e8e:	90 93 d2 05 	sts	0x05D2, r25
     e92:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     e96:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     ea0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     ea4:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     ea6:	80 91 e2 03 	lds	r24, 0x03E2
     eaa:	90 91 e3 03 	lds	r25, 0x03E3
     eae:	90 93 cc 05 	sts	0x05CC, r25
     eb2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     eb6:	80 91 e4 03 	lds	r24, 0x03E4
     eba:	90 91 e5 03 	lds	r25, 0x03E5
     ebe:	90 93 ce 05 	sts	0x05CE, r25
     ec2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     ec6:	80 91 e6 03 	lds	r24, 0x03E6
     eca:	90 91 e7 03 	lds	r25, 0x03E7
     ece:	90 93 d0 05 	sts	0x05D0, r25
     ed2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ed6:	80 91 fa 03 	lds	r24, 0x03FA
     eda:	90 91 fb 03 	lds	r25, 0x03FB
     ede:	90 93 d2 05 	sts	0x05D2, r25
     ee2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     ee6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     ef0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     ef4:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     ef6:	80 91 e2 03 	lds	r24, 0x03E2
     efa:	90 91 e3 03 	lds	r25, 0x03E3
     efe:	90 93 cc 05 	sts	0x05CC, r25
     f02:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     f06:	80 91 e4 03 	lds	r24, 0x03E4
     f0a:	90 91 e5 03 	lds	r25, 0x03E5
     f0e:	90 93 ce 05 	sts	0x05CE, r25
     f12:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     f16:	80 91 e6 03 	lds	r24, 0x03E6
     f1a:	90 91 e7 03 	lds	r25, 0x03E7
     f1e:	90 93 d0 05 	sts	0x05D0, r25
     f22:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     f26:	80 91 fa 03 	lds	r24, 0x03FA
     f2a:	90 91 fb 03 	lds	r25, 0x03FB
     f2e:	90 93 d2 05 	sts	0x05D2, r25
     f32:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     f36:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     f40:	10 92 d5 05 	sts	0x05D5, r1
				break;
     f44:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     f46:	80 91 e2 03 	lds	r24, 0x03E2
     f4a:	90 91 e3 03 	lds	r25, 0x03E3
     f4e:	90 93 cc 05 	sts	0x05CC, r25
     f52:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     f56:	80 91 e4 03 	lds	r24, 0x03E4
     f5a:	90 91 e5 03 	lds	r25, 0x03E5
     f5e:	90 93 ce 05 	sts	0x05CE, r25
     f62:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     f66:	80 91 e6 03 	lds	r24, 0x03E6
     f6a:	90 91 e7 03 	lds	r25, 0x03E7
     f6e:	90 93 d0 05 	sts	0x05D0, r25
     f72:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     f76:	80 91 fa 03 	lds	r24, 0x03FA
     f7a:	90 91 fb 03 	lds	r25, 0x03FB
     f7e:	90 93 d2 05 	sts	0x05D2, r25
     f82:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     f86:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     f90:	10 92 d5 05 	sts	0x05D5, r1
				break;
     f94:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     f96:	80 91 e8 03 	lds	r24, 0x03E8
     f9a:	90 91 e9 03 	lds	r25, 0x03E9
     f9e:	90 93 cc 05 	sts	0x05CC, r25
     fa2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     fa6:	80 91 ea 03 	lds	r24, 0x03EA
     faa:	90 91 eb 03 	lds	r25, 0x03EB
     fae:	90 93 ce 05 	sts	0x05CE, r25
     fb2:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     fb6:	80 91 c2 03 	lds	r24, 0x03C2
     fba:	90 91 c3 03 	lds	r25, 0x03C3
     fbe:	90 93 d0 05 	sts	0x05D0, r25
     fc2:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     fc6:	80 91 fa 03 	lds	r24, 0x03FA
     fca:	90 91 fb 03 	lds	r25, 0x03FB
     fce:	90 93 d2 05 	sts	0x05D2, r25
     fd2:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
     fd6:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
     fe0:	10 92 d5 05 	sts	0x05D5, r1
				break;
     fe4:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     fe6:	80 91 e8 03 	lds	r24, 0x03E8
     fea:	90 91 e9 03 	lds	r25, 0x03E9
     fee:	90 93 cc 05 	sts	0x05CC, r25
     ff2:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     ff6:	80 91 ea 03 	lds	r24, 0x03EA
     ffa:	90 91 eb 03 	lds	r25, 0x03EB
     ffe:	90 93 ce 05 	sts	0x05CE, r25
    1002:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
    1006:	80 91 c2 03 	lds	r24, 0x03C2
    100a:	90 91 c3 03 	lds	r25, 0x03C3
    100e:	90 93 d0 05 	sts	0x05D0, r25
    1012:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1016:	80 91 fa 03 	lds	r24, 0x03FA
    101a:	90 91 fb 03 	lds	r25, 0x03FB
    101e:	90 93 d2 05 	sts	0x05D2, r25
    1022:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1026:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
    1030:	10 92 d5 05 	sts	0x05D5, r1
				break;
    1034:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
    1036:	80 91 00 01 	lds	r24, 0x0100
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	49 f4       	brne	.+18     	; 0x1050 <State_Update+0x674>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
    103e:	80 91 ec 03 	lds	r24, 0x03EC
    1042:	90 91 ed 03 	lds	r25, 0x03ED
    1046:	90 93 cc 05 	sts	0x05CC, r25
    104a:	80 93 cb 05 	sts	0x05CB, r24
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <State_Update+0x684>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
    1050:	80 91 ee 03 	lds	r24, 0x03EE
    1054:	90 91 ef 03 	lds	r25, 0x03EF
    1058:	90 93 cc 05 	sts	0x05CC, r25
    105c:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    1060:	80 91 f0 03 	lds	r24, 0x03F0
    1064:	90 91 f1 03 	lds	r25, 0x03F1
    1068:	90 93 ce 05 	sts	0x05CE, r25
    106c:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    1070:	80 91 f2 03 	lds	r24, 0x03F2
    1074:	90 91 f3 03 	lds	r25, 0x03F3
    1078:	90 93 d0 05 	sts	0x05D0, r25
    107c:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1080:	80 91 fa 03 	lds	r24, 0x03FA
    1084:	90 91 fb 03 	lds	r25, 0x03FB
    1088:	90 93 d2 05 	sts	0x05D2, r25
    108c:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1090:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
    109a:	10 92 d5 05 	sts	0x05D5, r1
				break;
    109e:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
    10a0:	80 91 00 01 	lds	r24, 0x0100
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	49 f4       	brne	.+18     	; 0x10ba <State_Update+0x6de>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    10a8:	80 91 ec 03 	lds	r24, 0x03EC
    10ac:	90 91 ed 03 	lds	r25, 0x03ED
    10b0:	90 93 cc 05 	sts	0x05CC, r25
    10b4:	80 93 cb 05 	sts	0x05CB, r24
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <State_Update+0x6ee>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    10ba:	80 91 ee 03 	lds	r24, 0x03EE
    10be:	90 91 ef 03 	lds	r25, 0x03EF
    10c2:	90 93 cc 05 	sts	0x05CC, r25
    10c6:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    10ca:	80 91 f0 03 	lds	r24, 0x03F0
    10ce:	90 91 f1 03 	lds	r25, 0x03F1
    10d2:	90 93 ce 05 	sts	0x05CE, r25
    10d6:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    10da:	80 91 f2 03 	lds	r24, 0x03F2
    10de:	90 91 f3 03 	lds	r25, 0x03F3
    10e2:	90 93 d0 05 	sts	0x05D0, r25
    10e6:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    10ea:	80 91 fa 03 	lds	r24, 0x03FA
    10ee:	90 91 fb 03 	lds	r25, 0x03FB
    10f2:	90 93 d2 05 	sts	0x05D2, r25
    10f6:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    10fa:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
    1104:	10 92 d5 05 	sts	0x05D5, r1
				break;
    1108:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
    110a:	80 91 00 01 	lds	r24, 0x0100
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	49 f4       	brne	.+18     	; 0x1124 <__stack+0x25>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    1112:	80 91 ec 03 	lds	r24, 0x03EC
    1116:	90 91 ed 03 	lds	r25, 0x03ED
    111a:	90 93 cc 05 	sts	0x05CC, r25
    111e:	80 93 cb 05 	sts	0x05CB, r24
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <__stack+0x35>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    1124:	80 91 ee 03 	lds	r24, 0x03EE
    1128:	90 91 ef 03 	lds	r25, 0x03EF
    112c:	90 93 cc 05 	sts	0x05CC, r25
    1130:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    1134:	80 91 f0 03 	lds	r24, 0x03F0
    1138:	90 91 f1 03 	lds	r25, 0x03F1
    113c:	90 93 ce 05 	sts	0x05CE, r25
    1140:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    1144:	80 91 f2 03 	lds	r24, 0x03F2
    1148:	90 91 f3 03 	lds	r25, 0x03F3
    114c:	90 93 d0 05 	sts	0x05D0, r25
    1150:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1154:	80 91 fa 03 	lds	r24, 0x03FA
    1158:	90 91 fb 03 	lds	r25, 0x03FB
    115c:	90 93 d2 05 	sts	0x05D2, r25
    1160:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1164:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
    116e:	10 92 d5 05 	sts	0x05D5, r1
				break;
    1172:	08 95       	ret
			case MENU_STATE_PD_MODE1_P4:
				if(PD_Unit == UNIT_PA)
    1174:	80 91 05 01 	lds	r24, 0x0105
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	49 f4       	brne	.+18     	; 0x118e <__stack+0x8f>
				SYS_Screen_Buffer.line[0] = Display_Strings[29];
    117c:	80 91 fc 03 	lds	r24, 0x03FC
    1180:	90 91 fd 03 	lds	r25, 0x03FD
    1184:	90 93 cc 05 	sts	0x05CC, r25
    1188:	80 93 cb 05 	sts	0x05CB, r24
    118c:	0a c0       	rjmp	.+20     	; 0x11a2 <__stack+0xa3>
				else if(PD_Unit == UNIT_MMH2O)
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	41 f4       	brne	.+16     	; 0x11a2 <__stack+0xa3>
				SYS_Screen_Buffer.line[0] = Display_Strings[30];
    1192:	80 91 fe 03 	lds	r24, 0x03FE
    1196:	90 91 ff 03 	lds	r25, 0x03FF
    119a:	90 93 cc 05 	sts	0x05CC, r25
    119e:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[0];
    11a2:	80 91 c2 03 	lds	r24, 0x03C2
    11a6:	90 91 c3 03 	lds	r25, 0x03C3
    11aa:	90 93 ce 05 	sts	0x05CE, r25
    11ae:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
    11b2:	90 93 d0 05 	sts	0x05D0, r25
    11b6:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.menu = 0;
    11ba:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 0;
    11c4:	10 92 d5 05 	sts	0x05D5, r1
				break;
    11c8:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_UP1:
				if(PD_Mode ==1)
    11ca:	80 91 00 01 	lds	r24, 0x0100
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	49 f4       	brne	.+18     	; 0x11e4 <__stack+0xe5>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    11d2:	80 91 ec 03 	lds	r24, 0x03EC
    11d6:	90 91 ed 03 	lds	r25, 0x03ED
    11da:	90 93 cc 05 	sts	0x05CC, r25
    11de:	80 93 cb 05 	sts	0x05CB, r24
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <__stack+0xf5>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    11e4:	80 91 ee 03 	lds	r24, 0x03EE
    11e8:	90 91 ef 03 	lds	r25, 0x03EF
    11ec:	90 93 cc 05 	sts	0x05CC, r25
    11f0:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    11f4:	80 91 f0 03 	lds	r24, 0x03F0
    11f8:	90 91 f1 03 	lds	r25, 0x03F1
    11fc:	90 93 ce 05 	sts	0x05CE, r25
    1200:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    1204:	80 91 f2 03 	lds	r24, 0x03F2
    1208:	90 91 f3 03 	lds	r25, 0x03F3
    120c:	90 93 d0 05 	sts	0x05D0, r25
    1210:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1214:	80 91 fa 03 	lds	r24, 0x03FA
    1218:	90 91 fb 03 	lds	r25, 0x03FB
    121c:	90 93 d2 05 	sts	0x05D2, r25
    1220:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1224:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 d5 05 	sts	0x05D5, r24
				break;
    1234:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_UP2: 
				if(PD_Mode ==1)
    1236:	80 91 00 01 	lds	r24, 0x0100
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	49 f4       	brne	.+18     	; 0x1250 <__stack+0x151>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    123e:	80 91 ec 03 	lds	r24, 0x03EC
    1242:	90 91 ed 03 	lds	r25, 0x03ED
    1246:	90 93 cc 05 	sts	0x05CC, r25
    124a:	80 93 cb 05 	sts	0x05CB, r24
    124e:	08 c0       	rjmp	.+16     	; 0x1260 <__stack+0x161>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    1250:	80 91 ee 03 	lds	r24, 0x03EE
    1254:	90 91 ef 03 	lds	r25, 0x03EF
    1258:	90 93 cc 05 	sts	0x05CC, r25
    125c:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    1260:	80 91 f0 03 	lds	r24, 0x03F0
    1264:	90 91 f1 03 	lds	r25, 0x03F1
    1268:	90 93 ce 05 	sts	0x05CE, r25
    126c:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    1270:	80 91 f2 03 	lds	r24, 0x03F2
    1274:	90 91 f3 03 	lds	r25, 0x03F3
    1278:	90 93 d0 05 	sts	0x05D0, r25
    127c:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1280:	80 91 fa 03 	lds	r24, 0x03FA
    1284:	90 91 fb 03 	lds	r25, 0x03FB
    1288:	90 93 d2 05 	sts	0x05D2, r25
    128c:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1290:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 2;
    129a:	80 93 d5 05 	sts	0x05D5, r24
				break;
    129e:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_UP3:
				if(PD_Mode ==1)
    12a0:	80 91 00 01 	lds	r24, 0x0100
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	49 f4       	brne	.+18     	; 0x12ba <__stack+0x1bb>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    12a8:	80 91 ec 03 	lds	r24, 0x03EC
    12ac:	90 91 ed 03 	lds	r25, 0x03ED
    12b0:	90 93 cc 05 	sts	0x05CC, r25
    12b4:	80 93 cb 05 	sts	0x05CB, r24
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <__stack+0x1cb>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    12ba:	80 91 ee 03 	lds	r24, 0x03EE
    12be:	90 91 ef 03 	lds	r25, 0x03EF
    12c2:	90 93 cc 05 	sts	0x05CC, r25
    12c6:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    12ca:	80 91 f0 03 	lds	r24, 0x03F0
    12ce:	90 91 f1 03 	lds	r25, 0x03F1
    12d2:	90 93 ce 05 	sts	0x05CE, r25
    12d6:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    12da:	80 91 f2 03 	lds	r24, 0x03F2
    12de:	90 91 f3 03 	lds	r25, 0x03F3
    12e2:	90 93 d0 05 	sts	0x05D0, r25
    12e6:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    12ea:	80 91 fa 03 	lds	r24, 0x03FA
    12ee:	90 91 fb 03 	lds	r25, 0x03FB
    12f2:	90 93 d2 05 	sts	0x05D2, r25
    12f6:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    12fa:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 2;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 3;
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	80 93 d5 05 	sts	0x05D5, r24
				break;
    130a:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_DN1:
				if(PD_Mode ==1)
    130c:	80 91 00 01 	lds	r24, 0x0100
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	49 f4       	brne	.+18     	; 0x1326 <__stack+0x227>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    1314:	80 91 ec 03 	lds	r24, 0x03EC
    1318:	90 91 ed 03 	lds	r25, 0x03ED
    131c:	90 93 cc 05 	sts	0x05CC, r25
    1320:	80 93 cb 05 	sts	0x05CB, r24
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__stack+0x237>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    1326:	80 91 ee 03 	lds	r24, 0x03EE
    132a:	90 91 ef 03 	lds	r25, 0x03EF
    132e:	90 93 cc 05 	sts	0x05CC, r25
    1332:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    1336:	80 91 f0 03 	lds	r24, 0x03F0
    133a:	90 91 f1 03 	lds	r25, 0x03F1
    133e:	90 93 ce 05 	sts	0x05CE, r25
    1342:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    1346:	80 91 f2 03 	lds	r24, 0x03F2
    134a:	90 91 f3 03 	lds	r25, 0x03F3
    134e:	90 93 d0 05 	sts	0x05D0, r25
    1352:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    1356:	80 91 fa 03 	lds	r24, 0x03FA
    135a:	90 91 fb 03 	lds	r25, 0x03FB
    135e:	90 93 d2 05 	sts	0x05D2, r25
    1362:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    1366:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 4;
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	80 93 d5 05 	sts	0x05D5, r24
				break;
    1376:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_DN2:
				if(PD_Mode ==1)
    1378:	80 91 00 01 	lds	r24, 0x0100
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	49 f4       	brne	.+18     	; 0x1392 <__stack+0x293>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    1380:	80 91 ec 03 	lds	r24, 0x03EC
    1384:	90 91 ed 03 	lds	r25, 0x03ED
    1388:	90 93 cc 05 	sts	0x05CC, r25
    138c:	80 93 cb 05 	sts	0x05CB, r24
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <__stack+0x2a3>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    1392:	80 91 ee 03 	lds	r24, 0x03EE
    1396:	90 91 ef 03 	lds	r25, 0x03EF
    139a:	90 93 cc 05 	sts	0x05CC, r25
    139e:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    13a2:	80 91 f0 03 	lds	r24, 0x03F0
    13a6:	90 91 f1 03 	lds	r25, 0x03F1
    13aa:	90 93 ce 05 	sts	0x05CE, r25
    13ae:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    13b2:	80 91 f2 03 	lds	r24, 0x03F2
    13b6:	90 91 f3 03 	lds	r25, 0x03F3
    13ba:	90 93 d0 05 	sts	0x05D0, r25
    13be:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    13c2:	80 91 fa 03 	lds	r24, 0x03FA
    13c6:	90 91 fb 03 	lds	r25, 0x03FB
    13ca:	90 93 d2 05 	sts	0x05D2, r25
    13ce:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    13d2:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 5;
    13dc:	85 e0       	ldi	r24, 0x05	; 5
    13de:	80 93 d5 05 	sts	0x05D5, r24
				break;
    13e2:	08 95       	ret
			case MENU_STATE_PD_M1ADJ_DN3:
				if(PD_Mode ==1)
    13e4:	80 91 00 01 	lds	r24, 0x0100
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	49 f4       	brne	.+18     	; 0x13fe <__stack+0x2ff>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
    13ec:	80 91 ec 03 	lds	r24, 0x03EC
    13f0:	90 91 ed 03 	lds	r25, 0x03ED
    13f4:	90 93 cc 05 	sts	0x05CC, r25
    13f8:	80 93 cb 05 	sts	0x05CB, r24
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <__stack+0x30f>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
    13fe:	80 91 ee 03 	lds	r24, 0x03EE
    1402:	90 91 ef 03 	lds	r25, 0x03EF
    1406:	90 93 cc 05 	sts	0x05CC, r25
    140a:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
    140e:	80 91 f0 03 	lds	r24, 0x03F0
    1412:	90 91 f1 03 	lds	r25, 0x03F1
    1416:	90 93 ce 05 	sts	0x05CE, r25
    141a:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
    141e:	80 91 f2 03 	lds	r24, 0x03F2
    1422:	90 91 f3 03 	lds	r25, 0x03F3
    1426:	90 93 d0 05 	sts	0x05D0, r25
    142a:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
    142e:	80 91 fa 03 	lds	r24, 0x03FA
    1432:	90 91 fb 03 	lds	r25, 0x03FB
    1436:	90 93 d2 05 	sts	0x05D2, r25
    143a:	80 93 d1 05 	sts	0x05D1, r24
				SYS_Screen_Buffer.menu = 0;
    143e:	10 92 d3 05 	sts	0x05D3, r1
				SYS_Screen_Buffer.index = 3;
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	80 93 d4 05 	sts	0x05D4, r24
				SYS_Screen_Buffer.focus = 6;
    1448:	86 e0       	ldi	r24, 0x06	; 6
    144a:	80 93 d5 05 	sts	0x05D5, r24
				break;
    144e:	08 95       	ret
			
			default:
				SYS_Screen_Buffer.line[0] = Display_Strings[31];
    1450:	80 91 00 04 	lds	r24, 0x0400
    1454:	90 91 01 04 	lds	r25, 0x0401
    1458:	90 93 cc 05 	sts	0x05CC, r25
    145c:	80 93 cb 05 	sts	0x05CB, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[0];
    1460:	80 91 c2 03 	lds	r24, 0x03C2
    1464:	90 91 c3 03 	lds	r25, 0x03C3
    1468:	90 93 ce 05 	sts	0x05CE, r25
    146c:	80 93 cd 05 	sts	0x05CD, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
    1470:	90 93 d0 05 	sts	0x05D0, r25
    1474:	80 93 cf 05 	sts	0x05CF, r24
				SYS_Screen_Buffer.focus = 0;
    1478:	10 92 d5 05 	sts	0x05D5, r1
    147c:	08 95       	ret

0000147e <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	80 da       	rcall	.-2816   	; 0x984 <FindState>
    1484:	90 93 c5 05 	sts	0x05C5, r25
    1488:	80 93 c4 05 	sts	0x05C4, r24
		lcd12864_clrGDRAM();
    148c:	ec d3       	rcall	.+2008   	; 0x1c66 <lcd12864_clrGDRAM>
		Current_TimerFunc = SYS_State->Timer_Action;
    148e:	e0 91 c4 05 	lds	r30, 0x05C4
    1492:	f0 91 c5 05 	lds	r31, 0x05C5
    1496:	06 88       	ldd	r0, Z+22	; 0x16
    1498:	f7 89       	ldd	r31, Z+23	; 0x17
    149a:	e0 2d       	mov	r30, r0
    149c:	f0 93 c3 05 	sts	0x05C3, r31
    14a0:	e0 93 c2 05 	sts	0x05C2, r30
		Current_TimerFunc();
    14a4:	09 95       	icall
		Timer0_RegisterCallbackFunction(SYS_State->Timer_Action,1000);
    14a6:	e0 91 c4 05 	lds	r30, 0x05C4
    14aa:	f0 91 c5 05 	lds	r31, 0x05C5
    14ae:	68 ee       	ldi	r22, 0xE8	; 232
    14b0:	73 e0       	ldi	r23, 0x03	; 3
    14b2:	86 89       	ldd	r24, Z+22	; 0x16
    14b4:	97 89       	ldd	r25, Z+23	; 0x17
    14b6:	3d d1       	rcall	.+634    	; 0x1732 <Timer0_RegisterCallbackFunction>
		State_Update();
    14b8:	91 da       	rcall	.-2782   	; 0x9dc <State_Update>
		DrawScreen();
    14ba:	31 da       	rcall	.-2974   	; 0x91e <DrawScreen>

		lcd12864_Focus(0,0,0);
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	3e c4       	rjmp	.+2172   	; 0x1d40 <lcd12864_Focus>
    14c4:	08 95       	ret

000014c6 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
    14c6:	45 d2       	rcall	.+1162   	; 0x1952 <getkey>
		switch(key){
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <Menu_Poll+0x22>
    14cc:	38 f4       	brcc	.+14     	; 0x14dc <Menu_Poll+0x16>
    14ce:	88 23       	and	r24, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <Menu_Poll+0xe>
    14d2:	3a c0       	rjmp	.+116    	; 0x1548 <Menu_Poll+0x82>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f4       	brne	.+2      	; 0x14da <Menu_Poll+0x14>
    14d8:	4f c0       	rjmp	.+158    	; 0x1578 <Menu_Poll+0xb2>
    14da:	7e c0       	rjmp	.+252    	; 0x15d8 <Menu_Poll+0x112>
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	e1 f0       	breq	.+56     	; 0x1518 <Menu_Poll+0x52>
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <Menu_Poll+0x20>
    14e4:	61 c0       	rjmp	.+194    	; 0x15a8 <Menu_Poll+0xe2>
    14e6:	78 c0       	rjmp	.+240    	; 0x15d8 <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
    14e8:	e0 91 c4 05 	lds	r30, 0x05C4
    14ec:	f0 91 c5 05 	lds	r31, 0x05C5
    14f0:	02 88       	ldd	r0, Z+18	; 0x12
    14f2:	f3 89       	ldd	r31, Z+19	; 0x13
    14f4:	e0 2d       	mov	r30, r0
    14f6:	30 97       	sbiw	r30, 0x00	; 0
    14f8:	09 f0       	breq	.+2      	; 0x14fc <Menu_Poll+0x36>
					SYS_State->Right_Action();
    14fa:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
    14fc:	e0 91 c4 05 	lds	r30, 0x05C4
    1500:	f0 91 c5 05 	lds	r31, 0x05C5
    1504:	80 85       	ldd	r24, Z+8	; 0x08
    1506:	91 85       	ldd	r25, Z+9	; 0x09
    1508:	3d da       	rcall	.-2950   	; 0x984 <FindState>
    150a:	90 93 c5 05 	sts	0x05C5, r25
    150e:	80 93 c4 05 	sts	0x05C4, r24
				State_Update();
    1512:	64 da       	rcall	.-2872   	; 0x9dc <State_Update>
				DrawScreen();
    1514:	04 da       	rcall	.-3064   	; 0x91e <DrawScreen>
				break;
    1516:	62 c0       	rjmp	.+196    	; 0x15dc <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
    1518:	e0 91 c4 05 	lds	r30, 0x05C4
    151c:	f0 91 c5 05 	lds	r31, 0x05C5
    1520:	00 88       	ldd	r0, Z+16	; 0x10
    1522:	f1 89       	ldd	r31, Z+17	; 0x11
    1524:	e0 2d       	mov	r30, r0
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <Menu_Poll+0x66>
					SYS_State->Left_Action();
    152a:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
    152c:	e0 91 c4 05 	lds	r30, 0x05C4
    1530:	f0 91 c5 05 	lds	r31, 0x05C5
    1534:	86 81       	ldd	r24, Z+6	; 0x06
    1536:	97 81       	ldd	r25, Z+7	; 0x07
    1538:	25 da       	rcall	.-2998   	; 0x984 <FindState>
    153a:	90 93 c5 05 	sts	0x05C5, r25
    153e:	80 93 c4 05 	sts	0x05C4, r24
				State_Update();
    1542:	4c da       	rcall	.-2920   	; 0x9dc <State_Update>
				DrawScreen();
    1544:	ec d9       	rcall	.-3112   	; 0x91e <DrawScreen>
				break;
    1546:	4a c0       	rjmp	.+148    	; 0x15dc <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
    1548:	e0 91 c4 05 	lds	r30, 0x05C4
    154c:	f0 91 c5 05 	lds	r31, 0x05C5
    1550:	04 84       	ldd	r0, Z+12	; 0x0c
    1552:	f5 85       	ldd	r31, Z+13	; 0x0d
    1554:	e0 2d       	mov	r30, r0
    1556:	30 97       	sbiw	r30, 0x00	; 0
    1558:	09 f0       	breq	.+2      	; 0x155c <Menu_Poll+0x96>
				SYS_State->Up_Action();
    155a:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
    155c:	e0 91 c4 05 	lds	r30, 0x05C4
    1560:	f0 91 c5 05 	lds	r31, 0x05C5
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	0d da       	rcall	.-3046   	; 0x984 <FindState>
    156a:	90 93 c5 05 	sts	0x05C5, r25
    156e:	80 93 c4 05 	sts	0x05C4, r24
				State_Update();
    1572:	34 da       	rcall	.-2968   	; 0x9dc <State_Update>
				DrawScreen();
    1574:	d4 d9       	rcall	.-3160   	; 0x91e <DrawScreen>
				break;
    1576:	32 c0       	rjmp	.+100    	; 0x15dc <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
    1578:	e0 91 c4 05 	lds	r30, 0x05C4
    157c:	f0 91 c5 05 	lds	r31, 0x05C5
    1580:	06 84       	ldd	r0, Z+14	; 0x0e
    1582:	f7 85       	ldd	r31, Z+15	; 0x0f
    1584:	e0 2d       	mov	r30, r0
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <Menu_Poll+0xc6>
				SYS_State->Down_Action();
    158a:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
    158c:	e0 91 c4 05 	lds	r30, 0x05C4
    1590:	f0 91 c5 05 	lds	r31, 0x05C5
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	95 81       	ldd	r25, Z+5	; 0x05
    1598:	f5 d9       	rcall	.-3094   	; 0x984 <FindState>
    159a:	90 93 c5 05 	sts	0x05C5, r25
    159e:	80 93 c4 05 	sts	0x05C4, r24
				State_Update();
    15a2:	1c da       	rcall	.-3016   	; 0x9dc <State_Update>
				DrawScreen();
    15a4:	bc d9       	rcall	.-3208   	; 0x91e <DrawScreen>
				break;
    15a6:	1a c0       	rjmp	.+52     	; 0x15dc <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
    15a8:	e0 91 c4 05 	lds	r30, 0x05C4
    15ac:	f0 91 c5 05 	lds	r31, 0x05C5
    15b0:	04 88       	ldd	r0, Z+20	; 0x14
    15b2:	f5 89       	ldd	r31, Z+21	; 0x15
    15b4:	e0 2d       	mov	r30, r0
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	09 f0       	breq	.+2      	; 0x15bc <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
    15ba:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
    15bc:	e0 91 c4 05 	lds	r30, 0x05C4
    15c0:	f0 91 c5 05 	lds	r31, 0x05C5
    15c4:	82 85       	ldd	r24, Z+10	; 0x0a
    15c6:	93 85       	ldd	r25, Z+11	; 0x0b
    15c8:	dd d9       	rcall	.-3142   	; 0x984 <FindState>
    15ca:	90 93 c5 05 	sts	0x05C5, r25
    15ce:	80 93 c4 05 	sts	0x05C4, r24
				State_Update();
    15d2:	04 da       	rcall	.-3064   	; 0x9dc <State_Update>
				DrawScreen();
    15d4:	a4 d9       	rcall	.-3256   	; 0x91e <DrawScreen>
				break;
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
    15d8:	8f 3f       	cpi	r24, 0xFF	; 255
    15da:	d1 f0       	breq	.+52     	; 0x1610 <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
    15dc:	80 91 c2 05 	lds	r24, 0x05C2
    15e0:	90 91 c3 05 	lds	r25, 0x05C3
    15e4:	fb d0       	rcall	.+502    	; 0x17dc <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
    15e6:	e0 91 c4 05 	lds	r30, 0x05C4
    15ea:	f0 91 c5 05 	lds	r31, 0x05C5
    15ee:	06 88       	ldd	r0, Z+22	; 0x16
    15f0:	f7 89       	ldd	r31, Z+23	; 0x17
    15f2:	e0 2d       	mov	r30, r0
    15f4:	f0 93 c3 05 	sts	0x05C3, r31
    15f8:	e0 93 c2 05 	sts	0x05C2, r30
			if(Current_TimerFunc != NULL){
    15fc:	30 97       	sbiw	r30, 0x00	; 0
    15fe:	41 f0       	breq	.+16     	; 0x1610 <Menu_Poll+0x14a>
			Current_TimerFunc();
    1600:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
    1602:	68 ee       	ldi	r22, 0xE8	; 232
    1604:	73 e0       	ldi	r23, 0x03	; 3
    1606:	80 91 c2 05 	lds	r24, 0x05C2
    160a:	90 91 c3 05 	lds	r25, 0x05C3
    160e:	91 c0       	rjmp	.+290    	; 0x1732 <Timer0_RegisterCallbackFunction>
    1610:	08 95       	ret

00001612 <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
    1612:	ee ed       	ldi	r30, 0xDE	; 222
    1614:	f5 e0       	ldi	r31, 0x05	; 5
    1616:	8e e0       	ldi	r24, 0x0E	; 14
    1618:	96 e0       	ldi	r25, 0x06	; 6
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
    161a:	11 82       	std	Z+1, r1	; 0x01
    161c:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
    161e:	13 82       	std	Z+3, r1	; 0x03
    1620:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
    1622:	15 82       	std	Z+5, r1	; 0x05
    1624:	14 82       	std	Z+4, r1	; 0x04
    1626:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
    1628:	e8 17       	cp	r30, r24
    162a:	f9 07       	cpc	r31, r25
    162c:	b1 f7       	brne	.-20     	; 0x161a <Timer0_Init+0x8>
    162e:	e6 ed       	ldi	r30, 0xD6	; 214
    1630:	f5 e0       	ldi	r31, 0x05	; 5
    1632:	8e ed       	ldi	r24, 0xDE	; 222
    1634:	95 e0       	ldi	r25, 0x05	; 5
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
    1636:	2f ef       	ldi	r18, 0xFF	; 255
    1638:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    163a:	e8 17       	cp	r30, r24
    163c:	f9 07       	cpc	r31, r25
    163e:	e1 f7       	brne	.-8      	; 0x1638 <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
    1640:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
    1642:	83 b7       	in	r24, 0x33	; 51
    1644:	87 60       	ori	r24, 0x07	; 7
    1646:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
    1648:	88 eb       	ldi	r24, 0xB8	; 184
    164a:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
    164c:	86 b7       	in	r24, 0x36	; 54
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
    1652:	87 b7       	in	r24, 0x37	; 55
    1654:	82 60       	ori	r24, 0x02	; 2
    1656:	87 bf       	out	0x37, r24	; 55
			sei();
    1658:	78 94       	sei
    165a:	08 95       	ret

0000165c <__vector_15>:
}


ISR(TIMER0_COMP_vect){
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	0b b6       	in	r0, 0x3b	; 59
    1668:	0f 92       	push	r0
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
    168a:	88 eb       	ldi	r24, 0xB8	; 184
    168c:	82 bf       	out	0x32, r24	; 50
    168e:	ce ed       	ldi	r28, 0xDE	; 222
    1690:	d5 e0       	ldi	r29, 0x05	; 5
    1692:	0e e0       	ldi	r16, 0x0E	; 14
    1694:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
    1696:	88 81       	ld	r24, Y
    1698:	99 81       	ldd	r25, Y+1	; 0x01
    169a:	89 2b       	or	r24, r25
    169c:	81 f0       	breq	.+32     	; 0x16be <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	2a 81       	ldd	r18, Y+2	; 0x02
    16a4:	3b 81       	ldd	r19, Y+3	; 0x03
    16a6:	82 17       	cp	r24, r18
    16a8:	93 07       	cpc	r25, r19
    16aa:	31 f4       	brne	.+12     	; 0x16b8 <__vector_15+0x5c>
				EventList[i].counter = 0;
    16ac:	1d 82       	std	Y+5, r1	; 0x05
    16ae:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
    16b0:	e8 81       	ld	r30, Y
    16b2:	f9 81       	ldd	r31, Y+1	; 0x01
    16b4:	09 95       	icall
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	9d 83       	std	Y+5, r25	; 0x05
    16bc:	8c 83       	std	Y+4, r24	; 0x04
    16be:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
    16c0:	c0 17       	cp	r28, r16
    16c2:	d1 07       	cpc	r29, r17
    16c4:	41 f7       	brne	.-48     	; 0x1696 <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
    16c6:	80 91 c6 05 	lds	r24, 0x05C6
    16ca:	90 91 c7 05 	lds	r25, 0x05C7
    16ce:	9c 01       	movw	r18, r24
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	30 93 c7 05 	sts	0x05C7, r19
    16d8:	20 93 c6 05 	sts	0x05C6, r18
    16dc:	84 36       	cpi	r24, 0x64	; 100
    16de:	91 05       	cpc	r25, r1
    16e0:	89 f4       	brne	.+34     	; 0x1704 <__vector_15+0xa8>
    16e2:	e6 ed       	ldi	r30, 0xD6	; 214
    16e4:	f5 e0       	ldi	r31, 0x05	; 5
    16e6:	8e ed       	ldi	r24, 0xDE	; 222
    16e8:	95 e0       	ldi	r25, 0x05	; 5
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
    16ea:	20 81       	ld	r18, Z
    16ec:	21 50       	subi	r18, 0x01	; 1
    16ee:	2e 3f       	cpi	r18, 0xFE	; 254
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <__vector_15+0x98>
				CountDownTimers[i]--;
    16f2:	20 83       	st	Z, r18
    16f4:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
    16f6:	e8 17       	cp	r30, r24
    16f8:	f9 07       	cpc	r31, r25
    16fa:	b9 f7       	brne	.-18     	; 0x16ea <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
    16fc:	10 92 c7 05 	sts	0x05C7, r1
    1700:	10 92 c6 05 	sts	0x05C6, r1
	}
	
}
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	bf 91       	pop	r27
    170e:	af 91       	pop	r26
    1710:	9f 91       	pop	r25
    1712:	8f 91       	pop	r24
    1714:	7f 91       	pop	r23
    1716:	6f 91       	pop	r22
    1718:	5f 91       	pop	r21
    171a:	4f 91       	pop	r20
    171c:	3f 91       	pop	r19
    171e:	2f 91       	pop	r18
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	0f 90       	pop	r0
    1726:	0b be       	out	0x3b, r0	; 59
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
    1736:	6a 30       	cpi	r22, 0x0A	; 10
    1738:	71 05       	cpc	r23, r1
    173a:	10 f4       	brcc	.+4      	; 0x1740 <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
    173c:	6a e0       	ldi	r22, 0x0A	; 10
    173e:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
    1740:	c0 91 de 05 	lds	r28, 0x05DE
    1744:	d0 91 df 05 	lds	r29, 0x05DF
    1748:	c8 17       	cp	r28, r24
    174a:	d9 07       	cpc	r29, r25
    174c:	09 f4       	brne	.+2      	; 0x1750 <Timer0_RegisterCallbackFunction+0x1e>
    174e:	3e c0       	rjmp	.+124    	; 0x17cc <Timer0_RegisterCallbackFunction+0x9a>
    1750:	ae e0       	ldi	r26, 0x0E	; 14
    1752:	b6 e0       	ldi	r27, 0x06	; 6
    1754:	e4 ee       	ldi	r30, 0xE4	; 228
    1756:	f5 e0       	ldi	r31, 0x05	; 5
    1758:	40 81       	ld	r20, Z
    175a:	51 81       	ldd	r21, Z+1	; 0x01
    175c:	48 17       	cp	r20, r24
    175e:	59 07       	cpc	r21, r25
    1760:	b9 f1       	breq	.+110    	; 0x17d0 <Timer0_RegisterCallbackFunction+0x9e>
    1762:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1764:	ea 17       	cp	r30, r26
    1766:	fb 07       	cpc	r31, r27
    1768:	b9 f7       	brne	.-18     	; 0x1758 <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
    176a:	cd 2b       	or	r28, r29
    176c:	51 f0       	breq	.+20     	; 0x1782 <Timer0_RegisterCallbackFunction+0x50>
    176e:	e4 ee       	ldi	r30, 0xE4	; 228
    1770:	f5 e0       	ldi	r31, 0x05	; 5
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	ea 01       	movw	r28, r20
    1778:	a0 81       	ld	r26, Z
    177a:	b1 81       	ldd	r27, Z+1	; 0x01
    177c:	ab 2b       	or	r26, r27
    177e:	f9 f4       	brne	.+62     	; 0x17be <Timer0_RegisterCallbackFunction+0x8c>
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <Timer0_RegisterCallbackFunction+0x54>
    1782:	c0 e0       	ldi	r28, 0x00	; 0
    1784:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
    1786:	ae 01       	movw	r20, r28
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	fa 01       	movw	r30, r20
    178e:	ec 0f       	add	r30, r28
    1790:	fd 1f       	adc	r31, r29
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	e2 52       	subi	r30, 0x22	; 34
    1798:	fa 4f       	sbci	r31, 0xFA	; 250
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
    179e:	9b 01       	movw	r18, r22
    17a0:	ad ec       	ldi	r26, 0xCD	; 205
    17a2:	bc ec       	ldi	r27, 0xCC	; 204
    17a4:	fa d5       	rcall	.+3060   	; 0x239a <__umulhisi3>
    17a6:	96 95       	lsr	r25
    17a8:	87 95       	ror	r24
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	93 83       	std	Z+3, r25	; 0x03
    17b4:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
    17b6:	15 82       	std	Z+5, r1	; 0x05
    17b8:	14 82       	std	Z+4, r1	; 0x04
			return true;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <Timer0_RegisterCallbackFunction+0xa4>
    17be:	4f 5f       	subi	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    17c4:	48 30       	cpi	r20, 0x08	; 8
    17c6:	51 05       	cpc	r21, r1
    17c8:	b1 f6       	brne	.-84     	; 0x1776 <Timer0_RegisterCallbackFunction+0x44>
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <Timer0_RegisterCallbackFunction+0xa4>
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
    17dc:	20 91 de 05 	lds	r18, 0x05DE
    17e0:	30 91 df 05 	lds	r19, 0x05DF
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	59 f0       	breq	.+22     	; 0x1800 <Timer0_RemoveCallbackFunction+0x24>
    17ea:	e4 ee       	ldi	r30, 0xE4	; 228
    17ec:	f5 e0       	ldi	r31, 0x05	; 5
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	b9 01       	movw	r22, r18
    17f4:	40 81       	ld	r20, Z
    17f6:	51 81       	ldd	r21, Z+1	; 0x01
    17f8:	48 17       	cp	r20, r24
    17fa:	59 07       	cpc	r21, r25
    17fc:	e1 f4       	brne	.+56     	; 0x1836 <Timer0_RemoveCallbackFunction+0x5a>
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <Timer0_RemoveCallbackFunction+0x28>
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
    1804:	cb 01       	movw	r24, r22
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	fc 01       	movw	r30, r24
    180c:	e6 0f       	add	r30, r22
    180e:	f7 1f       	adc	r31, r23
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	e2 52       	subi	r30, 0x22	; 34
    1816:	fa 4f       	sbci	r31, 0xFA	; 250
    1818:	11 82       	std	Z+1, r1	; 0x01
    181a:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
    181c:	13 82       	std	Z+3, r1	; 0x03
    181e:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
    1820:	68 0f       	add	r22, r24
    1822:	79 1f       	adc	r23, r25
    1824:	fb 01       	movw	r30, r22
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e2 52       	subi	r30, 0x22	; 34
    182c:	fa 4f       	sbci	r31, 0xFA	; 250
    182e:	15 82       	std	Z+5, r1	; 0x05
    1830:	14 82       	std	Z+4, r1	; 0x04
			return true;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	08 95       	ret
    1836:	2f 5f       	subi	r18, 0xFF	; 255
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    183c:	28 30       	cpi	r18, 0x08	; 8
    183e:	31 05       	cpc	r19, r1
    1840:	c1 f6       	brne	.-80     	; 0x17f2 <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    1842:	80 e0       	ldi	r24, 0x00	; 0
}
    1844:	08 95       	ret

00001846 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
    1846:	80 91 d6 05 	lds	r24, 0x05D6
    184a:	8f 3f       	cpi	r24, 0xFF	; 255
    184c:	51 f0       	breq	.+20     	; 0x1862 <Timer0_AllocateCountdownTimer+0x1c>
    184e:	e7 ed       	ldi	r30, 0xD7	; 215
    1850:	f5 e0       	ldi	r31, 0x05	; 5
    1852:	21 e0       	ldi	r18, 0x01	; 1
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	82 2f       	mov	r24, r18
    1858:	a9 01       	movw	r20, r18
    185a:	91 91       	ld	r25, Z+
    185c:	9f 3f       	cpi	r25, 0xFF	; 255
    185e:	51 f4       	brne	.+20     	; 0x1874 <Timer0_AllocateCountdownTimer+0x2e>
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <Timer0_AllocateCountdownTimer+0x22>
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    1866:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
    1868:	fa 01       	movw	r30, r20
    186a:	ea 52       	subi	r30, 0x2A	; 42
    186c:	fa 4f       	sbci	r31, 0xFA	; 250
    186e:	10 82       	st	Z, r1
		return i+1;
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	08 95       	ret
    1874:	2f 5f       	subi	r18, 0xFF	; 255
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    1878:	28 30       	cpi	r18, 0x08	; 8
    187a:	31 05       	cpc	r19, r1
    187c:	61 f7       	brne	.-40     	; 0x1856 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
    187e:	80 e0       	ldi	r24, 0x00	; 0
}
    1880:	08 95       	ret

00001882 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
    1882:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
    1888:	ea e6       	ldi	r30, 0x6A	; 106
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
    1892:	89 b7       	in	r24, 0x39	; 57
    1894:	82 60       	ori	r24, 0x02	; 2
    1896:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
    1898:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
    189a:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
    189c:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
    189e:	d3 df       	rcall	.-90     	; 0x1846 <Timer0_AllocateCountdownTimer>
    18a0:	80 93 0e 06 	sts	0x060E, r24
    18a4:	08 95       	ret

000018a6 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
    18a6:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
    18a8:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    18aa:	80 fd       	sbrc	r24, 0
    18ac:	15 c0       	rjmp	.+42     	; 0x18d8 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    18ae:	81 fd       	sbrc	r24, 1
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    18b2:	82 fd       	sbrc	r24, 2
    18b4:	15 c0       	rjmp	.+42     	; 0x18e0 <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    18b6:	83 fd       	sbrc	r24, 3
    18b8:	15 c0       	rjmp	.+42     	; 0x18e4 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    18ba:	84 fd       	sbrc	r24, 4
    18bc:	15 c0       	rjmp	.+42     	; 0x18e8 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    18be:	85 fd       	sbrc	r24, 5
    18c0:	15 c0       	rjmp	.+42     	; 0x18ec <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    18c2:	86 fd       	sbrc	r24, 6
    18c4:	15 c0       	rjmp	.+42     	; 0x18f0 <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    18c6:	88 23       	and	r24, r24
    18c8:	d4 f4       	brge	.+52     	; 0x18fe <button_interrupt+0x58>
    18ca:	14 c0       	rjmp	.+40     	; 0x18f4 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    18cc:	90 93 06 04 	sts	0x0406, r25
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 c8 05 	sts	0x05C8, r24
    18d6:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    18d8:	95 e0       	ldi	r25, 0x05	; 5
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    18dc:	97 e0       	ldi	r25, 0x07	; 7
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    18e4:	96 e0       	ldi	r25, 0x06	; 6
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    18e8:	92 e0       	ldi	r25, 0x02	; 2
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    18f4:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    18f6:	80 91 c8 05 	lds	r24, 0x05C8
    18fa:	88 23       	and	r24, r24
    18fc:	39 f3       	breq	.-50     	; 0x18cc <button_interrupt+0x26>
    18fe:	08 95       	ret

00001900 <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	0b b6       	in	r0, 0x3b	; 59
    190c:	0f 92       	push	r0
    190e:	2f 93       	push	r18
    1910:	3f 93       	push	r19
    1912:	4f 93       	push	r20
    1914:	5f 93       	push	r21
    1916:	6f 93       	push	r22
    1918:	7f 93       	push	r23
    191a:	8f 93       	push	r24
    191c:	9f 93       	push	r25
    191e:	af 93       	push	r26
    1920:	bf 93       	push	r27
    1922:	ef 93       	push	r30
    1924:	ff 93       	push	r31
cli();	
    1926:	f8 94       	cli
button_interrupt();
    1928:	be df       	rcall	.-132    	; 0x18a6 <button_interrupt>
sei();
    192a:	78 94       	sei
}
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0b be       	out	0x3b, r0	; 59
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    1952:	f8 94       	cli
	if(KEY_VALID){
    1954:	80 91 c8 05 	lds	r24, 0x05C8
    1958:	88 23       	and	r24, r24
    195a:	29 f0       	breq	.+10     	; 0x1966 <getkey+0x14>
		k = KEY;
    195c:	80 91 06 04 	lds	r24, 0x0406
		KEY_VALID = false;
    1960:	10 92 c8 05 	sts	0x05C8, r1
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <getkey+0x16>
		
	}
	else k=KEY_NULL;
    1966:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    1968:	78 94       	sei
	
	return k;
	
	
	
    196a:	08 95       	ret

0000196c <lcd12864_send_byte>:


void lcd12864_write_int(int v){
	char *str="    ";
	itoa(v,str,10);
	lcd12864_write_str(str);
    196c:	98 e0       	ldi	r25, 0x08	; 8
    196e:	1b 98       	cbi	0x03, 3	; 3
    1970:	88 23       	and	r24, r24
    1972:	14 f4       	brge	.+4      	; 0x1978 <lcd12864_send_byte+0xc>
    1974:	1c 9a       	sbi	0x03, 4	; 3
    1976:	01 c0       	rjmp	.+2      	; 0x197a <lcd12864_send_byte+0xe>
    1978:	1c 98       	cbi	0x03, 4	; 3
    197a:	88 0f       	add	r24, r24
    197c:	00 00       	nop
    197e:	00 00       	nop
    1980:	00 00       	nop
    1982:	1b 9a       	sbi	0x03, 3	; 3
    1984:	00 00       	nop
    1986:	00 00       	nop
    1988:	91 50       	subi	r25, 0x01	; 1
    198a:	89 f7       	brne	.-30     	; 0x196e <lcd12864_send_byte+0x2>
    198c:	08 95       	ret

0000198e <lcd12864_wait_busy>:
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	88 3b       	cpi	r24, 0xB8	; 184
    1996:	91 05       	cpc	r25, r1
    1998:	e1 f7       	brne	.-8      	; 0x1992 <lcd12864_wait_busy+0x4>
    199a:	08 95       	ret

0000199c <lcd12864_send_data>:
    199c:	cf 93       	push	r28
    199e:	c8 2f       	mov	r28, r24
    19a0:	1e 9a       	sbi	0x03, 6	; 3
    19a2:	8a ef       	ldi	r24, 0xFA	; 250
    19a4:	e3 df       	rcall	.-58     	; 0x196c <lcd12864_send_byte>
    19a6:	8c 2f       	mov	r24, r28
    19a8:	80 7f       	andi	r24, 0xF0	; 240
    19aa:	e0 df       	rcall	.-64     	; 0x196c <lcd12864_send_byte>
    19ac:	8c 2f       	mov	r24, r28
    19ae:	82 95       	swap	r24
    19b0:	80 7f       	andi	r24, 0xF0	; 240
    19b2:	dc df       	rcall	.-72     	; 0x196c <lcd12864_send_byte>
    19b4:	1e 98       	cbi	0x03, 6	; 3
    19b6:	eb df       	rcall	.-42     	; 0x198e <lcd12864_wait_busy>
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <lcd12864_send_cmd>:
    19bc:	cf 93       	push	r28
    19be:	c8 2f       	mov	r28, r24
    19c0:	1e 9a       	sbi	0x03, 6	; 3
    19c2:	88 ef       	ldi	r24, 0xF8	; 248
    19c4:	d3 df       	rcall	.-90     	; 0x196c <lcd12864_send_byte>
    19c6:	8c 2f       	mov	r24, r28
    19c8:	80 7f       	andi	r24, 0xF0	; 240
    19ca:	d0 df       	rcall	.-96     	; 0x196c <lcd12864_send_byte>
    19cc:	8c 2f       	mov	r24, r28
    19ce:	82 95       	swap	r24
    19d0:	80 7f       	andi	r24, 0xF0	; 240
    19d2:	cc df       	rcall	.-104    	; 0x196c <lcd12864_send_byte>
    19d4:	dc df       	rcall	.-72     	; 0x198e <lcd12864_wait_busy>
    19d6:	1e 98       	cbi	0x03, 6	; 3
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <lcd12864_clear>:
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	ee df       	rcall	.-36     	; 0x19bc <lcd12864_send_cmd>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	81 15       	cp	r24, r1
    19e8:	20 e3       	ldi	r18, 0x30	; 48
    19ea:	92 07       	cpc	r25, r18
    19ec:	d9 f7       	brne	.-10     	; 0x19e4 <lcd12864_clear+0x8>
    19ee:	08 95       	ret

000019f0 <lcd12864_set_pos>:
    19f0:	62 30       	cpi	r22, 0x02	; 2
    19f2:	89 f0       	breq	.+34     	; 0x1a16 <lcd12864_set_pos+0x26>
    19f4:	18 f4       	brcc	.+6      	; 0x19fc <lcd12864_set_pos+0xc>
    19f6:	61 30       	cpi	r22, 0x01	; 1
    19f8:	31 f0       	breq	.+12     	; 0x1a06 <lcd12864_set_pos+0x16>
    19fa:	0b c0       	rjmp	.+22     	; 0x1a12 <lcd12864_set_pos+0x22>
    19fc:	63 30       	cpi	r22, 0x03	; 3
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <lcd12864_set_pos+0x1a>
    1a00:	64 30       	cpi	r22, 0x04	; 4
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <lcd12864_set_pos+0x1e>
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <lcd12864_set_pos+0x22>
    1a06:	90 e8       	ldi	r25, 0x80	; 128
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <lcd12864_set_pos+0x28>
    1a0a:	98 e8       	ldi	r25, 0x88	; 136
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <lcd12864_set_pos+0x28>
    1a0e:	98 e9       	ldi	r25, 0x98	; 152
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <lcd12864_set_pos+0x28>
    1a12:	98 e9       	ldi	r25, 0x98	; 152
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <lcd12864_set_pos+0x28>
    1a16:	90 e9       	ldi	r25, 0x90	; 144
    1a18:	81 31       	cpi	r24, 0x11	; 17
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <lcd12864_set_pos+0x30>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	ce cf       	rjmp	.-100    	; 0x19bc <lcd12864_send_cmd>
    1a20:	08 95       	ret

00001a22 <lcd12864_write_char>:
    1a22:	bc cf       	rjmp	.-136    	; 0x199c <lcd12864_send_data>
    1a24:	08 95       	ret

00001a26 <lcd12864_write_str>:
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	88 81       	ld	r24, Y
    1a30:	88 23       	and	r24, r24
    1a32:	49 f0       	breq	.+18     	; 0x1a46 <lcd12864_write_str+0x20>
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	b2 df       	rcall	.-156    	; 0x199c <lcd12864_send_data>
    1a38:	1f 5f       	subi	r17, 0xFF	; 255
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 0f       	add	r30, r17
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	80 81       	ld	r24, Z
    1a42:	81 11       	cpse	r24, r1
    1a44:	f8 cf       	rjmp	.-16     	; 0x1a36 <lcd12864_write_str+0x10>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	08 95       	ret

00001a4e <lcd12864_write_float>:
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	4b 01       	movw	r8, r22
    1a60:	5c 01       	movw	r10, r24
    1a62:	73 d3       	rcall	.+1766   	; 0x214a <__fixsfsi>
    1a64:	6b 01       	movw	r12, r22
    1a66:	7c 01       	movw	r14, r24
    1a68:	4a e0       	ldi	r20, 0x0A	; 10
    1a6a:	6d ea       	ldi	r22, 0xAD	; 173
    1a6c:	75 e0       	ldi	r23, 0x05	; 5
    1a6e:	c6 01       	movw	r24, r12
    1a70:	a3 d4       	rcall	.+2374   	; 0x23b8 <__itoa_ncheck>
    1a72:	8d ea       	ldi	r24, 0xAD	; 173
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	d7 df       	rcall	.-82     	; 0x1a26 <lcd12864_write_str>
    1a78:	8e e2       	ldi	r24, 0x2E	; 46
    1a7a:	90 df       	rcall	.-224    	; 0x199c <lcd12864_send_data>
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	88 27       	eor	r24, r24
    1a80:	77 fd       	sbrc	r23, 7
    1a82:	80 95       	com	r24
    1a84:	98 2f       	mov	r25, r24
    1a86:	94 d3       	rcall	.+1832   	; 0x21b0 <__floatsisf>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	c5 01       	movw	r24, r10
    1a8e:	b4 01       	movw	r22, r8
    1a90:	8f d2       	rcall	.+1310   	; 0x1fb0 <__subsf3>
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	48 ec       	ldi	r20, 0xC8	; 200
    1a98:	52 e4       	ldi	r21, 0x42	; 66
    1a9a:	16 d4       	rcall	.+2092   	; 0x22c8 <__mulsf3>
    1a9c:	56 d3       	rcall	.+1708   	; 0x214a <__fixsfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	4a e0       	ldi	r20, 0x0A	; 10
    1aa4:	6d ea       	ldi	r22, 0xAD	; 173
    1aa6:	75 e0       	ldi	r23, 0x05	; 5
    1aa8:	87 d4       	rcall	.+2318   	; 0x23b8 <__itoa_ncheck>
    1aaa:	8d ea       	ldi	r24, 0xAD	; 173
    1aac:	95 e0       	ldi	r25, 0x05	; 5
    1aae:	bb df       	rcall	.-138    	; 0x1a26 <lcd12864_write_str>
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	9f 90       	pop	r9
    1abe:	8f 90       	pop	r8
    1ac0:	08 95       	ret

00001ac2 <lcd12864_SetWhite>:
}



void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	d8 2f       	mov	r29, r24
    1ad2:	14 2f       	mov	r17, r20
    1ad4:	65 30       	cpi	r22, 0x05	; 5
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <lcd12864_SetWhite+0x18>
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
    1ada:	66 23       	and	r22, r22
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <lcd12864_SetWhite+0x1e>
    1ade:	b6 c0       	rjmp	.+364    	; 0x1c4c <lcd12864_SetWhite+0x18a>
	uint8_t block;
	if(clear) block=0x00; 
    1ae0:	c1 e0       	ldi	r28, 0x01	; 1
    1ae2:	21 11       	cpse	r18, r1
    1ae4:	c0 e0       	ldi	r28, 0x00	; 0
    1ae6:	c1 95       	neg	r28
	else block = 0xff;
	
	switch(y){
    1ae8:	62 30       	cpi	r22, 0x02	; 2
    1aea:	99 f0       	breq	.+38     	; 0x1b12 <lcd12864_SetWhite+0x50>
    1aec:	18 f4       	brcc	.+6      	; 0x1af4 <lcd12864_SetWhite+0x32>
    1aee:	61 30       	cpi	r22, 0x01	; 1
    1af0:	91 f5       	brne	.+100    	; 0x1b56 <lcd12864_SetWhite+0x94>
    1af2:	05 c0       	rjmp	.+10     	; 0x1afe <lcd12864_SetWhite+0x3c>
    1af4:	63 30       	cpi	r22, 0x03	; 3
    1af6:	c1 f0       	breq	.+48     	; 0x1b28 <lcd12864_SetWhite+0x66>
    1af8:	64 30       	cpi	r22, 0x04	; 4
    1afa:	09 f1       	breq	.+66     	; 0x1b3e <lcd12864_SetWhite+0x7c>
    1afc:	2c c0       	rjmp	.+88     	; 0x1b56 <lcd12864_SetWhite+0x94>
		case 1:
			start_x = 0x80+x/2;
    1afe:	8d 2f       	mov	r24, r29
    1b00:	86 95       	lsr	r24
    1b02:	68 94       	set
    1b04:	ff 24       	eor	r15, r15
    1b06:	f7 f8       	bld	r15, 7
    1b08:	f8 0e       	add	r15, r24
			start_y = 0x80;
    1b0a:	68 94       	set
    1b0c:	ee 24       	eor	r14, r14
    1b0e:	e7 f8       	bld	r14, 7
			break;
    1b10:	24 c0       	rjmp	.+72     	; 0x1b5a <lcd12864_SetWhite+0x98>
		case 2:
			start_x = 0x80+x/2;
    1b12:	8d 2f       	mov	r24, r29
    1b14:	86 95       	lsr	r24
    1b16:	68 94       	set
    1b18:	ff 24       	eor	r15, r15
    1b1a:	f7 f8       	bld	r15, 7
    1b1c:	f8 0e       	add	r15, r24
			start_y=0x90;
    1b1e:	0f 2e       	mov	r0, r31
    1b20:	f0 e9       	ldi	r31, 0x90	; 144
    1b22:	ef 2e       	mov	r14, r31
    1b24:	f0 2d       	mov	r31, r0
			break;
    1b26:	19 c0       	rjmp	.+50     	; 0x1b5a <lcd12864_SetWhite+0x98>
		case 3:
			start_x = 0x88+x/2;
    1b28:	8d 2f       	mov	r24, r29
    1b2a:	86 95       	lsr	r24
    1b2c:	0f 2e       	mov	r0, r31
    1b2e:	f8 e8       	ldi	r31, 0x88	; 136
    1b30:	ff 2e       	mov	r15, r31
    1b32:	f0 2d       	mov	r31, r0
    1b34:	f8 0e       	add	r15, r24
			start_y = 0x80;
    1b36:	68 94       	set
    1b38:	ee 24       	eor	r14, r14
    1b3a:	e7 f8       	bld	r14, 7
			break;
    1b3c:	0e c0       	rjmp	.+28     	; 0x1b5a <lcd12864_SetWhite+0x98>
		case 4:
			start_x = 0x88+x/2;
    1b3e:	8d 2f       	mov	r24, r29
    1b40:	86 95       	lsr	r24
    1b42:	0f 2e       	mov	r0, r31
    1b44:	f8 e8       	ldi	r31, 0x88	; 136
    1b46:	ff 2e       	mov	r15, r31
    1b48:	f0 2d       	mov	r31, r0
    1b4a:	f8 0e       	add	r15, r24
			start_y = 0x90;
    1b4c:	0f 2e       	mov	r0, r31
    1b4e:	f0 e9       	ldi	r31, 0x90	; 144
    1b50:	ef 2e       	mov	r14, r31
    1b52:	f0 2d       	mov	r31, r0
			break;
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <lcd12864_SetWhite+0x98>


void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
    1b56:	e1 2c       	mov	r14, r1
    1b58:	f1 2c       	mov	r15, r1
			break;
		default:
			break;
	}
	
	lcd12864_send_cmd(0x34);
    1b5a:	84 e3       	ldi	r24, 0x34	; 52
    1b5c:	2f df       	rcall	.-418    	; 0x19bc <lcd12864_send_cmd>
	
	if(x%2==0 && width%2==0){
    1b5e:	8d 2f       	mov	r24, r29
    1b60:	81 70       	andi	r24, 0x01	; 1
    1b62:	91 2f       	mov	r25, r17
    1b64:	91 70       	andi	r25, 0x01	; 1
    1b66:	d1 2b       	or	r29, r17
    1b68:	d0 fd       	sbrc	r29, 0
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <lcd12864_SetWhite+0xd6>
		real_width = width/2;
    1b6c:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1b6e:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1b70:	d1 2c       	mov	r13, r1
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    1b72:	80 2f       	mov	r24, r16
    1b74:	8e 0d       	add	r24, r14
    1b76:	22 df       	rcall	.-444    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1b78:	8f 2d       	mov	r24, r15
    1b7a:	20 df       	rcall	.-448    	; 0x19bc <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    1b7c:	11 23       	and	r17, r17
    1b7e:	41 f0       	breq	.+16     	; 0x1b90 <lcd12864_SetWhite+0xce>
    1b80:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    1b82:	8c 2f       	mov	r24, r28
    1b84:	0b df       	rcall	.-490    	; 0x199c <lcd12864_send_data>
				lcd12864_send_data(block);
    1b86:	8c 2f       	mov	r24, r28
    1b88:	09 df       	rcall	.-494    	; 0x199c <lcd12864_send_data>
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1b8a:	df 5f       	subi	r29, 0xFF	; 255
    1b8c:	d1 13       	cpse	r29, r17
    1b8e:	f9 cf       	rjmp	.-14     	; 0x1b82 <lcd12864_SetWhite+0xc0>
	
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
    1b90:	0f 5f       	subi	r16, 0xFF	; 255
    1b92:	00 31       	cpi	r16, 0x10	; 16
    1b94:	71 f7       	brne	.-36     	; 0x1b72 <lcd12864_SetWhite+0xb0>
    1b96:	57 c0       	rjmp	.+174    	; 0x1c46 <lcd12864_SetWhite+0x184>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
		}
	}
	else if(x%2==0 && width%2!=0){
    1b98:	81 11       	cpse	r24, r1
    1b9a:	1d c0       	rjmp	.+58     	; 0x1bd6 <lcd12864_SetWhite+0x114>
    1b9c:	99 23       	and	r25, r25
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <lcd12864_SetWhite+0xe0>
    1ba0:	52 c0       	rjmp	.+164    	; 0x1c46 <lcd12864_SetWhite+0x184>
		real_width = width/2;
    1ba2:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1ba4:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1ba6:	d1 2c       	mov	r13, r1
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    1ba8:	80 2f       	mov	r24, r16
    1baa:	8e 0d       	add	r24, r14
    1bac:	07 df       	rcall	.-498    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1bae:	8f 2d       	mov	r24, r15
    1bb0:	05 df       	rcall	.-502    	; 0x19bc <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    1bb2:	11 23       	and	r17, r17
    1bb4:	41 f0       	breq	.+16     	; 0x1bc6 <lcd12864_SetWhite+0x104>
    1bb6:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    1bb8:	8c 2f       	mov	r24, r28
    1bba:	f0 de       	rcall	.-544    	; 0x199c <lcd12864_send_data>
				lcd12864_send_data(block);
    1bbc:	8c 2f       	mov	r24, r28
    1bbe:	ee de       	rcall	.-548    	; 0x199c <lcd12864_send_data>
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    1bc0:	df 5f       	subi	r29, 0xFF	; 255
    1bc2:	d1 13       	cpse	r29, r17
    1bc4:	f9 cf       	rjmp	.-14     	; 0x1bb8 <lcd12864_SetWhite+0xf6>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	e9 de       	rcall	.-558    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1bca:	8d 2d       	mov	r24, r13
    1bcc:	e7 de       	rcall	.-562    	; 0x199c <lcd12864_send_data>
			}
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    1bce:	0f 5f       	subi	r16, 0xFF	; 255
    1bd0:	00 31       	cpi	r16, 0x10	; 16
    1bd2:	51 f7       	brne	.-44     	; 0x1ba8 <lcd12864_SetWhite+0xe6>
    1bd4:	38 c0       	rjmp	.+112    	; 0x1c46 <lcd12864_SetWhite+0x184>
			}
			lcd12864_send_data(block);
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
    1bd6:	91 11       	cpse	r25, r1
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <lcd12864_SetWhite+0x154>
		real_width = width/2-1;
    1bda:	16 95       	lsr	r17
    1bdc:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<16;i++){
    1bde:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    1be0:	80 2f       	mov	r24, r16
    1be2:	8e 0d       	add	r24, r14
    1be4:	eb de       	rcall	.-554    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1be6:	8f 2d       	mov	r24, r15
    1be8:	e9 de       	rcall	.-558    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	d7 de       	rcall	.-594    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(block);
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	d5 de       	rcall	.-598    	; 0x199c <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    1bf2:	11 23       	and	r17, r17
    1bf4:	41 f0       	breq	.+16     	; 0x1c06 <lcd12864_SetWhite+0x144>
    1bf6:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    1bf8:	8c 2f       	mov	r24, r28
    1bfa:	d0 de       	rcall	.-608    	; 0x199c <lcd12864_send_data>
				lcd12864_send_data(block);
    1bfc:	8c 2f       	mov	r24, r28
    1bfe:	ce de       	rcall	.-612    	; 0x199c <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    1c00:	df 5f       	subi	r29, 0xFF	; 255
    1c02:	1d 13       	cpse	r17, r29
    1c04:	f9 cf       	rjmp	.-14     	; 0x1bf8 <lcd12864_SetWhite+0x136>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    1c06:	8c 2f       	mov	r24, r28
    1c08:	c9 de       	rcall	.-622    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	c7 de       	rcall	.-626    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
		real_width = width/2-1;
		for(i=0;i<16;i++){
    1c0e:	0f 5f       	subi	r16, 0xFF	; 255
    1c10:	00 31       	cpi	r16, 0x10	; 16
    1c12:	31 f7       	brne	.-52     	; 0x1be0 <lcd12864_SetWhite+0x11e>
    1c14:	18 c0       	rjmp	.+48     	; 0x1c46 <lcd12864_SetWhite+0x184>
			lcd12864_send_data(0x00);
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
    1c16:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1c18:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    1c1a:	80 2f       	mov	r24, r16
    1c1c:	8e 0d       	add	r24, r14
    1c1e:	ce de       	rcall	.-612    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1c20:	8f 2d       	mov	r24, r15
    1c22:	cc de       	rcall	.-616    	; 0x19bc <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	ba de       	rcall	.-652    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(block);
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	b8 de       	rcall	.-656    	; 0x199c <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    1c2c:	11 23       	and	r17, r17
    1c2e:	41 f0       	breq	.+16     	; 0x1c40 <lcd12864_SetWhite+0x17e>
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    1c32:	8c 2f       	mov	r24, r28
    1c34:	b3 de       	rcall	.-666    	; 0x199c <lcd12864_send_data>
				lcd12864_send_data(block);
    1c36:	8c 2f       	mov	r24, r28
    1c38:	b1 de       	rcall	.-670    	; 0x199c <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    1c3a:	df 5f       	subi	r29, 0xFF	; 255
    1c3c:	d1 13       	cpse	r29, r17
    1c3e:	f9 cf       	rjmp	.-14     	; 0x1c32 <lcd12864_SetWhite+0x170>
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    1c40:	0f 5f       	subi	r16, 0xFF	; 255
    1c42:	00 31       	cpi	r16, 0x10	; 16
    1c44:	51 f7       	brne	.-44     	; 0x1c1a <lcd12864_SetWhite+0x158>
			}
			
		}
	}
	
	lcd12864_send_cmd(0x30);		
    1c46:	80 e3       	ldi	r24, 0x30	; 48
    1c48:	b9 de       	rcall	.-654    	; 0x19bc <lcd12864_send_cmd>
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <lcd12864_SetWhite+0x194>
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
	uint8_t block;
	if(clear) block=0x00; 
    1c4c:	c1 e0       	ldi	r28, 0x01	; 1
    1c4e:	21 11       	cpse	r18, r1
    1c50:	c0 e0       	ldi	r28, 0x00	; 0
    1c52:	c1 95       	neg	r28
    1c54:	54 cf       	rjmp	.-344    	; 0x1afe <lcd12864_SetWhite+0x3c>
			
		}
	}
	
	lcd12864_send_cmd(0x30);		
}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	08 95       	ret

00001c66 <lcd12864_clrGDRAM>:

void lcd12864_clrGDRAM(void){
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
    1c6c:	84 e3       	ldi	r24, 0x34	; 52
    1c6e:	a6 de       	rcall	.-692    	; 0x19bc <lcd12864_send_cmd>
    1c70:	d0 e8       	ldi	r29, 0x80	; 128
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
    1c72:	10 e1       	ldi	r17, 0x10	; 16

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    1c74:	8d 2f       	mov	r24, r29
    1c76:	a2 de       	rcall	.-700    	; 0x19bc <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    1c78:	80 e8       	ldi	r24, 0x80	; 128
    1c7a:	a0 de       	rcall	.-704    	; 0x19bc <lcd12864_send_cmd>
    1c7c:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	8d de       	rcall	.-742    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	8b de       	rcall	.-746    	; 0x199c <lcd12864_send_data>
    1c86:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    1c88:	d1 f7       	brne	.-12     	; 0x1c7e <lcd12864_clrGDRAM+0x18>
    1c8a:	df 5f       	subi	r29, 0xFF	; 255
}

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
    1c8c:	d0 39       	cpi	r29, 0x90	; 144
    1c8e:	91 f7       	brne	.-28     	; 0x1c74 <lcd12864_clrGDRAM+0xe>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
    1c90:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    1c92:	8d 2f       	mov	r24, r29
    1c94:	93 de       	rcall	.-730    	; 0x19bc <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    1c96:	80 e8       	ldi	r24, 0x80	; 128
    1c98:	91 de       	rcall	.-734    	; 0x19bc <lcd12864_send_cmd>
    1c9a:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	7e de       	rcall	.-772    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	7c de       	rcall	.-776    	; 0x199c <lcd12864_send_data>
    1ca4:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    1ca6:	d1 f7       	brne	.-12     	; 0x1c9c <lcd12864_clrGDRAM+0x36>
    1ca8:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    1caa:	d0 3a       	cpi	r29, 0xA0	; 160
    1cac:	91 f7       	brne	.-28     	; 0x1c92 <lcd12864_clrGDRAM+0x2c>
    1cae:	d0 e8       	ldi	r29, 0x80	; 128
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
    1cb0:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    1cb2:	8d 2f       	mov	r24, r29
    1cb4:	83 de       	rcall	.-762    	; 0x19bc <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    1cb6:	88 e8       	ldi	r24, 0x88	; 136
    1cb8:	81 de       	rcall	.-766    	; 0x19bc <lcd12864_send_cmd>
    1cba:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	6e de       	rcall	.-804    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	6c de       	rcall	.-808    	; 0x199c <lcd12864_send_data>
    1cc4:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    1cc6:	d1 f7       	brne	.-12     	; 0x1cbc <lcd12864_clrGDRAM+0x56>
    1cc8:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    1cca:	d0 39       	cpi	r29, 0x90	; 144
    1ccc:	91 f7       	brne	.-28     	; 0x1cb2 <lcd12864_clrGDRAM+0x4c>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
    1cce:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    1cd0:	8d 2f       	mov	r24, r29
    1cd2:	74 de       	rcall	.-792    	; 0x19bc <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    1cd4:	88 e8       	ldi	r24, 0x88	; 136
    1cd6:	72 de       	rcall	.-796    	; 0x19bc <lcd12864_send_cmd>
    1cd8:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	5f de       	rcall	.-834    	; 0x199c <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	5d de       	rcall	.-838    	; 0x199c <lcd12864_send_data>
    1ce2:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    1ce4:	d1 f7       	brne	.-12     	; 0x1cda <lcd12864_clrGDRAM+0x74>
    1ce6:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    1ce8:	d0 3a       	cpi	r29, 0xA0	; 160
    1cea:	91 f7       	brne	.-28     	; 0x1cd0 <lcd12864_clrGDRAM+0x6a>
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	
	lcd12864_send_cmd(0x30);
    1cec:	80 e3       	ldi	r24, 0x30	; 48
    1cee:	66 de       	rcall	.-820    	; 0x19bc <lcd12864_send_cmd>
}
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	08 95       	ret

00001cf8 <lcd12864_init>:
#include <stdlib.h>
#define DELAY 150


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
    1cf8:	82 b1       	in	r24, 0x02	; 2
    1cfa:	88 6f       	ori	r24, 0xF8	; 248
    1cfc:	82 b9       	out	0x02, r24	; 2
	LCD12864_RESET_0;
    1cfe:	1d 98       	cbi	0x03, 5	; 3
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	81 15       	cp	r24, r1
    1d08:	20 ef       	ldi	r18, 0xF0	; 240
    1d0a:	92 07       	cpc	r25, r18
    1d0c:	d9 f7       	brne	.-10     	; 0x1d04 <lcd12864_init+0xc>
	delay_ms(50);
	LCD12864_RESET;
    1d0e:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
    1d10:	1f 98       	cbi	0x03, 7	; 3
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	81 15       	cp	r24, r1
    1d1a:	20 e3       	ldi	r18, 0x30	; 48
    1d1c:	92 07       	cpc	r25, r18
    1d1e:	d9 f7       	brne	.-10     	; 0x1d16 <lcd12864_init+0x1e>
	delay_ms(10);
	lcd12864_send_cmd(0x30);
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	4c de       	rcall	.-872    	; 0x19bc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1d24:	8c e0       	ldi	r24, 0x0C	; 12
    1d26:	4a de       	rcall	.-876    	; 0x19bc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x01);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	48 de       	rcall	.-880    	; 0x19bc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x02);
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	46 de       	rcall	.-884    	; 0x19bc <lcd12864_send_cmd>

	lcd12864_send_cmd(0x80);
    1d30:	80 e8       	ldi	r24, 0x80	; 128
    1d32:	44 de       	rcall	.-888    	; 0x19bc <lcd12864_send_cmd>

	lcd12864_send_cmd(0x04);
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	42 de       	rcall	.-892    	; 0x19bc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1d38:	8c e0       	ldi	r24, 0x0C	; 12
    1d3a:	40 de       	rcall	.-896    	; 0x19bc <lcd12864_send_cmd>
	lcd12864_clrGDRAM();
    1d3c:	94 cf       	rjmp	.-216    	; 0x1c66 <lcd12864_clrGDRAM>
    1d3e:	08 95       	ret

00001d40 <lcd12864_Focus>:
	
	lcd12864_send_cmd(0x30);
}


void lcd12864_Focus(uint8_t menu, uint8_t index, uint8_t white){
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	c8 2f       	mov	r28, r24
    1d48:	16 2f       	mov	r17, r22
    1d4a:	d4 2f       	mov	r29, r20
	static uint8_t o_menu=0xff,o_white=0xff;
	if(menu != o_menu){
    1d4c:	80 91 08 04 	lds	r24, 0x0408
    1d50:	c8 17       	cp	r28, r24
    1d52:	31 f1       	breq	.+76     	; 0x1da0 <lcd12864_Focus+0x60>
	switch(menu){
    1d54:	cc 23       	and	r28, r28
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <lcd12864_Focus+0x1e>
    1d58:	c1 30       	cpi	r28, 0x01	; 1
    1d5a:	89 f0       	breq	.+34     	; 0x1d7e <lcd12864_Focus+0x3e>
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <lcd12864_Focus+0x5c>
		case 0:
			lcd12864_SetWhite(0,4,4,0);
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	44 e0       	ldi	r20, 0x04	; 4
    1d62:	64 e0       	ldi	r22, 0x04	; 4
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	ad de       	rcall	.-678    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(6,4,4,0);
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	44 e0       	ldi	r20, 0x04	; 4
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	86 e0       	ldi	r24, 0x06	; 6
    1d70:	a8 de       	rcall	.-688    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,4,4,0);
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	44 e0       	ldi	r20, 0x04	; 4
    1d76:	64 e0       	ldi	r22, 0x04	; 4
    1d78:	8c e0       	ldi	r24, 0x0C	; 12
    1d7a:	a3 de       	rcall	.-698    	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <lcd12864_Focus+0x5c>
		case 1:
			lcd12864_SetWhite(0,4,4,0);
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	44 e0       	ldi	r20, 0x04	; 4
    1d82:	64 e0       	ldi	r22, 0x04	; 4
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	9d de       	rcall	.-710    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(6,4,4,1);
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	44 e0       	ldi	r20, 0x04	; 4
    1d8c:	64 e0       	ldi	r22, 0x04	; 4
    1d8e:	86 e0       	ldi	r24, 0x06	; 6
    1d90:	98 de       	rcall	.-720    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,4,4,1);
    1d92:	21 e0       	ldi	r18, 0x01	; 1
    1d94:	44 e0       	ldi	r20, 0x04	; 4
    1d96:	64 e0       	ldi	r22, 0x04	; 4
    1d98:	8c e0       	ldi	r24, 0x0C	; 12
    1d9a:	93 de       	rcall	.-730    	; 0x1ac2 <lcd12864_SetWhite>
			break;
		default:
			break;	
	}
	o_menu = menu;
    1d9c:	c0 93 08 04 	sts	0x0408, r28
	}
	
	switch(index){
    1da0:	12 30       	cpi	r17, 0x02	; 2
    1da2:	51 f0       	breq	.+20     	; 0x1db8 <lcd12864_Focus+0x78>
    1da4:	13 30       	cpi	r17, 0x03	; 3
    1da6:	71 f0       	breq	.+28     	; 0x1dc4 <lcd12864_Focus+0x84>
    1da8:	11 30       	cpi	r17, 0x01	; 1
    1daa:	89 f4       	brne	.+34     	; 0x1dce <lcd12864_Focus+0x8e>
			case 1:
				lcd12864_set_pos(0,1); 
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	1f de       	rcall	.-962    	; 0x19f0 <lcd12864_set_pos>
	
}

void lcd12864_write_char(char data){

		lcd12864_send_data(data);
    1db2:	8a e2       	ldi	r24, 0x2A	; 42
    1db4:	f3 dd       	rcall	.-1050   	; 0x199c <lcd12864_send_data>
    1db6:	0b c0       	rjmp	.+22     	; 0x1dce <lcd12864_Focus+0x8e>
			case 1:
				lcd12864_set_pos(0,1); 
				lcd12864_write_char('*');
				break;
			case 2:
				lcd12864_set_pos(0,2);
    1db8:	62 e0       	ldi	r22, 0x02	; 2
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	19 de       	rcall	.-974    	; 0x19f0 <lcd12864_set_pos>
	
}

void lcd12864_write_char(char data){

		lcd12864_send_data(data);
    1dbe:	8a e2       	ldi	r24, 0x2A	; 42
    1dc0:	ed dd       	rcall	.-1062   	; 0x199c <lcd12864_send_data>
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <lcd12864_Focus+0x8e>
			case 2:
				lcd12864_set_pos(0,2);
				lcd12864_write_char('*');
				break;
			case 3:
				lcd12864_set_pos(0,3);
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	13 de       	rcall	.-986    	; 0x19f0 <lcd12864_set_pos>
	
}

void lcd12864_write_char(char data){

		lcd12864_send_data(data);
    1dca:	8a e2       	ldi	r24, 0x2A	; 42
    1dcc:	e7 dd       	rcall	.-1074   	; 0x199c <lcd12864_send_data>
				break;
			default:
			break;
	}
	
	if(o_white != white){
    1dce:	80 91 07 04 	lds	r24, 0x0407
    1dd2:	8d 17       	cp	r24, r29
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <lcd12864_Focus+0x98>
    1dd6:	e4 c0       	rjmp	.+456    	; 0x1fa0 <lcd12864_Focus+0x260>
	switch(white){
    1dd8:	8d 2f       	mov	r24, r29
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	87 30       	cpi	r24, 0x07	; 7
    1dde:	91 05       	cpc	r25, r1
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <lcd12864_Focus+0xa4>
    1de2:	dc c0       	rjmp	.+440    	; 0x1f9c <lcd12864_Focus+0x25c>
    1de4:	fc 01       	movw	r30, r24
    1de6:	ea 5b       	subi	r30, 0xBA	; 186
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	d1 c2       	rjmp	.+1442   	; 0x238e <__tablejump2__>
		case 0:
			lcd12864_SetWhite(12,2,1,1);
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	8c e0       	ldi	r24, 0x0C	; 12
    1df4:	66 de       	rcall	.-820    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,1);
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	8a e0       	ldi	r24, 0x0A	; 10
    1dfe:	61 de       	rcall	.-830    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,1);
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	63 e0       	ldi	r22, 0x03	; 3
    1e06:	8d e0       	ldi	r24, 0x0D	; 13
    1e08:	5c de       	rcall	.-840    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,1);
    1e0a:	21 e0       	ldi	r18, 0x01	; 1
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	8c e0       	ldi	r24, 0x0C	; 12
    1e12:	57 de       	rcall	.-850    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,1);
    1e14:	21 e0       	ldi	r18, 0x01	; 1
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	63 e0       	ldi	r22, 0x03	; 3
    1e1a:	8a e0       	ldi	r24, 0x0A	; 10
    1e1c:	52 de       	rcall	.-860    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,2,1,1);
    1e1e:	21 e0       	ldi	r18, 0x01	; 1
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	8d e0       	ldi	r24, 0x0D	; 13
    1e26:	4d de       	rcall	.-870    	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1e28:	b9 c0       	rjmp	.+370    	; 0x1f9c <lcd12864_Focus+0x25c>

		case 1:
			lcd12864_SetWhite(12,2,1,1);
    1e2a:	21 e0       	ldi	r18, 0x01	; 1
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	8c e0       	ldi	r24, 0x0C	; 12
    1e32:	47 de       	rcall	.-882    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,1);
    1e34:	21 e0       	ldi	r18, 0x01	; 1
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	62 e0       	ldi	r22, 0x02	; 2
    1e3a:	8a e0       	ldi	r24, 0x0A	; 10
    1e3c:	42 de       	rcall	.-892    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,1);
    1e3e:	21 e0       	ldi	r18, 0x01	; 1
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	8d e0       	ldi	r24, 0x0D	; 13
    1e46:	3d de       	rcall	.-902    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,1);
    1e48:	21 e0       	ldi	r18, 0x01	; 1
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	8c e0       	ldi	r24, 0x0C	; 12
    1e50:	38 de       	rcall	.-912    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,1);
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	33 de       	rcall	.-922    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,2,1,0);
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	62 e0       	ldi	r22, 0x02	; 2
    1e62:	8d e0       	ldi	r24, 0x0D	; 13
    1e64:	2e de       	rcall	.-932    	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1e66:	9a c0       	rjmp	.+308    	; 0x1f9c <lcd12864_Focus+0x25c>

			break;
		case 2:
			lcd12864_SetWhite(13,2,1,1);
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	8d e0       	ldi	r24, 0x0D	; 13
    1e70:	28 de       	rcall	.-944    	; 0x1ac2 <lcd12864_SetWhite>

			lcd12864_SetWhite(10,2,1,1);
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	8a e0       	ldi	r24, 0x0A	; 10
    1e7a:	23 de       	rcall	.-954    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,1);
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	8d e0       	ldi	r24, 0x0D	; 13
    1e84:	1e de       	rcall	.-964    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,1);
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	63 e0       	ldi	r22, 0x03	; 3
    1e8c:	8c e0       	ldi	r24, 0x0C	; 12
    1e8e:	19 de       	rcall	.-974    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,1);
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	63 e0       	ldi	r22, 0x03	; 3
    1e96:	8a e0       	ldi	r24, 0x0A	; 10
    1e98:	14 de       	rcall	.-984    	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,2,1,0);
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
    1ea0:	8c e0       	ldi	r24, 0x0C	; 12
    1ea2:	0f de       	rcall	.-994    	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1ea4:	7b c0       	rjmp	.+246    	; 0x1f9c <lcd12864_Focus+0x25c>
		case 3:
			lcd12864_SetWhite(13,2,1,1);
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	8d e0       	ldi	r24, 0x0D	; 13
    1eae:	09 de       	rcall	.-1006   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,2,1,1);
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	8c e0       	ldi	r24, 0x0C	; 12
    1eb8:	04 de       	rcall	.-1016   	; 0x1ac2 <lcd12864_SetWhite>

			lcd12864_SetWhite(13,3,1,1);
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	8d e0       	ldi	r24, 0x0D	; 13
    1ec2:	ff dd       	rcall	.-1026   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,1);
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	63 e0       	ldi	r22, 0x03	; 3
    1eca:	8c e0       	ldi	r24, 0x0C	; 12
    1ecc:	fa dd       	rcall	.-1036   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,1);
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	63 e0       	ldi	r22, 0x03	; 3
    1ed4:	8a e0       	ldi	r24, 0x0A	; 10
    1ed6:	f5 dd       	rcall	.-1046   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,0);
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	62 e0       	ldi	r22, 0x02	; 2
    1ede:	8a e0       	ldi	r24, 0x0A	; 10
    1ee0:	f0 dd       	rcall	.-1056   	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1ee2:	5c c0       	rjmp	.+184    	; 0x1f9c <lcd12864_Focus+0x25c>
		case 4:
			lcd12864_SetWhite(13,2,1,1);
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	ea dd       	rcall	.-1068   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,2,1,1);
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	8c e0       	ldi	r24, 0x0C	; 12
    1ef6:	e5 dd       	rcall	.-1078   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,1);
    1ef8:	21 e0       	ldi	r18, 0x01	; 1
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	8a e0       	ldi	r24, 0x0A	; 10
    1f00:	e0 dd       	rcall	.-1088   	; 0x1ac2 <lcd12864_SetWhite>

			lcd12864_SetWhite(12,3,1,1);
    1f02:	21 e0       	ldi	r18, 0x01	; 1
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	8c e0       	ldi	r24, 0x0C	; 12
    1f0a:	db dd       	rcall	.-1098   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,1);
    1f0c:	21 e0       	ldi	r18, 0x01	; 1
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	63 e0       	ldi	r22, 0x03	; 3
    1f12:	8a e0       	ldi	r24, 0x0A	; 10
    1f14:	d6 dd       	rcall	.-1108   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,0);
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	41 e0       	ldi	r20, 0x01	; 1
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	8d e0       	ldi	r24, 0x0D	; 13
    1f1e:	d1 dd       	rcall	.-1118   	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1f20:	3d c0       	rjmp	.+122    	; 0x1f9c <lcd12864_Focus+0x25c>
		case 5:
			lcd12864_SetWhite(13,2,1,1);
    1f22:	21 e0       	ldi	r18, 0x01	; 1
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	8d e0       	ldi	r24, 0x0D	; 13
    1f2a:	cb dd       	rcall	.-1130   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,2,1,1);
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	8c e0       	ldi	r24, 0x0C	; 12
    1f34:	c6 dd       	rcall	.-1140   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,1);
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	8a e0       	ldi	r24, 0x0A	; 10
    1f3e:	c1 dd       	rcall	.-1150   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,1);
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	8d e0       	ldi	r24, 0x0D	; 13
    1f48:	bc dd       	rcall	.-1160   	; 0x1ac2 <lcd12864_SetWhite>
			
			lcd12864_SetWhite(10,3,1,1);
    1f4a:	21 e0       	ldi	r18, 0x01	; 1
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	8a e0       	ldi	r24, 0x0A	; 10
    1f52:	b7 dd       	rcall	.-1170   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,0);
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	63 e0       	ldi	r22, 0x03	; 3
    1f5a:	8c e0       	ldi	r24, 0x0C	; 12
    1f5c:	b2 dd       	rcall	.-1180   	; 0x1ac2 <lcd12864_SetWhite>
			break;
    1f5e:	1e c0       	rjmp	.+60     	; 0x1f9c <lcd12864_Focus+0x25c>
		case 6:
			lcd12864_SetWhite(13,2,1,1);
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	62 e0       	ldi	r22, 0x02	; 2
    1f66:	8d e0       	ldi	r24, 0x0D	; 13
    1f68:	ac dd       	rcall	.-1192   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,2,1,1);
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	62 e0       	ldi	r22, 0x02	; 2
    1f70:	8c e0       	ldi	r24, 0x0C	; 12
    1f72:	a7 dd       	rcall	.-1202   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,2,1,1);
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	8a e0       	ldi	r24, 0x0A	; 10
    1f7c:	a2 dd       	rcall	.-1212   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(13,3,1,1);
    1f7e:	21 e0       	ldi	r18, 0x01	; 1
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	8d e0       	ldi	r24, 0x0D	; 13
    1f86:	9d dd       	rcall	.-1222   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(12,3,1,1);
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	63 e0       	ldi	r22, 0x03	; 3
    1f8e:	8c e0       	ldi	r24, 0x0C	; 12
    1f90:	98 dd       	rcall	.-1232   	; 0x1ac2 <lcd12864_SetWhite>
			lcd12864_SetWhite(10,3,1,0);
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
    1f9a:	93 dd       	rcall	.-1242   	; 0x1ac2 <lcd12864_SetWhite>
			break;
		default:
			break;
	}
	o_white = white;
    1f9c:	d0 93 07 04 	sts	0x0407, r29
			
	}
	
	lcd12864_send_cmd(0x36);
    1fa0:	86 e3       	ldi	r24, 0x36	; 54
    1fa2:	0c dd       	rcall	.-1512   	; 0x19bc <lcd12864_send_cmd>
	lcd12864_send_cmd(0x30);
    1fa4:	80 e3       	ldi	r24, 0x30	; 48
    1fa6:	0a dd       	rcall	.-1516   	; 0x19bc <lcd12864_send_cmd>
	}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	08 95       	ret

00001fb0 <__subsf3>:
    1fb0:	50 58       	subi	r21, 0x80	; 128

00001fb2 <__addsf3>:
    1fb2:	bb 27       	eor	r27, r27
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	0e d0       	rcall	.+28     	; 0x1fd4 <__addsf3x>
    1fb8:	4d c1       	rjmp	.+666    	; 0x2254 <__fp_round>
    1fba:	3e d1       	rcall	.+636    	; 0x2238 <__fp_pscA>
    1fbc:	30 f0       	brcs	.+12     	; 0x1fca <__addsf3+0x18>
    1fbe:	43 d1       	rcall	.+646    	; 0x2246 <__fp_pscB>
    1fc0:	20 f0       	brcs	.+8      	; 0x1fca <__addsf3+0x18>
    1fc2:	31 f4       	brne	.+12     	; 0x1fd0 <__addsf3+0x1e>
    1fc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc6:	11 f4       	brne	.+4      	; 0x1fcc <__addsf3+0x1a>
    1fc8:	1e f4       	brtc	.+6      	; 0x1fd0 <__addsf3+0x1e>
    1fca:	33 c1       	rjmp	.+614    	; 0x2232 <__fp_nan>
    1fcc:	0e f4       	brtc	.+2      	; 0x1fd0 <__addsf3+0x1e>
    1fce:	e0 95       	com	r30
    1fd0:	e7 fb       	bst	r30, 7
    1fd2:	29 c1       	rjmp	.+594    	; 0x2226 <__fp_inf>

00001fd4 <__addsf3x>:
    1fd4:	e9 2f       	mov	r30, r25
    1fd6:	4f d1       	rcall	.+670    	; 0x2276 <__fp_split3>
    1fd8:	80 f3       	brcs	.-32     	; 0x1fba <__addsf3+0x8>
    1fda:	ba 17       	cp	r27, r26
    1fdc:	62 07       	cpc	r22, r18
    1fde:	73 07       	cpc	r23, r19
    1fe0:	84 07       	cpc	r24, r20
    1fe2:	95 07       	cpc	r25, r21
    1fe4:	18 f0       	brcs	.+6      	; 0x1fec <__addsf3x+0x18>
    1fe6:	71 f4       	brne	.+28     	; 0x2004 <__addsf3x+0x30>
    1fe8:	9e f5       	brtc	.+102    	; 0x2050 <__addsf3x+0x7c>
    1fea:	67 c1       	rjmp	.+718    	; 0x22ba <__fp_zero>
    1fec:	0e f4       	brtc	.+2      	; 0x1ff0 <__addsf3x+0x1c>
    1fee:	e0 95       	com	r30
    1ff0:	0b 2e       	mov	r0, r27
    1ff2:	ba 2f       	mov	r27, r26
    1ff4:	a0 2d       	mov	r26, r0
    1ff6:	0b 01       	movw	r0, r22
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	90 01       	movw	r18, r0
    1ffc:	0c 01       	movw	r0, r24
    1ffe:	ca 01       	movw	r24, r20
    2000:	a0 01       	movw	r20, r0
    2002:	11 24       	eor	r1, r1
    2004:	ff 27       	eor	r31, r31
    2006:	59 1b       	sub	r21, r25
    2008:	99 f0       	breq	.+38     	; 0x2030 <__addsf3x+0x5c>
    200a:	59 3f       	cpi	r21, 0xF9	; 249
    200c:	50 f4       	brcc	.+20     	; 0x2022 <__addsf3x+0x4e>
    200e:	50 3e       	cpi	r21, 0xE0	; 224
    2010:	68 f1       	brcs	.+90     	; 0x206c <__addsf3x+0x98>
    2012:	1a 16       	cp	r1, r26
    2014:	f0 40       	sbci	r31, 0x00	; 0
    2016:	a2 2f       	mov	r26, r18
    2018:	23 2f       	mov	r18, r19
    201a:	34 2f       	mov	r19, r20
    201c:	44 27       	eor	r20, r20
    201e:	58 5f       	subi	r21, 0xF8	; 248
    2020:	f3 cf       	rjmp	.-26     	; 0x2008 <__addsf3x+0x34>
    2022:	46 95       	lsr	r20
    2024:	37 95       	ror	r19
    2026:	27 95       	ror	r18
    2028:	a7 95       	ror	r26
    202a:	f0 40       	sbci	r31, 0x00	; 0
    202c:	53 95       	inc	r21
    202e:	c9 f7       	brne	.-14     	; 0x2022 <__addsf3x+0x4e>
    2030:	7e f4       	brtc	.+30     	; 0x2050 <__addsf3x+0x7c>
    2032:	1f 16       	cp	r1, r31
    2034:	ba 0b       	sbc	r27, r26
    2036:	62 0b       	sbc	r22, r18
    2038:	73 0b       	sbc	r23, r19
    203a:	84 0b       	sbc	r24, r20
    203c:	ba f0       	brmi	.+46     	; 0x206c <__addsf3x+0x98>
    203e:	91 50       	subi	r25, 0x01	; 1
    2040:	a1 f0       	breq	.+40     	; 0x206a <__addsf3x+0x96>
    2042:	ff 0f       	add	r31, r31
    2044:	bb 1f       	adc	r27, r27
    2046:	66 1f       	adc	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	88 1f       	adc	r24, r24
    204c:	c2 f7       	brpl	.-16     	; 0x203e <__addsf3x+0x6a>
    204e:	0e c0       	rjmp	.+28     	; 0x206c <__addsf3x+0x98>
    2050:	ba 0f       	add	r27, r26
    2052:	62 1f       	adc	r22, r18
    2054:	73 1f       	adc	r23, r19
    2056:	84 1f       	adc	r24, r20
    2058:	48 f4       	brcc	.+18     	; 0x206c <__addsf3x+0x98>
    205a:	87 95       	ror	r24
    205c:	77 95       	ror	r23
    205e:	67 95       	ror	r22
    2060:	b7 95       	ror	r27
    2062:	f7 95       	ror	r31
    2064:	9e 3f       	cpi	r25, 0xFE	; 254
    2066:	08 f0       	brcs	.+2      	; 0x206a <__addsf3x+0x96>
    2068:	b3 cf       	rjmp	.-154    	; 0x1fd0 <__addsf3+0x1e>
    206a:	93 95       	inc	r25
    206c:	88 0f       	add	r24, r24
    206e:	08 f0       	brcs	.+2      	; 0x2072 <__addsf3x+0x9e>
    2070:	99 27       	eor	r25, r25
    2072:	ee 0f       	add	r30, r30
    2074:	97 95       	ror	r25
    2076:	87 95       	ror	r24
    2078:	08 95       	ret

0000207a <__divsf3>:
    207a:	0c d0       	rcall	.+24     	; 0x2094 <__divsf3x>
    207c:	eb c0       	rjmp	.+470    	; 0x2254 <__fp_round>
    207e:	e3 d0       	rcall	.+454    	; 0x2246 <__fp_pscB>
    2080:	40 f0       	brcs	.+16     	; 0x2092 <__divsf3+0x18>
    2082:	da d0       	rcall	.+436    	; 0x2238 <__fp_pscA>
    2084:	30 f0       	brcs	.+12     	; 0x2092 <__divsf3+0x18>
    2086:	21 f4       	brne	.+8      	; 0x2090 <__divsf3+0x16>
    2088:	5f 3f       	cpi	r21, 0xFF	; 255
    208a:	19 f0       	breq	.+6      	; 0x2092 <__divsf3+0x18>
    208c:	cc c0       	rjmp	.+408    	; 0x2226 <__fp_inf>
    208e:	51 11       	cpse	r21, r1
    2090:	15 c1       	rjmp	.+554    	; 0x22bc <__fp_szero>
    2092:	cf c0       	rjmp	.+414    	; 0x2232 <__fp_nan>

00002094 <__divsf3x>:
    2094:	f0 d0       	rcall	.+480    	; 0x2276 <__fp_split3>
    2096:	98 f3       	brcs	.-26     	; 0x207e <__divsf3+0x4>

00002098 <__divsf3_pse>:
    2098:	99 23       	and	r25, r25
    209a:	c9 f3       	breq	.-14     	; 0x208e <__divsf3+0x14>
    209c:	55 23       	and	r21, r21
    209e:	b1 f3       	breq	.-20     	; 0x208c <__divsf3+0x12>
    20a0:	95 1b       	sub	r25, r21
    20a2:	55 0b       	sbc	r21, r21
    20a4:	bb 27       	eor	r27, r27
    20a6:	aa 27       	eor	r26, r26
    20a8:	62 17       	cp	r22, r18
    20aa:	73 07       	cpc	r23, r19
    20ac:	84 07       	cpc	r24, r20
    20ae:	38 f0       	brcs	.+14     	; 0x20be <__divsf3_pse+0x26>
    20b0:	9f 5f       	subi	r25, 0xFF	; 255
    20b2:	5f 4f       	sbci	r21, 0xFF	; 255
    20b4:	22 0f       	add	r18, r18
    20b6:	33 1f       	adc	r19, r19
    20b8:	44 1f       	adc	r20, r20
    20ba:	aa 1f       	adc	r26, r26
    20bc:	a9 f3       	breq	.-22     	; 0x20a8 <__divsf3_pse+0x10>
    20be:	33 d0       	rcall	.+102    	; 0x2126 <__divsf3_pse+0x8e>
    20c0:	0e 2e       	mov	r0, r30
    20c2:	3a f0       	brmi	.+14     	; 0x20d2 <__divsf3_pse+0x3a>
    20c4:	e0 e8       	ldi	r30, 0x80	; 128
    20c6:	30 d0       	rcall	.+96     	; 0x2128 <__divsf3_pse+0x90>
    20c8:	91 50       	subi	r25, 0x01	; 1
    20ca:	50 40       	sbci	r21, 0x00	; 0
    20cc:	e6 95       	lsr	r30
    20ce:	00 1c       	adc	r0, r0
    20d0:	ca f7       	brpl	.-14     	; 0x20c4 <__divsf3_pse+0x2c>
    20d2:	29 d0       	rcall	.+82     	; 0x2126 <__divsf3_pse+0x8e>
    20d4:	fe 2f       	mov	r31, r30
    20d6:	27 d0       	rcall	.+78     	; 0x2126 <__divsf3_pse+0x8e>
    20d8:	66 0f       	add	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	bb 1f       	adc	r27, r27
    20e0:	26 17       	cp	r18, r22
    20e2:	37 07       	cpc	r19, r23
    20e4:	48 07       	cpc	r20, r24
    20e6:	ab 07       	cpc	r26, r27
    20e8:	b0 e8       	ldi	r27, 0x80	; 128
    20ea:	09 f0       	breq	.+2      	; 0x20ee <__divsf3_pse+0x56>
    20ec:	bb 0b       	sbc	r27, r27
    20ee:	80 2d       	mov	r24, r0
    20f0:	bf 01       	movw	r22, r30
    20f2:	ff 27       	eor	r31, r31
    20f4:	93 58       	subi	r25, 0x83	; 131
    20f6:	5f 4f       	sbci	r21, 0xFF	; 255
    20f8:	2a f0       	brmi	.+10     	; 0x2104 <__divsf3_pse+0x6c>
    20fa:	9e 3f       	cpi	r25, 0xFE	; 254
    20fc:	51 05       	cpc	r21, r1
    20fe:	68 f0       	brcs	.+26     	; 0x211a <__divsf3_pse+0x82>
    2100:	92 c0       	rjmp	.+292    	; 0x2226 <__fp_inf>
    2102:	dc c0       	rjmp	.+440    	; 0x22bc <__fp_szero>
    2104:	5f 3f       	cpi	r21, 0xFF	; 255
    2106:	ec f3       	brlt	.-6      	; 0x2102 <__divsf3_pse+0x6a>
    2108:	98 3e       	cpi	r25, 0xE8	; 232
    210a:	dc f3       	brlt	.-10     	; 0x2102 <__divsf3_pse+0x6a>
    210c:	86 95       	lsr	r24
    210e:	77 95       	ror	r23
    2110:	67 95       	ror	r22
    2112:	b7 95       	ror	r27
    2114:	f7 95       	ror	r31
    2116:	9f 5f       	subi	r25, 0xFF	; 255
    2118:	c9 f7       	brne	.-14     	; 0x210c <__divsf3_pse+0x74>
    211a:	88 0f       	add	r24, r24
    211c:	91 1d       	adc	r25, r1
    211e:	96 95       	lsr	r25
    2120:	87 95       	ror	r24
    2122:	97 f9       	bld	r25, 7
    2124:	08 95       	ret
    2126:	e1 e0       	ldi	r30, 0x01	; 1
    2128:	66 0f       	add	r22, r22
    212a:	77 1f       	adc	r23, r23
    212c:	88 1f       	adc	r24, r24
    212e:	bb 1f       	adc	r27, r27
    2130:	62 17       	cp	r22, r18
    2132:	73 07       	cpc	r23, r19
    2134:	84 07       	cpc	r24, r20
    2136:	ba 07       	cpc	r27, r26
    2138:	20 f0       	brcs	.+8      	; 0x2142 <__divsf3_pse+0xaa>
    213a:	62 1b       	sub	r22, r18
    213c:	73 0b       	sbc	r23, r19
    213e:	84 0b       	sbc	r24, r20
    2140:	ba 0b       	sbc	r27, r26
    2142:	ee 1f       	adc	r30, r30
    2144:	88 f7       	brcc	.-30     	; 0x2128 <__divsf3_pse+0x90>
    2146:	e0 95       	com	r30
    2148:	08 95       	ret

0000214a <__fixsfsi>:
    214a:	04 d0       	rcall	.+8      	; 0x2154 <__fixunssfsi>
    214c:	68 94       	set
    214e:	b1 11       	cpse	r27, r1
    2150:	b5 c0       	rjmp	.+362    	; 0x22bc <__fp_szero>
    2152:	08 95       	ret

00002154 <__fixunssfsi>:
    2154:	98 d0       	rcall	.+304    	; 0x2286 <__fp_splitA>
    2156:	88 f0       	brcs	.+34     	; 0x217a <__fixunssfsi+0x26>
    2158:	9f 57       	subi	r25, 0x7F	; 127
    215a:	90 f0       	brcs	.+36     	; 0x2180 <__fixunssfsi+0x2c>
    215c:	b9 2f       	mov	r27, r25
    215e:	99 27       	eor	r25, r25
    2160:	b7 51       	subi	r27, 0x17	; 23
    2162:	a0 f0       	brcs	.+40     	; 0x218c <__fixunssfsi+0x38>
    2164:	d1 f0       	breq	.+52     	; 0x219a <__fixunssfsi+0x46>
    2166:	66 0f       	add	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	88 1f       	adc	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	1a f0       	brmi	.+6      	; 0x2176 <__fixunssfsi+0x22>
    2170:	ba 95       	dec	r27
    2172:	c9 f7       	brne	.-14     	; 0x2166 <__fixunssfsi+0x12>
    2174:	12 c0       	rjmp	.+36     	; 0x219a <__fixunssfsi+0x46>
    2176:	b1 30       	cpi	r27, 0x01	; 1
    2178:	81 f0       	breq	.+32     	; 0x219a <__fixunssfsi+0x46>
    217a:	9f d0       	rcall	.+318    	; 0x22ba <__fp_zero>
    217c:	b1 e0       	ldi	r27, 0x01	; 1
    217e:	08 95       	ret
    2180:	9c c0       	rjmp	.+312    	; 0x22ba <__fp_zero>
    2182:	67 2f       	mov	r22, r23
    2184:	78 2f       	mov	r23, r24
    2186:	88 27       	eor	r24, r24
    2188:	b8 5f       	subi	r27, 0xF8	; 248
    218a:	39 f0       	breq	.+14     	; 0x219a <__fixunssfsi+0x46>
    218c:	b9 3f       	cpi	r27, 0xF9	; 249
    218e:	cc f3       	brlt	.-14     	; 0x2182 <__fixunssfsi+0x2e>
    2190:	86 95       	lsr	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	b3 95       	inc	r27
    2198:	d9 f7       	brne	.-10     	; 0x2190 <__fixunssfsi+0x3c>
    219a:	3e f4       	brtc	.+14     	; 0x21aa <__fixunssfsi+0x56>
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	08 95       	ret

000021ac <__floatunsisf>:
    21ac:	e8 94       	clt
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <__floatsisf+0x12>

000021b0 <__floatsisf>:
    21b0:	97 fb       	bst	r25, 7
    21b2:	3e f4       	brtc	.+14     	; 0x21c2 <__floatsisf+0x12>
    21b4:	90 95       	com	r25
    21b6:	80 95       	com	r24
    21b8:	70 95       	com	r23
    21ba:	61 95       	neg	r22
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 4f       	sbci	r24, 0xFF	; 255
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	99 23       	and	r25, r25
    21c4:	a9 f0       	breq	.+42     	; 0x21f0 <__floatsisf+0x40>
    21c6:	f9 2f       	mov	r31, r25
    21c8:	96 e9       	ldi	r25, 0x96	; 150
    21ca:	bb 27       	eor	r27, r27
    21cc:	93 95       	inc	r25
    21ce:	f6 95       	lsr	r31
    21d0:	87 95       	ror	r24
    21d2:	77 95       	ror	r23
    21d4:	67 95       	ror	r22
    21d6:	b7 95       	ror	r27
    21d8:	f1 11       	cpse	r31, r1
    21da:	f8 cf       	rjmp	.-16     	; 0x21cc <__floatsisf+0x1c>
    21dc:	fa f4       	brpl	.+62     	; 0x221c <__floatsisf+0x6c>
    21de:	bb 0f       	add	r27, r27
    21e0:	11 f4       	brne	.+4      	; 0x21e6 <__floatsisf+0x36>
    21e2:	60 ff       	sbrs	r22, 0
    21e4:	1b c0       	rjmp	.+54     	; 0x221c <__floatsisf+0x6c>
    21e6:	6f 5f       	subi	r22, 0xFF	; 255
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	8f 4f       	sbci	r24, 0xFF	; 255
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <__floatsisf+0x6c>
    21f0:	88 23       	and	r24, r24
    21f2:	11 f0       	breq	.+4      	; 0x21f8 <__floatsisf+0x48>
    21f4:	96 e9       	ldi	r25, 0x96	; 150
    21f6:	11 c0       	rjmp	.+34     	; 0x221a <__floatsisf+0x6a>
    21f8:	77 23       	and	r23, r23
    21fa:	21 f0       	breq	.+8      	; 0x2204 <__floatsisf+0x54>
    21fc:	9e e8       	ldi	r25, 0x8E	; 142
    21fe:	87 2f       	mov	r24, r23
    2200:	76 2f       	mov	r23, r22
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__floatsisf+0x5e>
    2204:	66 23       	and	r22, r22
    2206:	71 f0       	breq	.+28     	; 0x2224 <__floatsisf+0x74>
    2208:	96 e8       	ldi	r25, 0x86	; 134
    220a:	86 2f       	mov	r24, r22
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	2a f0       	brmi	.+10     	; 0x221c <__floatsisf+0x6c>
    2212:	9a 95       	dec	r25
    2214:	66 0f       	add	r22, r22
    2216:	77 1f       	adc	r23, r23
    2218:	88 1f       	adc	r24, r24
    221a:	da f7       	brpl	.-10     	; 0x2212 <__floatsisf+0x62>
    221c:	88 0f       	add	r24, r24
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <__fp_inf>:
    2226:	97 f9       	bld	r25, 7
    2228:	9f 67       	ori	r25, 0x7F	; 127
    222a:	80 e8       	ldi	r24, 0x80	; 128
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	08 95       	ret

00002232 <__fp_nan>:
    2232:	9f ef       	ldi	r25, 0xFF	; 255
    2234:	80 ec       	ldi	r24, 0xC0	; 192
    2236:	08 95       	ret

00002238 <__fp_pscA>:
    2238:	00 24       	eor	r0, r0
    223a:	0a 94       	dec	r0
    223c:	16 16       	cp	r1, r22
    223e:	17 06       	cpc	r1, r23
    2240:	18 06       	cpc	r1, r24
    2242:	09 06       	cpc	r0, r25
    2244:	08 95       	ret

00002246 <__fp_pscB>:
    2246:	00 24       	eor	r0, r0
    2248:	0a 94       	dec	r0
    224a:	12 16       	cp	r1, r18
    224c:	13 06       	cpc	r1, r19
    224e:	14 06       	cpc	r1, r20
    2250:	05 06       	cpc	r0, r21
    2252:	08 95       	ret

00002254 <__fp_round>:
    2254:	09 2e       	mov	r0, r25
    2256:	03 94       	inc	r0
    2258:	00 0c       	add	r0, r0
    225a:	11 f4       	brne	.+4      	; 0x2260 <__fp_round+0xc>
    225c:	88 23       	and	r24, r24
    225e:	52 f0       	brmi	.+20     	; 0x2274 <__fp_round+0x20>
    2260:	bb 0f       	add	r27, r27
    2262:	40 f4       	brcc	.+16     	; 0x2274 <__fp_round+0x20>
    2264:	bf 2b       	or	r27, r31
    2266:	11 f4       	brne	.+4      	; 0x226c <__fp_round+0x18>
    2268:	60 ff       	sbrs	r22, 0
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <__fp_round+0x20>
    226c:	6f 5f       	subi	r22, 0xFF	; 255
    226e:	7f 4f       	sbci	r23, 0xFF	; 255
    2270:	8f 4f       	sbci	r24, 0xFF	; 255
    2272:	9f 4f       	sbci	r25, 0xFF	; 255
    2274:	08 95       	ret

00002276 <__fp_split3>:
    2276:	57 fd       	sbrc	r21, 7
    2278:	90 58       	subi	r25, 0x80	; 128
    227a:	44 0f       	add	r20, r20
    227c:	55 1f       	adc	r21, r21
    227e:	59 f0       	breq	.+22     	; 0x2296 <__fp_splitA+0x10>
    2280:	5f 3f       	cpi	r21, 0xFF	; 255
    2282:	71 f0       	breq	.+28     	; 0x22a0 <__fp_splitA+0x1a>
    2284:	47 95       	ror	r20

00002286 <__fp_splitA>:
    2286:	88 0f       	add	r24, r24
    2288:	97 fb       	bst	r25, 7
    228a:	99 1f       	adc	r25, r25
    228c:	61 f0       	breq	.+24     	; 0x22a6 <__fp_splitA+0x20>
    228e:	9f 3f       	cpi	r25, 0xFF	; 255
    2290:	79 f0       	breq	.+30     	; 0x22b0 <__fp_splitA+0x2a>
    2292:	87 95       	ror	r24
    2294:	08 95       	ret
    2296:	12 16       	cp	r1, r18
    2298:	13 06       	cpc	r1, r19
    229a:	14 06       	cpc	r1, r20
    229c:	55 1f       	adc	r21, r21
    229e:	f2 cf       	rjmp	.-28     	; 0x2284 <__fp_split3+0xe>
    22a0:	46 95       	lsr	r20
    22a2:	f1 df       	rcall	.-30     	; 0x2286 <__fp_splitA>
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <__fp_splitA+0x30>
    22a6:	16 16       	cp	r1, r22
    22a8:	17 06       	cpc	r1, r23
    22aa:	18 06       	cpc	r1, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	f1 cf       	rjmp	.-30     	; 0x2292 <__fp_splitA+0xc>
    22b0:	86 95       	lsr	r24
    22b2:	71 05       	cpc	r23, r1
    22b4:	61 05       	cpc	r22, r1
    22b6:	08 94       	sec
    22b8:	08 95       	ret

000022ba <__fp_zero>:
    22ba:	e8 94       	clt

000022bc <__fp_szero>:
    22bc:	bb 27       	eor	r27, r27
    22be:	66 27       	eor	r22, r22
    22c0:	77 27       	eor	r23, r23
    22c2:	cb 01       	movw	r24, r22
    22c4:	97 f9       	bld	r25, 7
    22c6:	08 95       	ret

000022c8 <__mulsf3>:
    22c8:	0b d0       	rcall	.+22     	; 0x22e0 <__mulsf3x>
    22ca:	c4 cf       	rjmp	.-120    	; 0x2254 <__fp_round>
    22cc:	b5 df       	rcall	.-150    	; 0x2238 <__fp_pscA>
    22ce:	28 f0       	brcs	.+10     	; 0x22da <__mulsf3+0x12>
    22d0:	ba df       	rcall	.-140    	; 0x2246 <__fp_pscB>
    22d2:	18 f0       	brcs	.+6      	; 0x22da <__mulsf3+0x12>
    22d4:	95 23       	and	r25, r21
    22d6:	09 f0       	breq	.+2      	; 0x22da <__mulsf3+0x12>
    22d8:	a6 cf       	rjmp	.-180    	; 0x2226 <__fp_inf>
    22da:	ab cf       	rjmp	.-170    	; 0x2232 <__fp_nan>
    22dc:	11 24       	eor	r1, r1
    22de:	ee cf       	rjmp	.-36     	; 0x22bc <__fp_szero>

000022e0 <__mulsf3x>:
    22e0:	ca df       	rcall	.-108    	; 0x2276 <__fp_split3>
    22e2:	a0 f3       	brcs	.-24     	; 0x22cc <__mulsf3+0x4>

000022e4 <__mulsf3_pse>:
    22e4:	95 9f       	mul	r25, r21
    22e6:	d1 f3       	breq	.-12     	; 0x22dc <__mulsf3+0x14>
    22e8:	95 0f       	add	r25, r21
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	55 1f       	adc	r21, r21
    22ee:	62 9f       	mul	r22, r18
    22f0:	f0 01       	movw	r30, r0
    22f2:	72 9f       	mul	r23, r18
    22f4:	bb 27       	eor	r27, r27
    22f6:	f0 0d       	add	r31, r0
    22f8:	b1 1d       	adc	r27, r1
    22fa:	63 9f       	mul	r22, r19
    22fc:	aa 27       	eor	r26, r26
    22fe:	f0 0d       	add	r31, r0
    2300:	b1 1d       	adc	r27, r1
    2302:	aa 1f       	adc	r26, r26
    2304:	64 9f       	mul	r22, r20
    2306:	66 27       	eor	r22, r22
    2308:	b0 0d       	add	r27, r0
    230a:	a1 1d       	adc	r26, r1
    230c:	66 1f       	adc	r22, r22
    230e:	82 9f       	mul	r24, r18
    2310:	22 27       	eor	r18, r18
    2312:	b0 0d       	add	r27, r0
    2314:	a1 1d       	adc	r26, r1
    2316:	62 1f       	adc	r22, r18
    2318:	73 9f       	mul	r23, r19
    231a:	b0 0d       	add	r27, r0
    231c:	a1 1d       	adc	r26, r1
    231e:	62 1f       	adc	r22, r18
    2320:	83 9f       	mul	r24, r19
    2322:	a0 0d       	add	r26, r0
    2324:	61 1d       	adc	r22, r1
    2326:	22 1f       	adc	r18, r18
    2328:	74 9f       	mul	r23, r20
    232a:	33 27       	eor	r19, r19
    232c:	a0 0d       	add	r26, r0
    232e:	61 1d       	adc	r22, r1
    2330:	23 1f       	adc	r18, r19
    2332:	84 9f       	mul	r24, r20
    2334:	60 0d       	add	r22, r0
    2336:	21 1d       	adc	r18, r1
    2338:	82 2f       	mov	r24, r18
    233a:	76 2f       	mov	r23, r22
    233c:	6a 2f       	mov	r22, r26
    233e:	11 24       	eor	r1, r1
    2340:	9f 57       	subi	r25, 0x7F	; 127
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	8a f0       	brmi	.+34     	; 0x2368 <__mulsf3_pse+0x84>
    2346:	e1 f0       	breq	.+56     	; 0x2380 <__mulsf3_pse+0x9c>
    2348:	88 23       	and	r24, r24
    234a:	4a f0       	brmi	.+18     	; 0x235e <__mulsf3_pse+0x7a>
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	bb 1f       	adc	r27, r27
    2352:	66 1f       	adc	r22, r22
    2354:	77 1f       	adc	r23, r23
    2356:	88 1f       	adc	r24, r24
    2358:	91 50       	subi	r25, 0x01	; 1
    235a:	50 40       	sbci	r21, 0x00	; 0
    235c:	a9 f7       	brne	.-22     	; 0x2348 <__mulsf3_pse+0x64>
    235e:	9e 3f       	cpi	r25, 0xFE	; 254
    2360:	51 05       	cpc	r21, r1
    2362:	70 f0       	brcs	.+28     	; 0x2380 <__mulsf3_pse+0x9c>
    2364:	60 cf       	rjmp	.-320    	; 0x2226 <__fp_inf>
    2366:	aa cf       	rjmp	.-172    	; 0x22bc <__fp_szero>
    2368:	5f 3f       	cpi	r21, 0xFF	; 255
    236a:	ec f3       	brlt	.-6      	; 0x2366 <__mulsf3_pse+0x82>
    236c:	98 3e       	cpi	r25, 0xE8	; 232
    236e:	dc f3       	brlt	.-10     	; 0x2366 <__mulsf3_pse+0x82>
    2370:	86 95       	lsr	r24
    2372:	77 95       	ror	r23
    2374:	67 95       	ror	r22
    2376:	b7 95       	ror	r27
    2378:	f7 95       	ror	r31
    237a:	e7 95       	ror	r30
    237c:	9f 5f       	subi	r25, 0xFF	; 255
    237e:	c1 f7       	brne	.-16     	; 0x2370 <__mulsf3_pse+0x8c>
    2380:	fe 2b       	or	r31, r30
    2382:	88 0f       	add	r24, r24
    2384:	91 1d       	adc	r25, r1
    2386:	96 95       	lsr	r25
    2388:	87 95       	ror	r24
    238a:	97 f9       	bld	r25, 7
    238c:	08 95       	ret

0000238e <__tablejump2__>:
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31

00002392 <__tablejump__>:
    2392:	05 90       	lpm	r0, Z+
    2394:	f4 91       	lpm	r31, Z
    2396:	e0 2d       	mov	r30, r0
    2398:	09 94       	ijmp

0000239a <__umulhisi3>:
    239a:	a2 9f       	mul	r26, r18
    239c:	b0 01       	movw	r22, r0
    239e:	b3 9f       	mul	r27, r19
    23a0:	c0 01       	movw	r24, r0
    23a2:	a3 9f       	mul	r26, r19
    23a4:	70 0d       	add	r23, r0
    23a6:	81 1d       	adc	r24, r1
    23a8:	11 24       	eor	r1, r1
    23aa:	91 1d       	adc	r25, r1
    23ac:	b2 9f       	mul	r27, r18
    23ae:	70 0d       	add	r23, r0
    23b0:	81 1d       	adc	r24, r1
    23b2:	11 24       	eor	r1, r1
    23b4:	91 1d       	adc	r25, r1
    23b6:	08 95       	ret

000023b8 <__itoa_ncheck>:
    23b8:	bb 27       	eor	r27, r27
    23ba:	4a 30       	cpi	r20, 0x0A	; 10
    23bc:	31 f4       	brne	.+12     	; 0x23ca <__itoa_ncheck+0x12>
    23be:	99 23       	and	r25, r25
    23c0:	22 f4       	brpl	.+8      	; 0x23ca <__itoa_ncheck+0x12>
    23c2:	bd e2       	ldi	r27, 0x2D	; 45
    23c4:	90 95       	com	r25
    23c6:	81 95       	neg	r24
    23c8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <__utoa_common>

000023cc <__utoa_ncheck>:
    23cc:	bb 27       	eor	r27, r27

000023ce <__utoa_common>:
    23ce:	fb 01       	movw	r30, r22
    23d0:	55 27       	eor	r21, r21
    23d2:	aa 27       	eor	r26, r26
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	aa 1f       	adc	r26, r26
    23da:	a4 17       	cp	r26, r20
    23dc:	10 f0       	brcs	.+4      	; 0x23e2 <__utoa_common+0x14>
    23de:	a4 1b       	sub	r26, r20
    23e0:	83 95       	inc	r24
    23e2:	50 51       	subi	r21, 0x10	; 16
    23e4:	b9 f7       	brne	.-18     	; 0x23d4 <__utoa_common+0x6>
    23e6:	a0 5d       	subi	r26, 0xD0	; 208
    23e8:	aa 33       	cpi	r26, 0x3A	; 58
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <__utoa_common+0x20>
    23ec:	a9 5d       	subi	r26, 0xD9	; 217
    23ee:	a1 93       	st	Z+, r26
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	79 f7       	brne	.-34     	; 0x23d2 <__utoa_common+0x4>
    23f4:	b1 11       	cpse	r27, r1
    23f6:	b1 93       	st	Z+, r27
    23f8:	11 92       	st	Z+, r1
    23fa:	cb 01       	movw	r24, r22
    23fc:	00 c0       	rjmp	.+0      	; 0x23fe <strrev>

000023fe <strrev>:
    23fe:	dc 01       	movw	r26, r24
    2400:	fc 01       	movw	r30, r24
    2402:	67 2f       	mov	r22, r23
    2404:	71 91       	ld	r23, Z+
    2406:	77 23       	and	r23, r23
    2408:	e1 f7       	brne	.-8      	; 0x2402 <strrev+0x4>
    240a:	32 97       	sbiw	r30, 0x02	; 2
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <strrev+0x18>
    240e:	7c 91       	ld	r23, X
    2410:	6d 93       	st	X+, r22
    2412:	70 83       	st	Z, r23
    2414:	62 91       	ld	r22, -Z
    2416:	ae 17       	cp	r26, r30
    2418:	bf 07       	cpc	r27, r31
    241a:	c8 f3       	brcs	.-14     	; 0x240e <strrev+0x10>
    241c:	08 95       	ret

0000241e <_exit>:
    241e:	f8 94       	cli

00002420 <__stop_program>:
    2420:	ff cf       	rjmp	.-2      	; 0x2420 <__stop_program>

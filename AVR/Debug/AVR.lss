
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000494  00800100  000018f4  00001988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800594  00800594  00001e1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002404  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be4  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004059  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005dc  00000000  00000000  00009130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010fdc  00000000  00000000  0000970c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014f8  00000000  00000000  0001a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0001bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001630  00000000  00000000  0001bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4e c7       	rjmp	.+3740   	; 0xeda <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ef       	ldi	r30, 0xF4	; 244
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 39       	cpi	r26, 0x94	; 148
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a4 e9       	ldi	r26, 0x94	; 148
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3e       	cpi	r26, 0xE8	; 232
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
      ca:	0e 94 80 08 	call	0x1100	; 0x1100 <buttons_init>
	lcd12864_init();
      ce:	0e 94 8b 0a 	call	0x1516	; 0x1516 <lcd12864_init>
	init_IO();
      d2:	22 d2       	rcall	.+1092   	; 0x518 <init_IO>
	emv_ports_init();
      d4:	0d d2       	rcall	.+1050   	; 0x4f0 <emv_ports_init>
	Timer0_Init();
      d6:	dc d6       	rcall	.+3512   	; 0xe90 <Timer0_Init>
	ADC_init();
      d8:	7a d1       	rcall	.+756    	; 0x3ce <ADC_init>
	Menu_Init();
      da:	08 d6       	rcall	.+3088   	; 0xcec <Menu_Init>

	while(1){
	Menu_Poll();
      dc:	33 d6       	rcall	.+3174   	; 0xd44 <Menu_Poll>
      de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x12>

000000e0 <Act_Update_Main>:
#define MODE0 "[X]"
#define MODE1 "[1]"
#define MODE2 "[2]"
#define MODE3 "[3]"

void Act_Update_Main(void){
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <Act_Update_Main+0x12>
      f2:	00 d0       	rcall	.+0      	; 0xf4 <Act_Update_Main+0x14>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t blink_factor = 0;
	blink_factor = !blink_factor;
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	90 91 9c 05 	lds	r25, 0x059C
      fe:	91 11       	cpse	r25, r1
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	80 93 9c 05 	sts	0x059C, r24
	static uint16_t days=0, hours=0, m=0,s=0;
	char *time="00d00h00m";
	char pdstr[4];
	int pressure_diff = (int)ADC_read(PRESSURE);
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	7b d1       	rcall	.+758    	; 0x400 <ADC_read>
     10a:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fixsfsi>
     10e:	6b 01       	movw	r12, r22
     110:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     112:	4a e0       	ldi	r20, 0x0A	; 10
     114:	be 01       	movw	r22, r28
     116:	6f 5f       	subi	r22, 0xFF	; 255
     118:	7f 4f       	sbci	r23, 0xFF	; 255
     11a:	c6 01       	movw	r24, r12
     11c:	0e 94 45 0c 	call	0x188a	; 0x188a <__itoa_ncheck>
	itoa(pressure_diff,pdstr,10);
	lcd12864_set_pos(0,1);
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 37 09 	call	0x126e	; 0x126e <lcd12864_set_pos>
	switch(PD_Mode){
     128:	80 91 00 01 	lds	r24, 0x0100
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	49 f0       	breq	.+18     	; 0x142 <Act_Update_Main+0x62>
     130:	83 30       	cpi	r24, 0x03	; 3
     132:	61 f0       	breq	.+24     	; 0x14c <Act_Update_Main+0x6c>
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	79 f4       	brne	.+30     	; 0x156 <Act_Update_Main+0x76>
		case 1:
		lcd12864_write_str(MODE1);
     138:	86 e1       	ldi	r24, 0x16	; 22
     13a:	94 e0       	ldi	r25, 0x04	; 4
     13c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <lcd12864_write_str>
		break;
     140:	0e c0       	rjmp	.+28     	; 0x15e <Act_Update_Main+0x7e>
		case 2:
		lcd12864_write_str(MODE2);
     142:	8a e1       	ldi	r24, 0x1A	; 26
     144:	94 e0       	ldi	r25, 0x04	; 4
     146:	0e 94 52 09 	call	0x12a4	; 0x12a4 <lcd12864_write_str>
		break;
     14a:	09 c0       	rjmp	.+18     	; 0x15e <Act_Update_Main+0x7e>
		case 3:
		lcd12864_write_str(MODE3);
     14c:	8e e1       	ldi	r24, 0x1E	; 30
     14e:	94 e0       	ldi	r25, 0x04	; 4
     150:	0e 94 52 09 	call	0x12a4	; 0x12a4 <lcd12864_write_str>
		break;
     154:	04 c0       	rjmp	.+8      	; 0x15e <Act_Update_Main+0x7e>
		default:
		lcd12864_write_str(MODE0);
     156:	82 e2       	ldi	r24, 0x22	; 34
     158:	94 e0       	ldi	r25, 0x04	; 4
     15a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <lcd12864_write_str>
		break;
	}
	
	lcd12864_set_pos(4,1);
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	0e 94 37 09 	call	0x126e	; 0x126e <lcd12864_set_pos>
	if(Blowing_State){
     166:	80 91 9d 05 	lds	r24, 0x059D
     16a:	88 23       	and	r24, r24
     16c:	61 f0       	breq	.+24     	; 0x186 <Act_Update_Main+0xa6>
		if(blink_factor)
     16e:	80 91 9c 05 	lds	r24, 0x059C
     172:	88 23       	and	r24, r24
     174:	21 f0       	breq	.+8      	; 0x17e <Act_Update_Main+0x9e>
		lcd12864_write_char(0x0f);
     176:	8f e0       	ldi	r24, 0x0F	; 15
     178:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
     17c:	0f c0       	rjmp	.+30     	; 0x19c <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     17e:	89 e0       	ldi	r24, 0x09	; 9
     180:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
     184:	0b c0       	rjmp	.+22     	; 0x19c <Act_Update_Main+0xbc>
	}
	else{
		if(blink_factor)
     186:	80 91 9c 05 	lds	r24, 0x059C
     18a:	88 23       	and	r24, r24
     18c:	21 f0       	breq	.+8      	; 0x196 <Act_Update_Main+0xb6>
		lcd12864_write_char(0x07);
     18e:	87 e0       	ldi	r24, 0x07	; 7
     190:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
     194:	03 c0       	rjmp	.+6      	; 0x19c <Act_Update_Main+0xbc>
		else
		lcd12864_write_char(0x09);
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(7,1);
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	0e 94 37 09 	call	0x126e	; 0x126e <lcd12864_set_pos>
	if(Alarm_State){
     1a4:	80 91 9e 05 	lds	r24, 0x059E
     1a8:	88 23       	and	r24, r24
     1aa:	61 f0       	breq	.+24     	; 0x1c4 <Act_Update_Main+0xe4>
		if(blink_factor)
     1ac:	80 91 9c 05 	lds	r24, 0x059C
     1b0:	88 23       	and	r24, r24
     1b2:	21 f0       	breq	.+8      	; 0x1bc <Act_Update_Main+0xdc>
			lcd12864_write_char(0x21);
     1b4:	81 e2       	ldi	r24, 0x21	; 33
     1b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <Act_Update_Main+0xea>
		else
			lcd12864_write_char(' ');
     1bc:	80 e2       	ldi	r24, 0x20	; 32
     1be:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <Act_Update_Main+0xea>
	}
	else{
		lcd12864_write_char(0x02);
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <lcd12864_write_char>
		
	}
	
	lcd12864_set_pos(5,2);
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	85 e0       	ldi	r24, 0x05	; 5
     1ce:	0e 94 37 09 	call	0x126e	; 0x126e <lcd12864_set_pos>
	lcd12864_write_str(pdstr);
     1d2:	ce 01       	movw	r24, r28
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <lcd12864_write_str>
	lcd12864_set_pos(3,3);
     1da:	63 e0       	ldi	r22, 0x03	; 3
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	0e 94 37 09 	call	0x126e	; 0x126e <lcd12864_set_pos>
	s++;
     1e2:	80 91 9a 05 	lds	r24, 0x059A
     1e6:	90 91 9b 05 	lds	r25, 0x059B
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 9b 05 	sts	0x059B, r25
     1f0:	80 93 9a 05 	sts	0x059A, r24
	if(s==60){
     1f4:	cc 97       	sbiw	r24, 0x3c	; 60
     1f6:	69 f4       	brne	.+26     	; 0x212 <Act_Update_Main+0x132>
		m++; s=0;
     1f8:	80 91 98 05 	lds	r24, 0x0598
     1fc:	90 91 99 05 	lds	r25, 0x0599
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	90 93 99 05 	sts	0x0599, r25
     206:	80 93 98 05 	sts	0x0598, r24
     20a:	10 92 9b 05 	sts	0x059B, r1
     20e:	10 92 9a 05 	sts	0x059A, r1
	}
	if(m==60){
     212:	80 91 98 05 	lds	r24, 0x0598
     216:	90 91 99 05 	lds	r25, 0x0599
     21a:	cc 97       	sbiw	r24, 0x3c	; 60
     21c:	69 f4       	brne	.+26     	; 0x238 <Act_Update_Main+0x158>
		hours++; m=0;
     21e:	80 91 96 05 	lds	r24, 0x0596
     222:	90 91 97 05 	lds	r25, 0x0597
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	90 93 97 05 	sts	0x0597, r25
     22c:	80 93 96 05 	sts	0x0596, r24
     230:	10 92 99 05 	sts	0x0599, r1
     234:	10 92 98 05 	sts	0x0598, r1
	}
	if(hours == 24){
     238:	40 91 96 05 	lds	r20, 0x0596
     23c:	50 91 97 05 	lds	r21, 0x0597
     240:	48 31       	cpi	r20, 0x18	; 24
     242:	51 05       	cpc	r21, r1
     244:	49 f4       	brne	.+18     	; 0x258 <Act_Update_Main+0x178>
		days++;
     246:	80 91 94 05 	lds	r24, 0x0594
     24a:	90 91 95 05 	lds	r25, 0x0595
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 95 05 	sts	0x0595, r25
     254:	80 93 94 05 	sts	0x0594, r24
	}
	time[7]=m%10+'0';
     258:	00 91 98 05 	lds	r16, 0x0598
     25c:	10 91 99 05 	lds	r17, 0x0599
     260:	e6 e2       	ldi	r30, 0x26	; 38
     262:	f4 e0       	ldi	r31, 0x04	; 4
     264:	98 01       	movw	r18, r16
     266:	ad ec       	ldi	r26, 0xCD	; 205
     268:	bc ec       	ldi	r27, 0xCC	; 204
     26a:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     26e:	96 95       	lsr	r25
     270:	87 95       	ror	r24
     272:	96 95       	lsr	r25
     274:	87 95       	ror	r24
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	9c 01       	movw	r18, r24
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	82 0f       	add	r24, r18
     28e:	93 1f       	adc	r25, r19
     290:	98 01       	movw	r18, r16
     292:	28 1b       	sub	r18, r24
     294:	39 0b       	sbc	r19, r25
     296:	c9 01       	movw	r24, r18
     298:	80 5d       	subi	r24, 0xD0	; 208
     29a:	87 83       	std	Z+7, r24	; 0x07
	time[6]=m/10+'0';
     29c:	98 01       	movw	r18, r16
     29e:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
     2ae:	80 5d       	subi	r24, 0xD0	; 208
     2b0:	86 83       	std	Z+6, r24	; 0x06
	time[4]=hours%10+'0';
     2b2:	9a 01       	movw	r18, r20
     2b4:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     2b8:	96 95       	lsr	r25
     2ba:	87 95       	ror	r24
     2bc:	96 95       	lsr	r25
     2be:	87 95       	ror	r24
     2c0:	96 95       	lsr	r25
     2c2:	87 95       	ror	r24
     2c4:	9c 01       	movw	r18, r24
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	82 0f       	add	r24, r18
     2d8:	93 1f       	adc	r25, r19
     2da:	9a 01       	movw	r18, r20
     2dc:	28 1b       	sub	r18, r24
     2de:	39 0b       	sbc	r19, r25
     2e0:	c9 01       	movw	r24, r18
     2e2:	80 5d       	subi	r24, 0xD0	; 208
     2e4:	84 83       	std	Z+4, r24	; 0x04
	time[3]=hours/10+'0';
     2e6:	9a 01       	movw	r18, r20
     2e8:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     2ec:	96 95       	lsr	r25
     2ee:	87 95       	ror	r24
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	80 5d       	subi	r24, 0xD0	; 208
     2fa:	83 83       	std	Z+3, r24	; 0x03
	time[1]=days%10+'0';
     2fc:	40 91 94 05 	lds	r20, 0x0594
     300:	50 91 95 05 	lds	r21, 0x0595
     304:	9a 01       	movw	r18, r20
     306:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	96 95       	lsr	r25
     314:	87 95       	ror	r24
     316:	9c 01       	movw	r18, r24
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	9a 01       	movw	r18, r20
     32e:	28 1b       	sub	r18, r24
     330:	39 0b       	sbc	r19, r25
     332:	c9 01       	movw	r24, r18
     334:	80 5d       	subi	r24, 0xD0	; 208
     336:	81 83       	std	Z+1, r24	; 0x01
	time[0]=days/10+'0';
     338:	9a 01       	movw	r18, r20
     33a:	0e 94 36 0c 	call	0x186c	; 0x186c <__umulhisi3>
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	80 83       	st	Z, r24

	lcd12864_write_str(time);
     34e:	cf 01       	movw	r24, r30
     350:	a9 d7       	rcall	.+3922   	; 0x12a4 <lcd12864_write_str>
	
	
	if(pressure_diff > PD_Upper_Limit){
     352:	80 91 03 01 	lds	r24, 0x0103
     356:	90 91 04 01 	lds	r25, 0x0104
     35a:	8c 15       	cp	r24, r12
     35c:	9d 05       	cpc	r25, r13
     35e:	28 f4       	brcc	.+10     	; 0x36a <Act_Update_Main+0x28a>
		Alarm_State = 1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 9e 05 	sts	0x059E, r24
		Alarm(1);
     366:	ef d0       	rcall	.+478    	; 0x546 <Alarm>
     368:	0b c0       	rjmp	.+22     	; 0x380 <Act_Update_Main+0x2a0>
	}
	else if(pressure_diff < PD_Lower_Limit){
     36a:	80 91 01 01 	lds	r24, 0x0101
     36e:	90 91 02 01 	lds	r25, 0x0102
     372:	c8 16       	cp	r12, r24
     374:	d9 06       	cpc	r13, r25
     376:	20 f4       	brcc	.+8      	; 0x380 <Act_Update_Main+0x2a0>
		Alarm_State=0;
     378:	10 92 9e 05 	sts	0x059E, r1
		Alarm(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	e3 d0       	rcall	.+454    	; 0x546 <Alarm>
	}


}
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <Act_pressure_setting1_display>:

void Act_pressure_setting1_display(void){
	lcd12864_set_pos(6,3);
     39a:	63 e0       	ldi	r22, 0x03	; 3
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	67 d7       	rcall	.+3790   	; 0x126e <lcd12864_set_pos>
	lcd12864_write_int(PD_Upper_Limit);
     3a0:	80 91 03 01 	lds	r24, 0x0103
     3a4:	90 91 04 01 	lds	r25, 0x0104
     3a8:	91 d7       	rcall	.+3874   	; 0x12cc <lcd12864_write_int>
	lcd12864_set_pos(6,2);
     3aa:	62 e0       	ldi	r22, 0x02	; 2
     3ac:	86 e0       	ldi	r24, 0x06	; 6
     3ae:	5f d7       	rcall	.+3774   	; 0x126e <lcd12864_set_pos>
	lcd12864_write_int(PD_Lower_Limit);
     3b0:	80 91 01 01 	lds	r24, 0x0101
     3b4:	90 91 02 01 	lds	r25, 0x0102
     3b8:	89 c7       	rjmp	.+3858   	; 0x12cc <lcd12864_write_int>
     3ba:	08 95       	ret

000003bc <Act_PdUAddone>:
}


void Act_PdUAddone(void){
     3bc:	08 95       	ret

000003be <Act_PdDDecone>:
	;
}
void Act_PdDDecone(void){
     3be:	08 95       	ret

000003c0 <Act_PdUAddten>:
	;
}

void Act_PdUAddten(void){
     3c0:	08 95       	ret

000003c2 <Act_PdDDecten>:
	;
}
void Act_PdDDecten(void){
     3c2:	08 95       	ret

000003c4 <Act_PdUAddHud>:
	;
}
void Act_PdUAddHud(void){
     3c4:	08 95       	ret

000003c6 <Act_PdDDecHud>:
	;
}
void Act_PdDDecHud(void){
     3c6:	08 95       	ret

000003c8 <Act_SwitchUnit>:
	;
}
void Act_SwitchUnit(void){
     3c8:	08 95       	ret

000003ca <Act_PdUApply>:
	;
}
void Act_PdUApply(void){
     3ca:	08 95       	ret

000003cc <Act_DispUnit>:
	;
}

void Act_DispUnit(void){
     3cc:	08 95       	ret

000003ce <ADC_init>:
#include <asf.h>
#include <util/delay.h>
#include "adc.h"

void ADC_init(void){
	DDRF &=~(_BV(0)|_BV(1));
     3ce:	e1 e6       	ldi	r30, 0x61	; 97
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	8c 7f       	andi	r24, 0xFC	; 252
     3d6:	80 83       	st	Z, r24
	
	ADCSRA =0x86;
     3d8:	86 e8       	ldi	r24, 0x86	; 134
     3da:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x10;
     3dc:	80 e1       	ldi	r24, 0x10	; 16
     3de:	87 b9       	out	0x07, r24	; 7
	ADCSRA &=~_BV(ADFR);
     3e0:	35 98       	cbi	0x06, 5	; 6
     3e2:	08 95       	ret

000003e4 <ADC_readonce>:
}

uint16_t ADC_readonce(void){
	uint16_t result = 0;
	ADCSRA |= _BV(ADSC);
     3e4:	36 9a       	sbi	0x06, 6	; 6
	while(!bit_is_set(ADCSRA,ADIF));
     3e6:	34 9b       	sbis	0x06, 4	; 6
     3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <ADC_readonce+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ea:	86 ef       	ldi	r24, 0xF6	; 246
     3ec:	8a 95       	dec	r24
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <ADC_readonce+0x8>
	_delay_us(100);
	result = ADCL;
     3f0:	24 b1       	in	r18, 0x04	; 4
	result += ADCH*256;
     3f2:	85 b1       	in	r24, 0x05	; 5
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	98 2f       	mov	r25, r24
     3f8:	88 27       	eor	r24, r24

	return result;	
}
     3fa:	82 0f       	add	r24, r18
     3fc:	91 1d       	adc	r25, r1
     3fe:	08 95       	ret

00000400 <ADC_read>:

float ADC_read(uint8_t target){
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	cf 93       	push	r28
	float buff = 0;
	uint8_t i = 0;
	switch(target){
     40a:	83 30       	cpi	r24, 0x03	; 3
     40c:	89 f0       	breq	.+34     	; 0x430 <ADC_read+0x30>
     40e:	28 f4       	brcc	.+10     	; 0x41a <ADC_read+0x1a>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	41 f0       	breq	.+16     	; 0x424 <ADC_read+0x24>
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	49 f0       	breq	.+18     	; 0x42a <ADC_read+0x2a>
     418:	37 c0       	rjmp	.+110    	; 0x488 <ADC_read+0x88>
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	61 f0       	breq	.+24     	; 0x436 <ADC_read+0x36>
     41e:	85 30       	cpi	r24, 0x05	; 5
     420:	69 f0       	breq	.+26     	; 0x43c <ADC_read+0x3c>
     422:	32 c0       	rjmp	.+100    	; 0x488 <ADC_read+0x88>
		case PRESSURE:
			ADMUX = 0x10;
     424:	80 e1       	ldi	r24, 0x10	; 16
     426:	87 b9       	out	0x07, r24	; 7
			break;
     428:	2f c0       	rjmp	.+94     	; 0x488 <ADC_read+0x88>
		case EMV:
			ADMUX = 0b00000100;
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	87 b9       	out	0x07, r24	; 7
			break;
     42e:	2c c0       	rjmp	.+88     	; 0x488 <ADC_read+0x88>
		case VIN:
			ADMUX = 0b00000101;
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	87 b9       	out	0x07, r24	; 7
			break;
     434:	29 c0       	rjmp	.+82     	; 0x488 <ADC_read+0x88>
		case VPP:
			ADMUX = 0b00000110;
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	87 b9       	out	0x07, r24	; 7
			break;
     43a:	26 c0       	rjmp	.+76     	; 0x488 <ADC_read+0x88>
		case VCC:
			ADMUX = 0b00000111;
     43c:	87 e0       	ldi	r24, 0x07	; 7
     43e:	87 b9       	out	0x07, r24	; 7
			break;
     440:	23 c0       	rjmp	.+70     	; 0x488 <ADC_read+0x88>
		break;
		
	}
	
	for(i=0;i<8;i++)
		buff+= ADC_readonce();
     442:	d0 df       	rcall	.-96     	; 0x3e4 <ADC_readonce>
     444:	bc 01       	movw	r22, r24
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 45 0b 	call	0x168a	; 0x168a <__floatunsisf>
     44e:	9b 01       	movw	r18, r22
     450:	ac 01       	movw	r20, r24
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     45a:	6b 01       	movw	r12, r22
     45c:	7c 01       	movw	r14, r24
     45e:	c1 50       	subi	r28, 0x01	; 1
		default:
		break;
		
	}
	
	for(i=0;i<8;i++)
     460:	81 f7       	brne	.-32     	; 0x442 <ADC_read+0x42>
		buff+= ADC_readonce();
	buff /=8;
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	5e e3       	ldi	r21, 0x3E	; 62
     46a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
	buff/=1024;
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e8       	ldi	r20, 0x80	; 128
     474:	5a e3       	ldi	r21, 0x3A	; 58
     476:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
	buff*=SCALE;
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	4a e7       	ldi	r20, 0x7A	; 122
     480:	54 e4       	ldi	r21, 0x44	; 68
     482:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
     486:	05 c0       	rjmp	.+10     	; 0x492 <ADC_read+0x92>
	result += ADCH*256;

	return result;	
}

float ADC_read(uint8_t target){
     488:	c8 e0       	ldi	r28, 0x08	; 8
     48a:	c1 2c       	mov	r12, r1
     48c:	d1 2c       	mov	r13, r1
     48e:	76 01       	movw	r14, r12
     490:	d8 cf       	rjmp	.-80     	; 0x442 <ADC_read+0x42>
	buff /=8;
	buff/=1024;
	buff*=SCALE;
	return buff;
	
     492:	cf 91       	pop	r28
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	08 95       	ret

0000049e <emv_refresh>:
	
}

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;
     49e:	80 91 05 01 	lds	r24, 0x0105
     4a2:	90 91 06 01 	lds	r25, 0x0106
     4a6:	20 e1       	ldi	r18, 0x10	; 16
	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
		else DATA_LOW;
		buffer <<=1;
		_delay_us(10);
		SCK_HIGH; 
     4a8:	e5 e6       	ldi	r30, 0x65	; 101
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
		if(buffer & 0x8000) DATA_HIGH;
     4ac:	99 23       	and	r25, r25
     4ae:	14 f4       	brge	.+4      	; 0x4b4 <emv_refresh+0x16>
     4b0:	c5 9a       	sbi	0x18, 5	; 24
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <emv_refresh+0x18>
		else DATA_LOW;
     4b4:	c5 98       	cbi	0x18, 5	; 24
		buffer <<=1;
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	38 e1       	ldi	r19, 0x18	; 24
     4bc:	3a 95       	dec	r19
     4be:	f1 f7       	brne	.-4      	; 0x4bc <emv_refresh+0x1e>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <emv_refresh+0x24>
		_delay_us(10);
		SCK_HIGH; 
     4c2:	30 81       	ld	r19, Z
     4c4:	38 60       	ori	r19, 0x08	; 8
     4c6:	30 83       	st	Z, r19
     4c8:	38 e1       	ldi	r19, 0x18	; 24
     4ca:	3a 95       	dec	r19
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <emv_refresh+0x2c>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <emv_refresh+0x32>
		_delay_us(10);
		SCK_LOW;
     4d0:	30 81       	ld	r19, Z
     4d2:	37 7f       	andi	r19, 0xF7	; 247
     4d4:	30 83       	st	Z, r19
     4d6:	38 e1       	ldi	r19, 0x18	; 24
     4d8:	3a 95       	dec	r19
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <emv_refresh+0x3a>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <emv_refresh+0x40>
     4de:	21 50       	subi	r18, 0x01	; 1

void emv_refresh(void){
	uint8_t i=0;
	uint16_t buffer = emv_switches;

	for(i=0;i<16;i++){
     4e0:	29 f7       	brne	.-54     	; 0x4ac <emv_refresh+0xe>
		SCK_HIGH; 
		_delay_us(10);
		SCK_LOW;
		_delay_us(10);
	}
	RCK_HIGH;
     4e2:	c7 9a       	sbi	0x18, 7	; 24
     4e4:	88 e1       	ldi	r24, 0x18	; 24
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <emv_refresh+0x48>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <emv_refresh+0x4e>
	_delay_us(10);
	RCK_LOW;
     4ec:	c7 98       	cbi	0x18, 7	; 24
     4ee:	08 95       	ret

000004f0 <emv_ports_init>:
uint16_t emv_control_word = 0xffff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
     4f0:	87 b3       	in	r24, 0x17	; 23
     4f2:	80 6e       	ori	r24, 0xE0	; 224
     4f4:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
     4f6:	e4 e6       	ldi	r30, 0x64	; 100
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	88 61       	ori	r24, 0x18	; 24
     4fe:	80 83       	st	Z, r24
	SCK_LOW;
     500:	e5 e6       	ldi	r30, 0x65	; 101
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	87 7f       	andi	r24, 0xF7	; 247
     508:	80 83       	st	Z, r24
	RCK_LOW;
     50a:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
     50c:	80 81       	ld	r24, Z
     50e:	80 61       	ori	r24, 0x10	; 16
     510:	80 83       	st	Z, r24
	OEn_LOW;
     512:	c6 98       	cbi	0x18, 6	; 24

	emv_refresh();
     514:	c4 cf       	rjmp	.-120    	; 0x49e <emv_refresh>
     516:	08 95       	ret

00000518 <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
     518:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
     51a:	e1 e6       	ldi	r30, 0x61	; 97
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	88 60       	ori	r24, 0x08	; 8
     522:	80 83       	st	Z, r24
	DDRG |=_BV(0);
     524:	e4 e6       	ldi	r30, 0x64	; 100
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
     52e:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
     530:	e2 e6       	ldi	r30, 0x62	; 98
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	88 60       	ori	r24, 0x08	; 8
     538:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
     53a:	e5 e6       	ldi	r30, 0x65	; 101
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	8e 7f       	andi	r24, 0xFE	; 254
     542:	80 83       	st	Z, r24
     544:	08 95       	ret

00000546 <Alarm>:
	
}

void Alarm(bool state){
	if(state==ALARM_ON){
     546:	88 23       	and	r24, r24
     548:	11 f0       	breq	.+4      	; 0x54e <Alarm+0x8>
		PORTB &=~_BV(0);
     54a:	c0 98       	cbi	0x18, 0	; 24
     54c:	08 95       	ret
		//PORTG |=_BV(0);
	}
	else{
		PORTB |= _BV(0);
     54e:	c0 9a       	sbi	0x18, 0	; 24
     550:	08 95       	ret

00000552 <DrawScreen>:
//	CurrentState				UP_NEXT					DOWN_NEXT						LEFT_NEXT					RIGHT_NEXT					ENT_NEXT					UP_ACTION		DOWN_ACTION			LEFT_ACTION		RIGHT_ACTION		ENT_ACTION		TIMER_ACTI
	  


	void DrawScreen(void){
		lcd12864_clear();
     552:	83 d6       	rcall	.+3334   	; 0x125a <lcd12864_clear>
		lcd12864_set_pos(0,1);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	8a d6       	rcall	.+3348   	; 0x126e <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
     55a:	80 91 a6 05 	lds	r24, 0x05A6
     55e:	90 91 a7 05 	lds	r25, 0x05A7
     562:	a0 d6       	rcall	.+3392   	; 0x12a4 <lcd12864_write_str>
		lcd12864_set_pos(0,2);
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	82 d6       	rcall	.+3332   	; 0x126e <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
     56a:	80 91 a8 05 	lds	r24, 0x05A8
     56e:	90 91 a9 05 	lds	r25, 0x05A9
     572:	98 d6       	rcall	.+3376   	; 0x12a4 <lcd12864_write_str>
		lcd12864_set_pos(0,3);
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	7a d6       	rcall	.+3316   	; 0x126e <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
     57a:	80 91 aa 05 	lds	r24, 0x05AA
     57e:	90 91 ab 05 	lds	r25, 0x05AB
     582:	90 d6       	rcall	.+3360   	; 0x12a4 <lcd12864_write_str>
		lcd12864_set_pos(0,4);
     584:	64 e0       	ldi	r22, 0x04	; 4
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	72 d6       	rcall	.+3300   	; 0x126e <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
     58a:	80 91 ac 05 	lds	r24, 0x05AC
     58e:	90 91 ad 05 	lds	r25, 0x05AD
     592:	88 d6       	rcall	.+3344   	; 0x12a4 <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
     594:	80 91 ae 05 	lds	r24, 0x05AE
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	51 f0       	breq	.+20     	; 0x5b0 <DrawScreen+0x5e>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	71 f0       	breq	.+28     	; 0x5bc <DrawScreen+0x6a>
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	89 f4       	brne	.+34     	; 0x5c6 <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	62 d6       	rcall	.+3268   	; 0x126e <lcd12864_set_pos>
				lcd12864_write_char('*');
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	79 d6       	rcall	.+3314   	; 0x12a0 <lcd12864_write_char>
				break;
     5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <DrawScreen+0x74>
			case 2:
				lcd12864_set_pos(0,2);
     5b0:	62 e0       	ldi	r22, 0x02	; 2
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	5c d6       	rcall	.+3256   	; 0x126e <lcd12864_set_pos>
				lcd12864_write_char('*');
     5b6:	8a e2       	ldi	r24, 0x2A	; 42
     5b8:	73 d6       	rcall	.+3302   	; 0x12a0 <lcd12864_write_char>
				break;
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <DrawScreen+0x74>
			case 3:
				lcd12864_set_pos(0,3);
     5bc:	63 e0       	ldi	r22, 0x03	; 3
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	56 d6       	rcall	.+3244   	; 0x126e <lcd12864_set_pos>
				lcd12864_write_char('*');
     5c2:	8a e2       	ldi	r24, 0x2A	; 42
     5c4:	6d d6       	rcall	.+3290   	; 0x12a0 <lcd12864_write_char>
				break;
			default:
				break;	
		}
		lcd12864_send_cmd(0x36);
     5c6:	86 e3       	ldi	r24, 0x36	; 54
     5c8:	38 d6       	rcall	.+3184   	; 0x123a <lcd12864_send_cmd>
		lcd12864_send_cmd(0x30);
     5ca:	80 e3       	ldi	r24, 0x30	; 48
     5cc:	36 c6       	rjmp	.+3180   	; 0x123a <lcd12864_send_cmd>
     5ce:	08 95       	ret

000005d0 <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
     5d0:	20 91 07 01 	lds	r18, 0x0107
     5d4:	30 91 08 01 	lds	r19, 0x0108
     5d8:	28 17       	cp	r18, r24
     5da:	39 07       	cpc	r19, r25
     5dc:	59 f0       	breq	.+22     	; 0x5f4 <FindState+0x24>
     5de:	ef e1       	ldi	r30, 0x1F	; 31
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	21 e0       	ldi	r18, 0x01	; 1
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	b9 01       	movw	r22, r18
     5e8:	40 81       	ld	r20, Z
     5ea:	51 81       	ldd	r21, Z+1	; 0x01
     5ec:	48 17       	cp	r20, r24
     5ee:	59 07       	cpc	r21, r25
     5f0:	91 f4       	brne	.+36     	; 0x616 <FindState+0x46>
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <FindState+0x28>
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
     5f8:	cb 01       	movw	r24, r22
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	68 0f       	add	r22, r24
     600:	79 1f       	adc	r23, r25
     602:	cb 01       	movw	r24, r22
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	89 5f       	subi	r24, 0xF9	; 249
     612:	9e 4f       	sbci	r25, 0xFE	; 254
     614:	08 95       	ret
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	78 96       	adiw	r30, 0x18	; 24
		lcd12864_send_cmd(0x30);
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
     61c:	2d 31       	cpi	r18, 0x1D	; 29
     61e:	31 05       	cpc	r19, r1
     620:	11 f7       	brne	.-60     	; 0x5e6 <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     626:	08 95       	ret

00000628 <State_Update>:
		lcd12864_SetWhite(6,4,4,0);
		lcd12864_SetWhite(12,4,4,0);
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
     628:	e0 91 a1 05 	lds	r30, 0x05A1
     62c:	f0 91 a2 05 	lds	r31, 0x05A2
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	20 e2       	ldi	r18, 0x20	; 32
     638:	92 07       	cpc	r25, r18
     63a:	09 f4       	brne	.+2      	; 0x63e <State_Update+0x16>
     63c:	a4 c1       	rjmp	.+840    	; 0x986 <State_Update+0x35e>
     63e:	78 f5       	brcc	.+94     	; 0x69e <State_Update+0x76>
     640:	84 30       	cpi	r24, 0x04	; 4
     642:	20 e1       	ldi	r18, 0x10	; 16
     644:	92 07       	cpc	r25, r18
     646:	09 f4       	brne	.+2      	; 0x64a <State_Update+0x22>
     648:	ea c0       	rjmp	.+468    	; 0x81e <State_Update+0x1f6>
     64a:	a0 f4       	brcc	.+40     	; 0x674 <State_Update+0x4c>
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	20 e1       	ldi	r18, 0x10	; 16
     650:	92 07       	cpc	r25, r18
     652:	09 f4       	brne	.+2      	; 0x656 <State_Update+0x2e>
     654:	78 c0       	rjmp	.+240    	; 0x746 <State_Update+0x11e>
     656:	20 f4       	brcc	.+8      	; 0x660 <State_Update+0x38>
     658:	89 2b       	or	r24, r25
     65a:	09 f4       	brne	.+2      	; 0x65e <State_Update+0x36>
     65c:	51 c0       	rjmp	.+162    	; 0x700 <State_Update+0xd8>
     65e:	08 95       	ret
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	20 e1       	ldi	r18, 0x10	; 16
     664:	92 07       	cpc	r25, r18
     666:	09 f4       	brne	.+2      	; 0x66a <State_Update+0x42>
     668:	92 c0       	rjmp	.+292    	; 0x78e <State_Update+0x166>
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	90 41       	sbci	r25, 0x10	; 16
     66e:	09 f4       	brne	.+2      	; 0x672 <State_Update+0x4a>
     670:	b2 c0       	rjmp	.+356    	; 0x7d6 <State_Update+0x1ae>
     672:	08 95       	ret
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	20 e2       	ldi	r18, 0x20	; 32
     678:	92 07       	cpc	r25, r18
     67a:	09 f4       	brne	.+2      	; 0x67e <State_Update+0x56>
     67c:	18 c1       	rjmp	.+560    	; 0x8ae <State_Update+0x286>
     67e:	28 f4       	brcc	.+10     	; 0x68a <State_Update+0x62>
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	90 41       	sbci	r25, 0x10	; 16
     684:	09 f4       	brne	.+2      	; 0x688 <State_Update+0x60>
     686:	ef c0       	rjmp	.+478    	; 0x866 <State_Update+0x23e>
     688:	08 95       	ret
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	20 e2       	ldi	r18, 0x20	; 32
     68e:	92 07       	cpc	r25, r18
     690:	09 f4       	brne	.+2      	; 0x694 <State_Update+0x6c>
     692:	31 c1       	rjmp	.+610    	; 0x8f6 <State_Update+0x2ce>
     694:	83 30       	cpi	r24, 0x03	; 3
     696:	90 42       	sbci	r25, 0x20	; 32
     698:	09 f4       	brne	.+2      	; 0x69c <State_Update+0x74>
     69a:	51 c1       	rjmp	.+674    	; 0x93e <State_Update+0x316>
     69c:	08 95       	ret
     69e:	83 30       	cpi	r24, 0x03	; 3
     6a0:	20 e3       	ldi	r18, 0x30	; 48
     6a2:	92 07       	cpc	r25, r18
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <State_Update+0x80>
     6a6:	23 c2       	rjmp	.+1094   	; 0xaee <State_Update+0x4c6>
     6a8:	88 f4       	brcc	.+34     	; 0x6cc <State_Update+0xa4>
     6aa:	86 30       	cpi	r24, 0x06	; 6
     6ac:	20 e2       	ldi	r18, 0x20	; 32
     6ae:	92 07       	cpc	r25, r18
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <State_Update+0x8c>
     6b2:	b1 c1       	rjmp	.+866    	; 0xa16 <State_Update+0x3ee>
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <State_Update+0x90>
     6b6:	8b c1       	rjmp	.+790    	; 0x9ce <State_Update+0x3a6>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	20 e3       	ldi	r18, 0x30	; 48
     6bc:	92 07       	cpc	r25, r18
     6be:	09 f4       	brne	.+2      	; 0x6c2 <State_Update+0x9a>
     6c0:	ce c1       	rjmp	.+924    	; 0xa5e <State_Update+0x436>
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	90 43       	sbci	r25, 0x30	; 48
     6c6:	09 f4       	brne	.+2      	; 0x6ca <State_Update+0xa2>
     6c8:	ee c1       	rjmp	.+988    	; 0xaa6 <State_Update+0x47e>
     6ca:	08 95       	ret
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	21 e3       	ldi	r18, 0x31	; 49
     6d0:	92 07       	cpc	r25, r18
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <State_Update+0xae>
     6d4:	78 c2       	rjmp	.+1264   	; 0xbc6 <State_Update+0x59e>
     6d6:	50 f4       	brcc	.+20     	; 0x6ec <State_Update+0xc4>
     6d8:	84 30       	cpi	r24, 0x04	; 4
     6da:	20 e3       	ldi	r18, 0x30	; 48
     6dc:	92 07       	cpc	r25, r18
     6de:	09 f4       	brne	.+2      	; 0x6e2 <State_Update+0xba>
     6e0:	2a c2       	rjmp	.+1108   	; 0xb36 <State_Update+0x50e>
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	90 43       	sbci	r25, 0x30	; 48
     6e6:	09 f4       	brne	.+2      	; 0x6ea <State_Update+0xc2>
     6e8:	4a c2       	rjmp	.+1172   	; 0xb7e <State_Update+0x556>
     6ea:	08 95       	ret
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	21 e3       	ldi	r18, 0x31	; 49
     6f0:	92 07       	cpc	r25, r18
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <State_Update+0xce>
     6f4:	99 c2       	rjmp	.+1330   	; 0xc28 <State_Update+0x600>
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	91 43       	sbci	r25, 0x31	; 49
     6fa:	09 f4       	brne	.+2      	; 0x6fe <State_Update+0xd6>
     6fc:	c6 c2       	rjmp	.+1420   	; 0xc8a <State_Update+0x662>
     6fe:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
     700:	80 91 bf 03 	lds	r24, 0x03BF
     704:	90 91 c0 03 	lds	r25, 0x03C0
     708:	90 93 a7 05 	sts	0x05A7, r25
     70c:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
     710:	80 91 c1 03 	lds	r24, 0x03C1
     714:	90 91 c2 03 	lds	r25, 0x03C2
     718:	90 93 a9 05 	sts	0x05A9, r25
     71c:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
     720:	80 91 c3 03 	lds	r24, 0x03C3
     724:	90 91 c4 03 	lds	r25, 0x03C4
     728:	90 93 ab 05 	sts	0x05AB, r25
     72c:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
     730:	80 91 c5 03 	lds	r24, 0x03C5
     734:	90 91 c6 03 	lds	r25, 0x03C6
     738:	90 93 ad 05 	sts	0x05AD, r25
     73c:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 0;
     740:	10 92 ae 05 	sts	0x05AE, r1
				break;
     744:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
     746:	80 91 c9 03 	lds	r24, 0x03C9
     74a:	90 91 ca 03 	lds	r25, 0x03CA
     74e:	90 93 a7 05 	sts	0x05A7, r25
     752:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     756:	80 91 cb 03 	lds	r24, 0x03CB
     75a:	90 91 cc 03 	lds	r25, 0x03CC
     75e:	90 93 a9 05 	sts	0x05A9, r25
     762:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     766:	80 91 cd 03 	lds	r24, 0x03CD
     76a:	90 91 ce 03 	lds	r25, 0x03CE
     76e:	90 93 ab 05 	sts	0x05AB, r25
     772:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     776:	80 91 f7 03 	lds	r24, 0x03F7
     77a:	90 91 f8 03 	lds	r25, 0x03F8
     77e:	90 93 ad 05 	sts	0x05AD, r25
     782:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 ae 05 	sts	0x05AE, r24
				break;
     78c:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     78e:	80 91 c9 03 	lds	r24, 0x03C9
     792:	90 91 ca 03 	lds	r25, 0x03CA
     796:	90 93 a7 05 	sts	0x05A7, r25
     79a:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     79e:	80 91 cb 03 	lds	r24, 0x03CB
     7a2:	90 91 cc 03 	lds	r25, 0x03CC
     7a6:	90 93 a9 05 	sts	0x05A9, r25
     7aa:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     7ae:	80 91 cd 03 	lds	r24, 0x03CD
     7b2:	90 91 ce 03 	lds	r25, 0x03CE
     7b6:	90 93 ab 05 	sts	0x05AB, r25
     7ba:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     7be:	80 91 f7 03 	lds	r24, 0x03F7
     7c2:	90 91 f8 03 	lds	r25, 0x03F8
     7c6:	90 93 ad 05 	sts	0x05AD, r25
     7ca:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	80 93 ae 05 	sts	0x05AE, r24
				break;
     7d4:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
     7d6:	80 91 c9 03 	lds	r24, 0x03C9
     7da:	90 91 ca 03 	lds	r25, 0x03CA
     7de:	90 93 a7 05 	sts	0x05A7, r25
     7e2:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
     7e6:	80 91 cb 03 	lds	r24, 0x03CB
     7ea:	90 91 cc 03 	lds	r25, 0x03CC
     7ee:	90 93 a9 05 	sts	0x05A9, r25
     7f2:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
     7f6:	80 91 cd 03 	lds	r24, 0x03CD
     7fa:	90 91 ce 03 	lds	r25, 0x03CE
     7fe:	90 93 ab 05 	sts	0x05AB, r25
     802:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     806:	80 91 f7 03 	lds	r24, 0x03F7
     80a:	90 91 f8 03 	lds	r25, 0x03F8
     80e:	90 93 ad 05 	sts	0x05AD, r25
     812:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 3;
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	80 93 ae 05 	sts	0x05AE, r24
				break;
     81c:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     81e:	80 91 cf 03 	lds	r24, 0x03CF
     822:	90 91 d0 03 	lds	r25, 0x03D0
     826:	90 93 a7 05 	sts	0x05A7, r25
     82a:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     82e:	80 91 d1 03 	lds	r24, 0x03D1
     832:	90 91 d2 03 	lds	r25, 0x03D2
     836:	90 93 a9 05 	sts	0x05A9, r25
     83a:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     83e:	80 91 bf 03 	lds	r24, 0x03BF
     842:	90 91 c0 03 	lds	r25, 0x03C0
     846:	90 93 ab 05 	sts	0x05AB, r25
     84a:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     84e:	80 91 f7 03 	lds	r24, 0x03F7
     852:	90 91 f8 03 	lds	r25, 0x03F8
     856:	90 93 ad 05 	sts	0x05AD, r25
     85a:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 ae 05 	sts	0x05AE, r24
				break;
     864:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
     866:	80 91 cf 03 	lds	r24, 0x03CF
     86a:	90 91 d0 03 	lds	r25, 0x03D0
     86e:	90 93 a7 05 	sts	0x05A7, r25
     872:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
     876:	80 91 d1 03 	lds	r24, 0x03D1
     87a:	90 91 d2 03 	lds	r25, 0x03D2
     87e:	90 93 a9 05 	sts	0x05A9, r25
     882:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     886:	80 91 bf 03 	lds	r24, 0x03BF
     88a:	90 91 c0 03 	lds	r25, 0x03C0
     88e:	90 93 ab 05 	sts	0x05AB, r25
     892:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     896:	80 91 f7 03 	lds	r24, 0x03F7
     89a:	90 91 f8 03 	lds	r25, 0x03F8
     89e:	90 93 ad 05 	sts	0x05AD, r25
     8a2:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	80 93 ae 05 	sts	0x05AE, r24
				break;
     8ac:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8ae:	80 91 d3 03 	lds	r24, 0x03D3
     8b2:	90 91 d4 03 	lds	r25, 0x03D4
     8b6:	90 93 a7 05 	sts	0x05A7, r25
     8ba:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     8be:	80 91 d5 03 	lds	r24, 0x03D5
     8c2:	90 91 d6 03 	lds	r25, 0x03D6
     8c6:	90 93 a9 05 	sts	0x05A9, r25
     8ca:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     8ce:	80 91 d7 03 	lds	r24, 0x03D7
     8d2:	90 91 d8 03 	lds	r25, 0x03D8
     8d6:	90 93 ab 05 	sts	0x05AB, r25
     8da:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     8de:	80 91 f7 03 	lds	r24, 0x03F7
     8e2:	90 91 f8 03 	lds	r25, 0x03F8
     8e6:	90 93 ad 05 	sts	0x05AD, r25
     8ea:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 ae 05 	sts	0x05AE, r24
				break;
     8f4:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     8f6:	80 91 d3 03 	lds	r24, 0x03D3
     8fa:	90 91 d4 03 	lds	r25, 0x03D4
     8fe:	90 93 a7 05 	sts	0x05A7, r25
     902:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     906:	80 91 d5 03 	lds	r24, 0x03D5
     90a:	90 91 d6 03 	lds	r25, 0x03D6
     90e:	90 93 a9 05 	sts	0x05A9, r25
     912:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     916:	80 91 d7 03 	lds	r24, 0x03D7
     91a:	90 91 d8 03 	lds	r25, 0x03D8
     91e:	90 93 ab 05 	sts	0x05AB, r25
     922:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     926:	80 91 f7 03 	lds	r24, 0x03F7
     92a:	90 91 f8 03 	lds	r25, 0x03F8
     92e:	90 93 ad 05 	sts	0x05AD, r25
     932:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	80 93 ae 05 	sts	0x05AE, r24
				break;
     93c:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
     93e:	80 91 d3 03 	lds	r24, 0x03D3
     942:	90 91 d4 03 	lds	r25, 0x03D4
     946:	90 93 a7 05 	sts	0x05A7, r25
     94a:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
     94e:	80 91 d5 03 	lds	r24, 0x03D5
     952:	90 91 d6 03 	lds	r25, 0x03D6
     956:	90 93 a9 05 	sts	0x05A9, r25
     95a:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
     95e:	80 91 d7 03 	lds	r24, 0x03D7
     962:	90 91 d8 03 	lds	r25, 0x03D8
     966:	90 93 ab 05 	sts	0x05AB, r25
     96a:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     96e:	80 91 f7 03 	lds	r24, 0x03F7
     972:	90 91 f8 03 	lds	r25, 0x03F8
     976:	90 93 ad 05 	sts	0x05AD, r25
     97a:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 3;
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	80 93 ae 05 	sts	0x05AE, r24
				break;
     984:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     986:	80 91 d9 03 	lds	r24, 0x03D9
     98a:	90 91 da 03 	lds	r25, 0x03DA
     98e:	90 93 a7 05 	sts	0x05A7, r25
     992:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     996:	80 91 db 03 	lds	r24, 0x03DB
     99a:	90 91 dc 03 	lds	r25, 0x03DC
     99e:	90 93 a9 05 	sts	0x05A9, r25
     9a2:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9a6:	80 91 dd 03 	lds	r24, 0x03DD
     9aa:	90 91 de 03 	lds	r25, 0x03DE
     9ae:	90 93 ab 05 	sts	0x05AB, r25
     9b2:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9b6:	80 91 f7 03 	lds	r24, 0x03F7
     9ba:	90 91 f8 03 	lds	r25, 0x03F8
     9be:	90 93 ad 05 	sts	0x05AD, r25
     9c2:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 ae 05 	sts	0x05AE, r24
				break;
     9cc:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     9ce:	80 91 d9 03 	lds	r24, 0x03D9
     9d2:	90 91 da 03 	lds	r25, 0x03DA
     9d6:	90 93 a7 05 	sts	0x05A7, r25
     9da:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     9de:	80 91 db 03 	lds	r24, 0x03DB
     9e2:	90 91 dc 03 	lds	r25, 0x03DC
     9e6:	90 93 a9 05 	sts	0x05A9, r25
     9ea:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     9ee:	80 91 dd 03 	lds	r24, 0x03DD
     9f2:	90 91 de 03 	lds	r25, 0x03DE
     9f6:	90 93 ab 05 	sts	0x05AB, r25
     9fa:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     9fe:	80 91 f7 03 	lds	r24, 0x03F7
     a02:	90 91 f8 03 	lds	r25, 0x03F8
     a06:	90 93 ad 05 	sts	0x05AD, r25
     a0a:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 ae 05 	sts	0x05AE, r24
				break;
     a14:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
     a16:	80 91 d9 03 	lds	r24, 0x03D9
     a1a:	90 91 da 03 	lds	r25, 0x03DA
     a1e:	90 93 a7 05 	sts	0x05A7, r25
     a22:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
     a26:	80 91 db 03 	lds	r24, 0x03DB
     a2a:	90 91 dc 03 	lds	r25, 0x03DC
     a2e:	90 93 a9 05 	sts	0x05A9, r25
     a32:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
     a36:	80 91 dd 03 	lds	r24, 0x03DD
     a3a:	90 91 de 03 	lds	r25, 0x03DE
     a3e:	90 93 ab 05 	sts	0x05AB, r25
     a42:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a46:	80 91 f7 03 	lds	r24, 0x03F7
     a4a:	90 91 f8 03 	lds	r25, 0x03F8
     a4e:	90 93 ad 05 	sts	0x05AD, r25
     a52:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 3;
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	80 93 ae 05 	sts	0x05AE, r24
				break;
     a5c:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     a5e:	80 91 df 03 	lds	r24, 0x03DF
     a62:	90 91 e0 03 	lds	r25, 0x03E0
     a66:	90 93 a7 05 	sts	0x05A7, r25
     a6a:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     a6e:	80 91 e1 03 	lds	r24, 0x03E1
     a72:	90 91 e2 03 	lds	r25, 0x03E2
     a76:	90 93 a9 05 	sts	0x05A9, r25
     a7a:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     a7e:	80 91 e3 03 	lds	r24, 0x03E3
     a82:	90 91 e4 03 	lds	r25, 0x03E4
     a86:	90 93 ab 05 	sts	0x05AB, r25
     a8a:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     a8e:	80 91 f7 03 	lds	r24, 0x03F7
     a92:	90 91 f8 03 	lds	r25, 0x03F8
     a96:	90 93 ad 05 	sts	0x05AD, r25
     a9a:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1; 
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 ae 05 	sts	0x05AE, r24
				break;
     aa4:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     aa6:	80 91 df 03 	lds	r24, 0x03DF
     aaa:	90 91 e0 03 	lds	r25, 0x03E0
     aae:	90 93 a7 05 	sts	0x05A7, r25
     ab2:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     ab6:	80 91 e1 03 	lds	r24, 0x03E1
     aba:	90 91 e2 03 	lds	r25, 0x03E2
     abe:	90 93 a9 05 	sts	0x05A9, r25
     ac2:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     ac6:	80 91 e3 03 	lds	r24, 0x03E3
     aca:	90 91 e4 03 	lds	r25, 0x03E4
     ace:	90 93 ab 05 	sts	0x05AB, r25
     ad2:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     ad6:	80 91 f7 03 	lds	r24, 0x03F7
     ada:	90 91 f8 03 	lds	r25, 0x03F8
     ade:	90 93 ad 05 	sts	0x05AD, r25
     ae2:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	80 93 ae 05 	sts	0x05AE, r24
				break;
     aec:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
     aee:	80 91 df 03 	lds	r24, 0x03DF
     af2:	90 91 e0 03 	lds	r25, 0x03E0
     af6:	90 93 a7 05 	sts	0x05A7, r25
     afa:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
     afe:	80 91 e1 03 	lds	r24, 0x03E1
     b02:	90 91 e2 03 	lds	r25, 0x03E2
     b06:	90 93 a9 05 	sts	0x05A9, r25
     b0a:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
     b0e:	80 91 e3 03 	lds	r24, 0x03E3
     b12:	90 91 e4 03 	lds	r25, 0x03E4
     b16:	90 93 ab 05 	sts	0x05AB, r25
     b1a:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b1e:	80 91 f7 03 	lds	r24, 0x03F7
     b22:	90 91 f8 03 	lds	r25, 0x03F8
     b26:	90 93 ad 05 	sts	0x05AD, r25
     b2a:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 3;
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	80 93 ae 05 	sts	0x05AE, r24
				break;
     b34:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b36:	80 91 e5 03 	lds	r24, 0x03E5
     b3a:	90 91 e6 03 	lds	r25, 0x03E6
     b3e:	90 93 a7 05 	sts	0x05A7, r25
     b42:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b46:	80 91 e7 03 	lds	r24, 0x03E7
     b4a:	90 91 e8 03 	lds	r25, 0x03E8
     b4e:	90 93 a9 05 	sts	0x05A9, r25
     b52:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b56:	80 91 bf 03 	lds	r24, 0x03BF
     b5a:	90 91 c0 03 	lds	r25, 0x03C0
     b5e:	90 93 ab 05 	sts	0x05AB, r25
     b62:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     b66:	80 91 f7 03 	lds	r24, 0x03F7
     b6a:	90 91 f8 03 	lds	r25, 0x03F8
     b6e:	90 93 ad 05 	sts	0x05AD, r25
     b72:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 ae 05 	sts	0x05AE, r24
				break;
     b7c:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
     b7e:	80 91 e5 03 	lds	r24, 0x03E5
     b82:	90 91 e6 03 	lds	r25, 0x03E6
     b86:	90 93 a7 05 	sts	0x05A7, r25
     b8a:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
     b8e:	80 91 e7 03 	lds	r24, 0x03E7
     b92:	90 91 e8 03 	lds	r25, 0x03E8
     b96:	90 93 a9 05 	sts	0x05A9, r25
     b9a:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
     b9e:	80 91 bf 03 	lds	r24, 0x03BF
     ba2:	90 91 c0 03 	lds	r25, 0x03C0
     ba6:	90 93 ab 05 	sts	0x05AB, r25
     baa:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     bae:	80 91 f7 03 	lds	r24, 0x03F7
     bb2:	90 91 f8 03 	lds	r25, 0x03F8
     bb6:	90 93 ad 05 	sts	0x05AD, r25
     bba:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index = 2;
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	80 93 ae 05 	sts	0x05AE, r24
				break;
     bc4:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
     bc6:	80 91 00 01 	lds	r24, 0x0100
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	49 f4       	brne	.+18     	; 0xbe0 <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
     bce:	80 91 e9 03 	lds	r24, 0x03E9
     bd2:	90 91 ea 03 	lds	r25, 0x03EA
     bd6:	90 93 a7 05 	sts	0x05A7, r25
     bda:	80 93 a6 05 	sts	0x05A6, r24
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
     be0:	80 91 eb 03 	lds	r24, 0x03EB
     be4:	90 91 ec 03 	lds	r25, 0x03EC
     be8:	90 93 a7 05 	sts	0x05A7, r25
     bec:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     bf0:	80 91 ed 03 	lds	r24, 0x03ED
     bf4:	90 91 ee 03 	lds	r25, 0x03EE
     bf8:	90 93 a9 05 	sts	0x05A9, r25
     bfc:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     c00:	80 91 ef 03 	lds	r24, 0x03EF
     c04:	90 91 f0 03 	lds	r25, 0x03F0
     c08:	90 93 ab 05 	sts	0x05AB, r25
     c0c:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c10:	80 91 f7 03 	lds	r24, 0x03F7
     c14:	90 91 f8 03 	lds	r25, 0x03F8
     c18:	90 93 ad 05 	sts	0x05AD, r25
     c1c:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index=1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 ae 05 	sts	0x05AE, r24
				break;
     c26:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
     c28:	80 91 00 01 	lds	r24, 0x0100
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	49 f4       	brne	.+18     	; 0xc42 <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c30:	80 91 e9 03 	lds	r24, 0x03E9
     c34:	90 91 ea 03 	lds	r25, 0x03EA
     c38:	90 93 a7 05 	sts	0x05A7, r25
     c3c:	80 93 a6 05 	sts	0x05A6, r24
     c40:	08 c0       	rjmp	.+16     	; 0xc52 <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     c42:	80 91 eb 03 	lds	r24, 0x03EB
     c46:	90 91 ec 03 	lds	r25, 0x03EC
     c4a:	90 93 a7 05 	sts	0x05A7, r25
     c4e:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     c52:	80 91 ed 03 	lds	r24, 0x03ED
     c56:	90 91 ee 03 	lds	r25, 0x03EE
     c5a:	90 93 a9 05 	sts	0x05A9, r25
     c5e:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     c62:	80 91 ef 03 	lds	r24, 0x03EF
     c66:	90 91 f0 03 	lds	r25, 0x03F0
     c6a:	90 93 ab 05 	sts	0x05AB, r25
     c6e:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     c72:	80 91 f7 03 	lds	r24, 0x03F7
     c76:	90 91 f8 03 	lds	r25, 0x03F8
     c7a:	90 93 ad 05 	sts	0x05AD, r25
     c7e:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index=2;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	80 93 ae 05 	sts	0x05AE, r24
				break;
     c88:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
     c8a:	80 91 00 01 	lds	r24, 0x0100
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	49 f4       	brne	.+18     	; 0xca4 <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
     c92:	80 91 e9 03 	lds	r24, 0x03E9
     c96:	90 91 ea 03 	lds	r25, 0x03EA
     c9a:	90 93 a7 05 	sts	0x05A7, r25
     c9e:	80 93 a6 05 	sts	0x05A6, r24
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
     ca4:	80 91 eb 03 	lds	r24, 0x03EB
     ca8:	90 91 ec 03 	lds	r25, 0x03EC
     cac:	90 93 a7 05 	sts	0x05A7, r25
     cb0:	80 93 a6 05 	sts	0x05A6, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
     cb4:	80 91 ed 03 	lds	r24, 0x03ED
     cb8:	90 91 ee 03 	lds	r25, 0x03EE
     cbc:	90 93 a9 05 	sts	0x05A9, r25
     cc0:	80 93 a8 05 	sts	0x05A8, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
     cc4:	80 91 ef 03 	lds	r24, 0x03EF
     cc8:	90 91 f0 03 	lds	r25, 0x03F0
     ccc:	90 93 ab 05 	sts	0x05AB, r25
     cd0:	80 93 aa 05 	sts	0x05AA, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
     cd4:	80 91 f7 03 	lds	r24, 0x03F7
     cd8:	90 91 f8 03 	lds	r25, 0x03F8
     cdc:	90 93 ad 05 	sts	0x05AD, r25
     ce0:	80 93 ac 05 	sts	0x05AC, r24
				SYS_Screen_Buffer.white_index=3;
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	80 93 ae 05 	sts	0x05AE, r24
     cea:	08 95       	ret

00000cec <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	6f dc       	rcall	.-1826   	; 0x5d0 <FindState>
     cf2:	90 93 a2 05 	sts	0x05A2, r25
     cf6:	80 93 a1 05 	sts	0x05A1, r24
	
		Current_TimerFunc = SYS_State->Timer_Action;
     cfa:	dc 01       	movw	r26, r24
     cfc:	56 96       	adiw	r26, 0x16	; 22
     cfe:	ed 91       	ld	r30, X+
     d00:	fc 91       	ld	r31, X
     d02:	57 97       	sbiw	r26, 0x17	; 23
     d04:	f0 93 a0 05 	sts	0x05A0, r31
     d08:	e0 93 9f 05 	sts	0x059F, r30
		Current_TimerFunc();
     d0c:	09 95       	icall
		Timer0_RegisterCallbackFunction(SYS_State->Timer_Action,1000);
     d0e:	e0 91 a1 05 	lds	r30, 0x05A1
     d12:	f0 91 a2 05 	lds	r31, 0x05A2
     d16:	68 ee       	ldi	r22, 0xE8	; 232
     d18:	73 e0       	ldi	r23, 0x03	; 3
     d1a:	86 89       	ldd	r24, Z+22	; 0x16
     d1c:	97 89       	ldd	r25, Z+23	; 0x17
     d1e:	48 d1       	rcall	.+656    	; 0xfb0 <Timer0_RegisterCallbackFunction>
		State_Update();
     d20:	83 dc       	rcall	.-1786   	; 0x628 <State_Update>
		DrawScreen();
     d22:	17 dc       	rcall	.-2002   	; 0x552 <DrawScreen>
		lcd12864_SetWhite(0,4,4,0);
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	44 e0       	ldi	r20, 0x04	; 4
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	d7 d2       	rcall	.+1454   	; 0x12dc <lcd12864_SetWhite>
		lcd12864_SetWhite(6,4,4,0);
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	44 e0       	ldi	r20, 0x04	; 4
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	d2 d2       	rcall	.+1444   	; 0x12dc <lcd12864_SetWhite>
		lcd12864_SetWhite(12,4,4,0);
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	44 e0       	ldi	r20, 0x04	; 4
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	cd c2       	rjmp	.+1434   	; 0x12dc <lcd12864_SetWhite>
     d42:	08 95       	ret

00000d44 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
     d44:	45 d2       	rcall	.+1162   	; 0x11d0 <getkey>
		switch(key){
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	71 f0       	breq	.+28     	; 0xd66 <Menu_Poll+0x22>
     d4a:	38 f4       	brcc	.+14     	; 0xd5a <Menu_Poll+0x16>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Menu_Poll+0xe>
     d50:	3a c0       	rjmp	.+116    	; 0xdc6 <Menu_Poll+0x82>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f4       	brne	.+2      	; 0xd58 <Menu_Poll+0x14>
     d56:	4f c0       	rjmp	.+158    	; 0xdf6 <Menu_Poll+0xb2>
     d58:	7e c0       	rjmp	.+252    	; 0xe56 <Menu_Poll+0x112>
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	e1 f0       	breq	.+56     	; 0xd96 <Menu_Poll+0x52>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	09 f4       	brne	.+2      	; 0xd64 <Menu_Poll+0x20>
     d62:	61 c0       	rjmp	.+194    	; 0xe26 <Menu_Poll+0xe2>
     d64:	78 c0       	rjmp	.+240    	; 0xe56 <Menu_Poll+0x112>
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
     d66:	e0 91 a1 05 	lds	r30, 0x05A1
     d6a:	f0 91 a2 05 	lds	r31, 0x05A2
     d6e:	02 88       	ldd	r0, Z+18	; 0x12
     d70:	f3 89       	ldd	r31, Z+19	; 0x13
     d72:	e0 2d       	mov	r30, r0
     d74:	30 97       	sbiw	r30, 0x00	; 0
     d76:	09 f0       	breq	.+2      	; 0xd7a <Menu_Poll+0x36>
					SYS_State->Right_Action();
     d78:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
     d7a:	e0 91 a1 05 	lds	r30, 0x05A1
     d7e:	f0 91 a2 05 	lds	r31, 0x05A2
     d82:	80 85       	ldd	r24, Z+8	; 0x08
     d84:	91 85       	ldd	r25, Z+9	; 0x09
     d86:	24 dc       	rcall	.-1976   	; 0x5d0 <FindState>
     d88:	90 93 a2 05 	sts	0x05A2, r25
     d8c:	80 93 a1 05 	sts	0x05A1, r24
				State_Update();
     d90:	4b dc       	rcall	.-1898   	; 0x628 <State_Update>
				DrawScreen();
     d92:	df db       	rcall	.-2114   	; 0x552 <DrawScreen>
				break;
     d94:	62 c0       	rjmp	.+196    	; 0xe5a <Menu_Poll+0x116>
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
     d96:	e0 91 a1 05 	lds	r30, 0x05A1
     d9a:	f0 91 a2 05 	lds	r31, 0x05A2
     d9e:	00 88       	ldd	r0, Z+16	; 0x10
     da0:	f1 89       	ldd	r31, Z+17	; 0x11
     da2:	e0 2d       	mov	r30, r0
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	09 f0       	breq	.+2      	; 0xdaa <Menu_Poll+0x66>
					SYS_State->Left_Action();
     da8:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
     daa:	e0 91 a1 05 	lds	r30, 0x05A1
     dae:	f0 91 a2 05 	lds	r31, 0x05A2
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	97 81       	ldd	r25, Z+7	; 0x07
     db6:	0c dc       	rcall	.-2024   	; 0x5d0 <FindState>
     db8:	90 93 a2 05 	sts	0x05A2, r25
     dbc:	80 93 a1 05 	sts	0x05A1, r24
				State_Update();
     dc0:	33 dc       	rcall	.-1946   	; 0x628 <State_Update>
				DrawScreen();
     dc2:	c7 db       	rcall	.-2162   	; 0x552 <DrawScreen>
				break;
     dc4:	4a c0       	rjmp	.+148    	; 0xe5a <Menu_Poll+0x116>
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
     dc6:	e0 91 a1 05 	lds	r30, 0x05A1
     dca:	f0 91 a2 05 	lds	r31, 0x05A2
     dce:	04 84       	ldd	r0, Z+12	; 0x0c
     dd0:	f5 85       	ldd	r31, Z+13	; 0x0d
     dd2:	e0 2d       	mov	r30, r0
     dd4:	30 97       	sbiw	r30, 0x00	; 0
     dd6:	09 f0       	breq	.+2      	; 0xdda <Menu_Poll+0x96>
				SYS_State->Up_Action();
     dd8:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
     dda:	e0 91 a1 05 	lds	r30, 0x05A1
     dde:	f0 91 a2 05 	lds	r31, 0x05A2
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	93 81       	ldd	r25, Z+3	; 0x03
     de6:	f4 db       	rcall	.-2072   	; 0x5d0 <FindState>
     de8:	90 93 a2 05 	sts	0x05A2, r25
     dec:	80 93 a1 05 	sts	0x05A1, r24
				State_Update();
     df0:	1b dc       	rcall	.-1994   	; 0x628 <State_Update>
				DrawScreen();
     df2:	af db       	rcall	.-2210   	; 0x552 <DrawScreen>
				break;
     df4:	32 c0       	rjmp	.+100    	; 0xe5a <Menu_Poll+0x116>
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
     df6:	e0 91 a1 05 	lds	r30, 0x05A1
     dfa:	f0 91 a2 05 	lds	r31, 0x05A2
     dfe:	06 84       	ldd	r0, Z+14	; 0x0e
     e00:	f7 85       	ldd	r31, Z+15	; 0x0f
     e02:	e0 2d       	mov	r30, r0
     e04:	30 97       	sbiw	r30, 0x00	; 0
     e06:	09 f0       	breq	.+2      	; 0xe0a <Menu_Poll+0xc6>
				SYS_State->Down_Action();
     e08:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
     e0a:	e0 91 a1 05 	lds	r30, 0x05A1
     e0e:	f0 91 a2 05 	lds	r31, 0x05A2
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	95 81       	ldd	r25, Z+5	; 0x05
     e16:	dc db       	rcall	.-2120   	; 0x5d0 <FindState>
     e18:	90 93 a2 05 	sts	0x05A2, r25
     e1c:	80 93 a1 05 	sts	0x05A1, r24
				State_Update();
     e20:	03 dc       	rcall	.-2042   	; 0x628 <State_Update>
				DrawScreen();
     e22:	97 db       	rcall	.-2258   	; 0x552 <DrawScreen>
				break;
     e24:	1a c0       	rjmp	.+52     	; 0xe5a <Menu_Poll+0x116>
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
     e26:	e0 91 a1 05 	lds	r30, 0x05A1
     e2a:	f0 91 a2 05 	lds	r31, 0x05A2
     e2e:	04 88       	ldd	r0, Z+20	; 0x14
     e30:	f5 89       	ldd	r31, Z+21	; 0x15
     e32:	e0 2d       	mov	r30, r0
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	09 f0       	breq	.+2      	; 0xe3a <Menu_Poll+0xf6>
				SYS_State->Ent_Action();
     e38:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
     e3a:	e0 91 a1 05 	lds	r30, 0x05A1
     e3e:	f0 91 a2 05 	lds	r31, 0x05A2
     e42:	82 85       	ldd	r24, Z+10	; 0x0a
     e44:	93 85       	ldd	r25, Z+11	; 0x0b
     e46:	c4 db       	rcall	.-2168   	; 0x5d0 <FindState>
     e48:	90 93 a2 05 	sts	0x05A2, r25
     e4c:	80 93 a1 05 	sts	0x05A1, r24
				State_Update();
     e50:	eb db       	rcall	.-2090   	; 0x628 <State_Update>
				DrawScreen();
     e52:	7f db       	rcall	.-2306   	; 0x552 <DrawScreen>
				break;
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <Menu_Poll+0x116>
			default:

				break;
		}
	if(key != KEY_NULL){
     e56:	8f 3f       	cpi	r24, 0xFF	; 255
     e58:	d1 f0       	breq	.+52     	; 0xe8e <Menu_Poll+0x14a>
			Timer0_RemoveCallbackFunction(Current_TimerFunc);
     e5a:	80 91 9f 05 	lds	r24, 0x059F
     e5e:	90 91 a0 05 	lds	r25, 0x05A0
     e62:	fb d0       	rcall	.+502    	; 0x105a <Timer0_RemoveCallbackFunction>
			Current_TimerFunc = SYS_State->Timer_Action;
     e64:	e0 91 a1 05 	lds	r30, 0x05A1
     e68:	f0 91 a2 05 	lds	r31, 0x05A2
     e6c:	06 88       	ldd	r0, Z+22	; 0x16
     e6e:	f7 89       	ldd	r31, Z+23	; 0x17
     e70:	e0 2d       	mov	r30, r0
     e72:	f0 93 a0 05 	sts	0x05A0, r31
     e76:	e0 93 9f 05 	sts	0x059F, r30
			if(Current_TimerFunc != NULL){
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	41 f0       	breq	.+16     	; 0xe8e <Menu_Poll+0x14a>
			Current_TimerFunc();
     e7e:	09 95       	icall
			Timer0_RegisterCallbackFunction(Current_TimerFunc,1000);}
     e80:	68 ee       	ldi	r22, 0xE8	; 232
     e82:	73 e0       	ldi	r23, 0x03	; 3
     e84:	80 91 9f 05 	lds	r24, 0x059F
     e88:	90 91 a0 05 	lds	r25, 0x05A0
     e8c:	91 c0       	rjmp	.+290    	; 0xfb0 <Timer0_RegisterCallbackFunction>
     e8e:	08 95       	ret

00000e90 <Timer0_Init>:

timer_event EventList[TIMER0_NUM_CALLBACKS];
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
     e90:	e7 eb       	ldi	r30, 0xB7	; 183
     e92:	f5 e0       	ldi	r31, 0x05	; 5
     e94:	87 ee       	ldi	r24, 0xE7	; 231
     e96:	95 e0       	ldi	r25, 0x05	; 5
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
     e98:	11 82       	std	Z+1, r1	; 0x01
     e9a:	10 82       	st	Z, r1
		EventList[i].event_intval = 0;
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	12 82       	std	Z+2, r1	; 0x02
		EventList[i].counter = 0;
     ea0:	15 82       	std	Z+5, r1	; 0x05
     ea2:	14 82       	std	Z+4, r1	; 0x04
     ea4:	36 96       	adiw	r30, 0x06	; 6
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];


void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
     ea6:	e8 17       	cp	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	b1 f7       	brne	.-20     	; 0xe98 <Timer0_Init+0x8>
     eac:	ef ea       	ldi	r30, 0xAF	; 175
     eae:	f5 e0       	ldi	r31, 0x05	; 5
     eb0:	87 eb       	ldi	r24, 0xB7	; 183
     eb2:	95 e0       	ldi	r25, 0x05	; 5
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	21 93       	st	Z+, r18
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++){
		EventList[i].pFunc = NULL;
		EventList[i].event_intval = 0;
		EventList[i].counter = 0;
		}
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
     eb8:	e8 17       	cp	r30, r24
     eba:	f9 07       	cpc	r31, r25
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <Timer0_Init+0x26>
		CountDownTimers[i] = 0xff;
		TCCR0 =0;
     ebe:	13 be       	out	0x33, r1	; 51
		TCCR0 |= _BV(CS00)|_BV(CS01)|_BV(CS02);
     ec0:	83 b7       	in	r24, 0x33	; 51
     ec2:	87 60       	ori	r24, 0x07	; 7
     ec4:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 184;
     ec6:	88 eb       	ldi	r24, 0xB8	; 184
     ec8:	82 bf       	out	0x32, r24	; 50
		TIFR |=_BV(TOV0);
     eca:	86 b7       	in	r24, 0x36	; 54
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
     ed0:	87 b7       	in	r24, 0x37	; 55
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	87 bf       	out	0x37, r24	; 55
			sei();
     ed6:	78 94       	sei
     ed8:	08 95       	ret

00000eda <__vector_15>:
}


ISR(TIMER0_COMP_vect){
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	0b b6       	in	r0, 0x3b	; 59
     ee6:	0f 92       	push	r0
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
     f08:	88 eb       	ldi	r24, 0xB8	; 184
     f0a:	82 bf       	out	0x32, r24	; 50
     f0c:	c7 eb       	ldi	r28, 0xB7	; 183
     f0e:	d5 e0       	ldi	r29, 0x05	; 5
     f10:	07 ee       	ldi	r16, 0xE7	; 231
     f12:	15 e0       	ldi	r17, 0x05	; 5
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
		if(EventList[i].pFunc !=NULL){
     f14:	88 81       	ld	r24, Y
     f16:	99 81       	ldd	r25, Y+1	; 0x01
     f18:	89 2b       	or	r24, r25
     f1a:	81 f0       	breq	.+32     	; 0xf3c <__vector_15+0x62>
			if(EventList[i].counter == EventList[i].event_intval){
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	2a 81       	ldd	r18, Y+2	; 0x02
     f22:	3b 81       	ldd	r19, Y+3	; 0x03
     f24:	82 17       	cp	r24, r18
     f26:	93 07       	cpc	r25, r19
     f28:	31 f4       	brne	.+12     	; 0xf36 <__vector_15+0x5c>
				EventList[i].counter = 0;
     f2a:	1d 82       	std	Y+5, r1	; 0x05
     f2c:	1c 82       	std	Y+4, r1	; 0x04
				EventList[i].pFunc();
     f2e:	e8 81       	ld	r30, Y
     f30:	f9 81       	ldd	r31, Y+1	; 0x01
     f32:	09 95       	icall
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <__vector_15+0x62>
			}
		else 
			EventList[i].counter++;
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	9d 83       	std	Y+5, r25	; 0x05
     f3a:	8c 83       	std	Y+4, r24	; 0x04
     f3c:	26 96       	adiw	r28, 0x06	; 6

ISR(TIMER0_COMP_vect){
	static uint16_t tmp_counter=0;
	TCNT0 = 184;
	uint8_t i;
	for(i=0;i<TIMER0_NUM_CALLBACKS;i++){
     f3e:	c0 17       	cp	r28, r16
     f40:	d1 07       	cpc	r29, r17
     f42:	41 f7       	brne	.-48     	; 0xf14 <__vector_15+0x3a>
		else 
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
     f44:	80 91 a3 05 	lds	r24, 0x05A3
     f48:	90 91 a4 05 	lds	r25, 0x05A4
     f4c:	9c 01       	movw	r18, r24
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	30 93 a4 05 	sts	0x05A4, r19
     f56:	20 93 a3 05 	sts	0x05A3, r18
     f5a:	84 36       	cpi	r24, 0x64	; 100
     f5c:	91 05       	cpc	r25, r1
     f5e:	89 f4       	brne	.+34     	; 0xf82 <__vector_15+0xa8>
     f60:	ef ea       	ldi	r30, 0xAF	; 175
     f62:	f5 e0       	ldi	r31, 0x05	; 5
     f64:	87 eb       	ldi	r24, 0xB7	; 183
     f66:	95 e0       	ldi	r25, 0x05	; 5
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
     f68:	20 81       	ld	r18, Z
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	2e 3f       	cpi	r18, 0xFE	; 254
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <__vector_15+0x98>
				CountDownTimers[i]--;
     f70:	20 83       	st	Z, r18
     f72:	31 96       	adiw	r30, 0x01	; 1
			EventList[i].counter++;
		}
	}
	
	if(tmp_counter++==100){
		for(i=0;i<TIMER0_NUM_COUNTDOWNTIMERS;i++){
     f74:	e8 17       	cp	r30, r24
     f76:	f9 07       	cpc	r31, r25
     f78:	b9 f7       	brne	.-18     	; 0xf68 <__vector_15+0x8e>
			if(CountDownTimers[i] != 0xff && CountDownTimers[i]!=0)
				CountDownTimers[i]--;
		}
		tmp_counter =0;
     f7a:	10 92 a4 05 	sts	0x05A4, r1
     f7e:	10 92 a3 05 	sts	0x05A3, r1
	}
	
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <Timer0_RegisterCallbackFunction>:

bool Timer0_RegisterCallbackFunction(TIMER_CALLBACK_FUNC pFunc, uint16_t time_interval)
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
	uint8_t i;
	if(time_interval < 10) 
     fb4:	6a 30       	cpi	r22, 0x0A	; 10
     fb6:	71 05       	cpc	r23, r1
     fb8:	10 f4       	brcc	.+4      	; 0xfbe <Timer0_RegisterCallbackFunction+0xe>
		time_interval = 10;
     fba:	6a e0       	ldi	r22, 0x0A	; 10
     fbc:	70 e0       	ldi	r23, 0x00	; 0
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
     fbe:	c0 91 b7 05 	lds	r28, 0x05B7
     fc2:	d0 91 b8 05 	lds	r29, 0x05B8
     fc6:	c8 17       	cp	r28, r24
     fc8:	d9 07       	cpc	r29, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <Timer0_RegisterCallbackFunction+0x1e>
     fcc:	3e c0       	rjmp	.+124    	; 0x104a <Timer0_RegisterCallbackFunction+0x9a>
     fce:	a7 ee       	ldi	r26, 0xE7	; 231
     fd0:	b5 e0       	ldi	r27, 0x05	; 5
     fd2:	ed eb       	ldi	r30, 0xBD	; 189
     fd4:	f5 e0       	ldi	r31, 0x05	; 5
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	48 17       	cp	r20, r24
     fdc:	59 07       	cpc	r21, r25
     fde:	b9 f1       	breq	.+110    	; 0x104e <Timer0_RegisterCallbackFunction+0x9e>
     fe0:	36 96       	adiw	r30, 0x06	; 6
{
	uint8_t i;
	if(time_interval < 10) 
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
     fe2:	ea 17       	cp	r30, r26
     fe4:	fb 07       	cpc	r31, r27
     fe6:	b9 f7       	brne	.-18     	; 0xfd6 <Timer0_RegisterCallbackFunction+0x26>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == NULL)
     fe8:	cd 2b       	or	r28, r29
     fea:	51 f0       	breq	.+20     	; 0x1000 <Timer0_RegisterCallbackFunction+0x50>
     fec:	ed eb       	ldi	r30, 0xBD	; 189
     fee:	f5 e0       	ldi	r31, 0x05	; 5
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	ea 01       	movw	r28, r20
     ff6:	a0 81       	ld	r26, Z
     ff8:	b1 81       	ldd	r27, Z+1	; 0x01
     ffa:	ab 2b       	or	r26, r27
     ffc:	f9 f4       	brne	.+62     	; 0x103c <Timer0_RegisterCallbackFunction+0x8c>
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <Timer0_RegisterCallbackFunction+0x54>
    1000:	c0 e0       	ldi	r28, 0x00	; 0
    1002:	d0 e0       	ldi	r29, 0x00	; 0
		{
			EventList[i].pFunc = pFunc;
    1004:	ae 01       	movw	r20, r28
    1006:	44 0f       	add	r20, r20
    1008:	55 1f       	adc	r21, r21
    100a:	fa 01       	movw	r30, r20
    100c:	ec 0f       	add	r30, r28
    100e:	fd 1f       	adc	r31, r29
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e9 54       	subi	r30, 0x49	; 73
    1016:	fa 4f       	sbci	r31, 0xFA	; 250
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
			EventList[i].event_intval = time_interval/10;
    101c:	9b 01       	movw	r18, r22
    101e:	ad ec       	ldi	r26, 0xCD	; 205
    1020:	bc ec       	ldi	r27, 0xCC	; 204
    1022:	24 d4       	rcall	.+2120   	; 0x186c <__umulhisi3>
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	82 83       	std	Z+2, r24	; 0x02
			EventList[i].counter = 0;
    1034:	15 82       	std	Z+5, r1	; 0x05
    1036:	14 82       	std	Z+4, r1	; 0x04
			return true;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <Timer0_RegisterCallbackFunction+0xa4>
    103c:	4f 5f       	subi	r20, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	36 96       	adiw	r30, 0x06	; 6
	{
		if (EventList[i].pFunc == pFunc)
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    1042:	48 30       	cpi	r20, 0x08	; 8
    1044:	51 05       	cpc	r21, r1
    1046:	b1 f6       	brne	.-84     	; 0xff4 <Timer0_RegisterCallbackFunction+0x44>
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <Timer0_RegisterCallbackFunction+0xa2>
		time_interval = 10;
		
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
		return true;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <Timer0_RegisterCallbackFunction+0xa4>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <Timer0_RegisterCallbackFunction+0xa4>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    1052:	80 e0       	ldi	r24, 0x00	; 0
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <Timer0_RemoveCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (EventList[i].pFunc == pFunc)
    105a:	20 91 b7 05 	lds	r18, 0x05B7
    105e:	30 91 b8 05 	lds	r19, 0x05B8
    1062:	28 17       	cp	r18, r24
    1064:	39 07       	cpc	r19, r25
    1066:	59 f0       	breq	.+22     	; 0x107e <Timer0_RemoveCallbackFunction+0x24>
    1068:	ed eb       	ldi	r30, 0xBD	; 189
    106a:	f5 e0       	ldi	r31, 0x05	; 5
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	40 81       	ld	r20, Z
    1074:	51 81       	ldd	r21, Z+1	; 0x01
    1076:	48 17       	cp	r20, r24
    1078:	59 07       	cpc	r21, r25
    107a:	e1 f4       	brne	.+56     	; 0x10b4 <Timer0_RemoveCallbackFunction+0x5a>
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Timer0_RemoveCallbackFunction+0x28>
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
		{
			EventList[i].pFunc = NULL;
    1082:	cb 01       	movw	r24, r22
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	fc 01       	movw	r30, r24
    108a:	e6 0f       	add	r30, r22
    108c:	f7 1f       	adc	r31, r23
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e9 54       	subi	r30, 0x49	; 73
    1094:	fa 4f       	sbci	r31, 0xFA	; 250
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	10 82       	st	Z, r1
			EventList[i].event_intval =0;
    109a:	13 82       	std	Z+3, r1	; 0x03
    109c:	12 82       	std	Z+2, r1	; 0x02
			EventList[i].counter = 0;
    109e:	68 0f       	add	r22, r24
    10a0:	79 1f       	adc	r23, r25
    10a2:	fb 01       	movw	r30, r22
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	e9 54       	subi	r30, 0x49	; 73
    10aa:	fa 4f       	sbci	r31, 0xFA	; 250
    10ac:	15 82       	std	Z+5, r1	; 0x05
    10ae:	14 82       	std	Z+4, r1	; 0x04
			return true;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	08 95       	ret
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	36 96       	adiw	r30, 0x06	; 6

bool Timer0_RemoveCallbackFunction(TIMER_CALLBACK_FUNC pFunc)
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
    10ba:	28 30       	cpi	r18, 0x08	; 8
    10bc:	31 05       	cpc	r19, r1
    10be:	c1 f6       	brne	.-80     	; 0x1070 <Timer0_RemoveCallbackFunction+0x16>
			EventList[i].counter = 0;
			return true;
		}
	}
	
	return false;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
}
    10c2:	08 95       	ret

000010c4 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
    10c4:	80 91 af 05 	lds	r24, 0x05AF
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	51 f0       	breq	.+20     	; 0x10e0 <Timer0_AllocateCountdownTimer+0x1c>
    10cc:	e0 eb       	ldi	r30, 0xB0	; 176
    10ce:	f5 e0       	ldi	r31, 0x05	; 5
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	82 2f       	mov	r24, r18
    10d6:	a9 01       	movw	r20, r18
    10d8:	91 91       	ld	r25, Z+
    10da:	9f 3f       	cpi	r25, 0xFF	; 255
    10dc:	51 f4       	brne	.+20     	; 0x10f2 <Timer0_AllocateCountdownTimer+0x2e>
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <Timer0_AllocateCountdownTimer+0x22>
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10e4:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
    10e6:	fa 01       	movw	r30, r20
    10e8:	e1 55       	subi	r30, 0x51	; 81
    10ea:	fa 4f       	sbci	r31, 0xFA	; 250
    10ec:	10 82       	st	Z, r1
		return i+1;
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	08 95       	ret
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
    10f6:	28 30       	cpi	r18, 0x08	; 8
    10f8:	31 05       	cpc	r19, r1
    10fa:	61 f7       	brne	.-40     	; 0x10d4 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
}
    10fe:	08 95       	ret

00001100 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
    1100:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
    1106:	ea e6       	ldi	r30, 0x6A	; 106
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
    1110:	89 b7       	in	r24, 0x39	; 57
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
    1116:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
    1118:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
    111a:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
    111c:	d3 df       	rcall	.-90     	; 0x10c4 <Timer0_AllocateCountdownTimer>
    111e:	80 93 e7 05 	sts	0x05E7, r24
    1122:	08 95       	ret

00001124 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
    1124:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
    1126:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1128:	80 fd       	sbrc	r24, 0
    112a:	15 c0       	rjmp	.+42     	; 0x1156 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    112c:	81 fd       	sbrc	r24, 1
    112e:	15 c0       	rjmp	.+42     	; 0x115a <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    1130:	82 fd       	sbrc	r24, 2
    1132:	15 c0       	rjmp	.+42     	; 0x115e <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1134:	83 fd       	sbrc	r24, 3
    1136:	15 c0       	rjmp	.+42     	; 0x1162 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1138:	84 fd       	sbrc	r24, 4
    113a:	15 c0       	rjmp	.+42     	; 0x1166 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    113c:	85 fd       	sbrc	r24, 5
    113e:	15 c0       	rjmp	.+42     	; 0x116a <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    1140:	86 fd       	sbrc	r24, 6
    1142:	15 c0       	rjmp	.+42     	; 0x116e <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1144:	88 23       	and	r24, r24
    1146:	d4 f4       	brge	.+52     	; 0x117c <button_interrupt+0x58>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
    114a:	90 93 03 04 	sts	0x0403, r25
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 a5 05 	sts	0x05A5, r24
    1154:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
    1156:	95 e0       	ldi	r25, 0x05	; 5
    1158:	0d c0       	rjmp	.+26     	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	0b c0       	rjmp	.+22     	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
    1162:	96 e0       	ldi	r25, 0x06	; 6
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
    1172:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
    1174:	80 91 a5 05 	lds	r24, 0x05A5
    1178:	88 23       	and	r24, r24
    117a:	39 f3       	breq	.-50     	; 0x114a <button_interrupt+0x26>
    117c:	08 95       	ret

0000117e <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	0b b6       	in	r0, 0x3b	; 59
    118a:	0f 92       	push	r0
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
cli();	
    11a4:	f8 94       	cli
button_interrupt();
    11a6:	be df       	rcall	.-132    	; 0x1124 <button_interrupt>
sei();
    11a8:	78 94       	sei
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0b be       	out	0x3b, r0	; 59
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
    11d0:	f8 94       	cli
	if(KEY_VALID){
    11d2:	80 91 a5 05 	lds	r24, 0x05A5
    11d6:	88 23       	and	r24, r24
    11d8:	29 f0       	breq	.+10     	; 0x11e4 <getkey+0x14>
		k = KEY;
    11da:	80 91 03 04 	lds	r24, 0x0403
		KEY_VALID = false;
    11de:	10 92 a5 05 	sts	0x05A5, r1
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <getkey+0x16>
		
	}
	else k=KEY_NULL;
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
    11e6:	78 94       	sei
	
	return k;
	
	
	
    11e8:	08 95       	ret

000011ea <lcd12864_send_byte>:
	lcd12864_write_char('.');
	float digi = v - (int)v;
	digi*=100;
	itoa((int)digi,str,10);
	lcd12864_write_str(str);
}
    11ea:	98 e0       	ldi	r25, 0x08	; 8
    11ec:	1b 98       	cbi	0x03, 3	; 3
    11ee:	88 23       	and	r24, r24
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <lcd12864_send_byte+0xc>
    11f2:	1c 9a       	sbi	0x03, 4	; 3
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <lcd12864_send_byte+0xe>
    11f6:	1c 98       	cbi	0x03, 4	; 3
    11f8:	88 0f       	add	r24, r24
    11fa:	00 00       	nop
    11fc:	00 00       	nop
    11fe:	00 00       	nop
    1200:	1b 9a       	sbi	0x03, 3	; 3
    1202:	00 00       	nop
    1204:	00 00       	nop
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	89 f7       	brne	.-30     	; 0x11ec <lcd12864_send_byte+0x2>
    120a:	08 95       	ret

0000120c <lcd12864_wait_busy>:
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	88 3b       	cpi	r24, 0xB8	; 184
    1214:	91 05       	cpc	r25, r1
    1216:	e1 f7       	brne	.-8      	; 0x1210 <lcd12864_wait_busy+0x4>
    1218:	08 95       	ret

0000121a <lcd12864_send_data>:
    121a:	cf 93       	push	r28
    121c:	c8 2f       	mov	r28, r24
    121e:	1e 9a       	sbi	0x03, 6	; 3
    1220:	8a ef       	ldi	r24, 0xFA	; 250
    1222:	e3 df       	rcall	.-58     	; 0x11ea <lcd12864_send_byte>
    1224:	8c 2f       	mov	r24, r28
    1226:	80 7f       	andi	r24, 0xF0	; 240
    1228:	e0 df       	rcall	.-64     	; 0x11ea <lcd12864_send_byte>
    122a:	8c 2f       	mov	r24, r28
    122c:	82 95       	swap	r24
    122e:	80 7f       	andi	r24, 0xF0	; 240
    1230:	dc df       	rcall	.-72     	; 0x11ea <lcd12864_send_byte>
    1232:	1e 98       	cbi	0x03, 6	; 3
    1234:	eb df       	rcall	.-42     	; 0x120c <lcd12864_wait_busy>
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <lcd12864_send_cmd>:
    123a:	cf 93       	push	r28
    123c:	c8 2f       	mov	r28, r24
    123e:	1e 9a       	sbi	0x03, 6	; 3
    1240:	88 ef       	ldi	r24, 0xF8	; 248
    1242:	d3 df       	rcall	.-90     	; 0x11ea <lcd12864_send_byte>
    1244:	8c 2f       	mov	r24, r28
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	d0 df       	rcall	.-96     	; 0x11ea <lcd12864_send_byte>
    124a:	8c 2f       	mov	r24, r28
    124c:	82 95       	swap	r24
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	cc df       	rcall	.-104    	; 0x11ea <lcd12864_send_byte>
    1252:	dc df       	rcall	.-72     	; 0x120c <lcd12864_wait_busy>
    1254:	1e 98       	cbi	0x03, 6	; 3
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <lcd12864_clear>:
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	ee df       	rcall	.-36     	; 0x123a <lcd12864_send_cmd>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	81 15       	cp	r24, r1
    1266:	20 e3       	ldi	r18, 0x30	; 48
    1268:	92 07       	cpc	r25, r18
    126a:	d9 f7       	brne	.-10     	; 0x1262 <lcd12864_clear+0x8>
    126c:	08 95       	ret

0000126e <lcd12864_set_pos>:
    126e:	62 30       	cpi	r22, 0x02	; 2
    1270:	89 f0       	breq	.+34     	; 0x1294 <lcd12864_set_pos+0x26>
    1272:	18 f4       	brcc	.+6      	; 0x127a <lcd12864_set_pos+0xc>
    1274:	61 30       	cpi	r22, 0x01	; 1
    1276:	31 f0       	breq	.+12     	; 0x1284 <lcd12864_set_pos+0x16>
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <lcd12864_set_pos+0x22>
    127a:	63 30       	cpi	r22, 0x03	; 3
    127c:	29 f0       	breq	.+10     	; 0x1288 <lcd12864_set_pos+0x1a>
    127e:	64 30       	cpi	r22, 0x04	; 4
    1280:	29 f0       	breq	.+10     	; 0x128c <lcd12864_set_pos+0x1e>
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <lcd12864_set_pos+0x22>
    1284:	90 e8       	ldi	r25, 0x80	; 128
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <lcd12864_set_pos+0x28>
    1288:	98 e8       	ldi	r25, 0x88	; 136
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <lcd12864_set_pos+0x28>
    128c:	98 e9       	ldi	r25, 0x98	; 152
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <lcd12864_set_pos+0x28>
    1290:	98 e9       	ldi	r25, 0x98	; 152
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <lcd12864_set_pos+0x28>
    1294:	90 e9       	ldi	r25, 0x90	; 144
    1296:	81 31       	cpi	r24, 0x11	; 17
    1298:	10 f4       	brcc	.+4      	; 0x129e <lcd12864_set_pos+0x30>
    129a:	89 2b       	or	r24, r25
    129c:	ce cf       	rjmp	.-100    	; 0x123a <lcd12864_send_cmd>
    129e:	08 95       	ret

000012a0 <lcd12864_write_char>:
    12a0:	bc cf       	rjmp	.-136    	; 0x121a <lcd12864_send_data>
    12a2:	08 95       	ret

000012a4 <lcd12864_write_str>:
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
    12ac:	88 81       	ld	r24, Y
    12ae:	88 23       	and	r24, r24
    12b0:	49 f0       	breq	.+18     	; 0x12c4 <lcd12864_write_str+0x20>
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	b2 df       	rcall	.-156    	; 0x121a <lcd12864_send_data>
    12b6:	1f 5f       	subi	r17, 0xFF	; 255
    12b8:	fe 01       	movw	r30, r28
    12ba:	e1 0f       	add	r30, r17
    12bc:	f1 1d       	adc	r31, r1
    12be:	80 81       	ld	r24, Z
    12c0:	81 11       	cpse	r24, r1
    12c2:	f8 cf       	rjmp	.-16     	; 0x12b4 <lcd12864_write_str+0x10>
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	08 95       	ret

000012cc <lcd12864_write_int>:
    12cc:	4a e0       	ldi	r20, 0x0A	; 10
    12ce:	6e e8       	ldi	r22, 0x8E	; 142
    12d0:	75 e0       	ldi	r23, 0x05	; 5
    12d2:	db d2       	rcall	.+1462   	; 0x188a <__itoa_ncheck>


void lcd12864_write_int(int v){
	char *str="    ";
	itoa(v,str,10);
	lcd12864_write_str(str);
    12d4:	8e e8       	ldi	r24, 0x8E	; 142
    12d6:	95 e0       	ldi	r25, 0x05	; 5
    12d8:	e5 cf       	rjmp	.-54     	; 0x12a4 <lcd12864_write_str>
    12da:	08 95       	ret

000012dc <lcd12864_SetWhite>:
}



void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	d8 2f       	mov	r29, r24
    12ec:	14 2f       	mov	r17, r20
    12ee:	65 30       	cpi	r22, 0x05	; 5
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <lcd12864_SetWhite+0x18>
    12f2:	64 e0       	ldi	r22, 0x04	; 4
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
    12f4:	66 23       	and	r22, r22
    12f6:	09 f4       	brne	.+2      	; 0x12fa <lcd12864_SetWhite+0x1e>
    12f8:	b8 c0       	rjmp	.+368    	; 0x146a <lcd12864_SetWhite+0x18e>
	uint8_t block;
	if(clear) block=0x00; 
    12fa:	c1 e0       	ldi	r28, 0x01	; 1
    12fc:	21 11       	cpse	r18, r1
    12fe:	c0 e0       	ldi	r28, 0x00	; 0
    1300:	c1 95       	neg	r28
	else block = 0xff;
	
	switch(y){
    1302:	62 30       	cpi	r22, 0x02	; 2
    1304:	99 f0       	breq	.+38     	; 0x132c <lcd12864_SetWhite+0x50>
    1306:	18 f4       	brcc	.+6      	; 0x130e <lcd12864_SetWhite+0x32>
    1308:	61 30       	cpi	r22, 0x01	; 1
    130a:	91 f5       	brne	.+100    	; 0x1370 <lcd12864_SetWhite+0x94>
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <lcd12864_SetWhite+0x3c>
    130e:	63 30       	cpi	r22, 0x03	; 3
    1310:	c1 f0       	breq	.+48     	; 0x1342 <lcd12864_SetWhite+0x66>
    1312:	64 30       	cpi	r22, 0x04	; 4
    1314:	09 f1       	breq	.+66     	; 0x1358 <lcd12864_SetWhite+0x7c>
    1316:	2c c0       	rjmp	.+88     	; 0x1370 <lcd12864_SetWhite+0x94>
		case 1:
			start_x = 0x80+x/2;
    1318:	8d 2f       	mov	r24, r29
    131a:	86 95       	lsr	r24
    131c:	68 94       	set
    131e:	ff 24       	eor	r15, r15
    1320:	f7 f8       	bld	r15, 7
    1322:	f8 0e       	add	r15, r24
			start_y = 0x80;
    1324:	68 94       	set
    1326:	ee 24       	eor	r14, r14
    1328:	e7 f8       	bld	r14, 7
			break;
    132a:	24 c0       	rjmp	.+72     	; 0x1374 <lcd12864_SetWhite+0x98>
		case 2:
			start_x = 0x80+x/2;
    132c:	8d 2f       	mov	r24, r29
    132e:	86 95       	lsr	r24
    1330:	68 94       	set
    1332:	ff 24       	eor	r15, r15
    1334:	f7 f8       	bld	r15, 7
    1336:	f8 0e       	add	r15, r24
			start_y=0x90;
    1338:	0f 2e       	mov	r0, r31
    133a:	f0 e9       	ldi	r31, 0x90	; 144
    133c:	ef 2e       	mov	r14, r31
    133e:	f0 2d       	mov	r31, r0
			break;
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <lcd12864_SetWhite+0x98>
		case 3:
			start_x = 0x88+x/2;
    1342:	8d 2f       	mov	r24, r29
    1344:	86 95       	lsr	r24
    1346:	0f 2e       	mov	r0, r31
    1348:	f8 e8       	ldi	r31, 0x88	; 136
    134a:	ff 2e       	mov	r15, r31
    134c:	f0 2d       	mov	r31, r0
    134e:	f8 0e       	add	r15, r24
			start_y = 0x80;
    1350:	68 94       	set
    1352:	ee 24       	eor	r14, r14
    1354:	e7 f8       	bld	r14, 7
			break;
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <lcd12864_SetWhite+0x98>
		case 4:
			start_x = 0x88+x/2;
    1358:	8d 2f       	mov	r24, r29
    135a:	86 95       	lsr	r24
    135c:	0f 2e       	mov	r0, r31
    135e:	f8 e8       	ldi	r31, 0x88	; 136
    1360:	ff 2e       	mov	r15, r31
    1362:	f0 2d       	mov	r31, r0
    1364:	f8 0e       	add	r15, r24
			start_y = 0x90;
    1366:	0f 2e       	mov	r0, r31
    1368:	f0 e9       	ldi	r31, 0x90	; 144
    136a:	ef 2e       	mov	r14, r31
    136c:	f0 2d       	mov	r31, r0
			break;
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <lcd12864_SetWhite+0x98>


void lcd12864_SetWhite(uint8_t x, uint8_t y, uint8_t width, uint8_t clear){
	
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
    1370:	e1 2c       	mov	r14, r1
    1372:	f1 2c       	mov	r15, r1
			break;
		default:
			break;
	}
	
	lcd12864_send_cmd(0x34);
    1374:	84 e3       	ldi	r24, 0x34	; 52
    1376:	61 df       	rcall	.-318    	; 0x123a <lcd12864_send_cmd>
	
	if(x%2==0 && width%2==0){
    1378:	8d 2f       	mov	r24, r29
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	91 2f       	mov	r25, r17
    137e:	91 70       	andi	r25, 0x01	; 1
    1380:	d1 2b       	or	r29, r17
    1382:	d0 fd       	sbrc	r29, 0
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <lcd12864_SetWhite+0xd6>
		real_width = width/2;
    1386:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1388:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    138a:	d1 2c       	mov	r13, r1
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    138c:	80 2f       	mov	r24, r16
    138e:	8e 0d       	add	r24, r14
    1390:	54 df       	rcall	.-344    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1392:	8f 2d       	mov	r24, r15
    1394:	52 df       	rcall	.-348    	; 0x123a <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    1396:	11 23       	and	r17, r17
    1398:	41 f0       	breq	.+16     	; 0x13aa <lcd12864_SetWhite+0xce>
    139a:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    139c:	8c 2f       	mov	r24, r28
    139e:	3d df       	rcall	.-390    	; 0x121a <lcd12864_send_data>
				lcd12864_send_data(block);
    13a0:	8c 2f       	mov	r24, r28
    13a2:	3b df       	rcall	.-394    	; 0x121a <lcd12864_send_data>
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    13a4:	df 5f       	subi	r29, 0xFF	; 255
    13a6:	d1 13       	cpse	r29, r17
    13a8:	f9 cf       	rjmp	.-14     	; 0x139c <lcd12864_SetWhite+0xc0>
	
	lcd12864_send_cmd(0x34);
	
	if(x%2==0 && width%2==0){
		real_width = width/2;
		for(i=0;i<16;i++){
    13aa:	0f 5f       	subi	r16, 0xFF	; 255
    13ac:	00 31       	cpi	r16, 0x10	; 16
    13ae:	71 f7       	brne	.-36     	; 0x138c <lcd12864_SetWhite+0xb0>
    13b0:	57 c0       	rjmp	.+174    	; 0x1460 <lcd12864_SetWhite+0x184>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
		}
	}
	else if(x%2==0 && width%2!=0){
    13b2:	81 11       	cpse	r24, r1
    13b4:	1d c0       	rjmp	.+58     	; 0x13f0 <lcd12864_SetWhite+0x114>
    13b6:	99 23       	and	r25, r25
    13b8:	09 f4       	brne	.+2      	; 0x13bc <lcd12864_SetWhite+0xe0>
    13ba:	52 c0       	rjmp	.+164    	; 0x1460 <lcd12864_SetWhite+0x184>
		real_width = width/2;
    13bc:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    13be:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    13c0:	d1 2c       	mov	r13, r1
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
    13c2:	80 2f       	mov	r24, r16
    13c4:	8e 0d       	add	r24, r14
    13c6:	39 df       	rcall	.-398    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    13c8:	8f 2d       	mov	r24, r15
    13ca:	37 df       	rcall	.-402    	; 0x123a <lcd12864_send_cmd>
			for(j=0;j<real_width;j++){
    13cc:	11 23       	and	r17, r17
    13ce:	41 f0       	breq	.+16     	; 0x13e0 <lcd12864_SetWhite+0x104>
    13d0:	dd 2d       	mov	r29, r13
				lcd12864_send_data(block);
    13d2:	8c 2f       	mov	r24, r28
    13d4:	22 df       	rcall	.-444    	; 0x121a <lcd12864_send_data>
				lcd12864_send_data(block);
    13d6:	8c 2f       	mov	r24, r28
    13d8:	20 df       	rcall	.-448    	; 0x121a <lcd12864_send_data>
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			for(j=0;j<real_width;j++){
    13da:	df 5f       	subi	r29, 0xFF	; 255
    13dc:	d1 13       	cpse	r29, r17
    13de:	f9 cf       	rjmp	.-14     	; 0x13d2 <lcd12864_SetWhite+0xf6>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    13e0:	8c 2f       	mov	r24, r28
    13e2:	1b df       	rcall	.-458    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    13e4:	8d 2d       	mov	r24, r13
    13e6:	19 df       	rcall	.-462    	; 0x121a <lcd12864_send_data>
			}
		}
	}
	else if(x%2==0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    13e8:	0f 5f       	subi	r16, 0xFF	; 255
    13ea:	00 31       	cpi	r16, 0x10	; 16
    13ec:	51 f7       	brne	.-44     	; 0x13c2 <lcd12864_SetWhite+0xe6>
    13ee:	38 c0       	rjmp	.+112    	; 0x1460 <lcd12864_SetWhite+0x184>
			}
			lcd12864_send_data(block);
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
    13f0:	91 11       	cpse	r25, r1
    13f2:	1e c0       	rjmp	.+60     	; 0x1430 <lcd12864_SetWhite+0x154>
		real_width = width/2-1;
    13f4:	16 95       	lsr	r17
    13f6:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<16;i++){
    13f8:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    13fa:	80 2f       	mov	r24, r16
    13fc:	8e 0d       	add	r24, r14
    13fe:	1d df       	rcall	.-454    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    1400:	8f 2d       	mov	r24, r15
    1402:	1b df       	rcall	.-458    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	09 df       	rcall	.-494    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(block);
    1408:	8c 2f       	mov	r24, r28
    140a:	07 df       	rcall	.-498    	; 0x121a <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    140c:	11 23       	and	r17, r17
    140e:	41 f0       	breq	.+16     	; 0x1420 <lcd12864_SetWhite+0x144>
    1410:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    1412:	8c 2f       	mov	r24, r28
    1414:	02 df       	rcall	.-508    	; 0x121a <lcd12864_send_data>
				lcd12864_send_data(block);
    1416:	8c 2f       	mov	r24, r28
    1418:	00 df       	rcall	.-512    	; 0x121a <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    141a:	df 5f       	subi	r29, 0xFF	; 255
    141c:	1d 13       	cpse	r17, r29
    141e:	f9 cf       	rjmp	.-14     	; 0x1412 <lcd12864_SetWhite+0x136>
				lcd12864_send_data(block);
				lcd12864_send_data(block);
			}
			lcd12864_send_data(block);
    1420:	8c 2f       	mov	r24, r28
    1422:	fb de       	rcall	.-522    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	f9 de       	rcall	.-526    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
		}
	}
	else if(x%2!=0 && width%2==0){
		real_width = width/2-1;
		for(i=0;i<16;i++){
    1428:	0f 5f       	subi	r16, 0xFF	; 255
    142a:	00 31       	cpi	r16, 0x10	; 16
    142c:	31 f7       	brne	.-52     	; 0x13fa <lcd12864_SetWhite+0x11e>
    142e:	18 c0       	rjmp	.+48     	; 0x1460 <lcd12864_SetWhite+0x184>
			lcd12864_send_data(0x00);
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
    1430:	16 95       	lsr	r17
		for(i=0;i<16;i++){
    1432:	00 e0       	ldi	r16, 0x00	; 0
			lcd12864_send_cmd(start_y+i);
    1434:	80 2f       	mov	r24, r16
    1436:	8e 0d       	add	r24, r14
    1438:	00 df       	rcall	.-512    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_cmd(start_x);
    143a:	8f 2d       	mov	r24, r15
    143c:	fe de       	rcall	.-516    	; 0x123a <lcd12864_send_cmd>
			lcd12864_send_data(0x00);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	ec de       	rcall	.-552    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(block);
    1442:	8c 2f       	mov	r24, r28
    1444:	ea de       	rcall	.-556    	; 0x121a <lcd12864_send_data>
			for(j=0;j<real_width;j++){
    1446:	11 23       	and	r17, r17
    1448:	41 f0       	breq	.+16     	; 0x145a <lcd12864_SetWhite+0x17e>
    144a:	d0 e0       	ldi	r29, 0x00	; 0
				lcd12864_send_data(block);
    144c:	8c 2f       	mov	r24, r28
    144e:	e5 de       	rcall	.-566    	; 0x121a <lcd12864_send_data>
				lcd12864_send_data(block);
    1450:	8c 2f       	mov	r24, r28
    1452:	e3 de       	rcall	.-570    	; 0x121a <lcd12864_send_data>
		for(i=0;i<16;i++){
			lcd12864_send_cmd(start_y+i);
			lcd12864_send_cmd(start_x);
			lcd12864_send_data(0x00);
			lcd12864_send_data(block);
			for(j=0;j<real_width;j++){
    1454:	df 5f       	subi	r29, 0xFF	; 255
    1456:	d1 13       	cpse	r29, r17
    1458:	f9 cf       	rjmp	.-14     	; 0x144c <lcd12864_SetWhite+0x170>
		}
		
	}
	else if(x%2!=0 && width%2!=0){
		real_width = width/2;
		for(i=0;i<16;i++){
    145a:	0f 5f       	subi	r16, 0xFF	; 255
    145c:	00 31       	cpi	r16, 0x10	; 16
    145e:	51 f7       	brne	.-44     	; 0x1434 <lcd12864_SetWhite+0x158>
			}
			
		}
	}
	
	lcd12864_send_cmd(0x36);
    1460:	86 e3       	ldi	r24, 0x36	; 54
    1462:	eb de       	rcall	.-554    	; 0x123a <lcd12864_send_cmd>
	lcd12864_send_cmd(0x30);		
    1464:	80 e3       	ldi	r24, 0x30	; 48
    1466:	e9 de       	rcall	.-558    	; 0x123a <lcd12864_send_cmd>
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <lcd12864_SetWhite+0x198>
	uint8_t i,j;
	uint8_t start_x=0, start_y=0;
	uint8_t real_width=0;
	if(y>4) y=4; if(y<1)y=1;
	uint8_t block;
	if(clear) block=0x00; 
    146a:	c1 e0       	ldi	r28, 0x01	; 1
    146c:	21 11       	cpse	r18, r1
    146e:	c0 e0       	ldi	r28, 0x00	; 0
    1470:	c1 95       	neg	r28
    1472:	52 cf       	rjmp	.-348    	; 0x1318 <lcd12864_SetWhite+0x3c>
		}
	}
	
	lcd12864_send_cmd(0x36);
	lcd12864_send_cmd(0x30);		
}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	08 95       	ret

00001484 <lcd12864_clrGDRAM>:

void lcd12864_clrGDRAM(void){
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
    148a:	84 e3       	ldi	r24, 0x34	; 52
    148c:	d6 de       	rcall	.-596    	; 0x123a <lcd12864_send_cmd>
    148e:	d0 e8       	ldi	r29, 0x80	; 128
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
    1490:	10 e1       	ldi	r17, 0x10	; 16

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    1492:	8d 2f       	mov	r24, r29
    1494:	d2 de       	rcall	.-604    	; 0x123a <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    1496:	80 e8       	ldi	r24, 0x80	; 128
    1498:	d0 de       	rcall	.-608    	; 0x123a <lcd12864_send_cmd>
    149a:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	bd de       	rcall	.-646    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	bb de       	rcall	.-650    	; 0x121a <lcd12864_send_data>
    14a4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    14a6:	d1 f7       	brne	.-12     	; 0x149c <lcd12864_clrGDRAM+0x18>
    14a8:	df 5f       	subi	r29, 0xFF	; 255
}

void lcd12864_clrGDRAM(void){
	uint8_t i,j;
	lcd12864_send_cmd(0x34);
	for(i=0;i<16;i++){
    14aa:	d0 39       	cpi	r29, 0x90	; 144
    14ac:	91 f7       	brne	.-28     	; 0x1492 <lcd12864_clrGDRAM+0xe>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
    14ae:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    14b0:	8d 2f       	mov	r24, r29
    14b2:	c3 de       	rcall	.-634    	; 0x123a <lcd12864_send_cmd>
		lcd12864_send_cmd(0x80);
    14b4:	80 e8       	ldi	r24, 0x80	; 128
    14b6:	c1 de       	rcall	.-638    	; 0x123a <lcd12864_send_cmd>
    14b8:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	ae de       	rcall	.-676    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	ac de       	rcall	.-680    	; 0x121a <lcd12864_send_data>
    14c2:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x80);
		for(j=0;j<16;j++){
    14c4:	d1 f7       	brne	.-12     	; 0x14ba <lcd12864_clrGDRAM+0x36>
    14c6:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    14c8:	d0 3a       	cpi	r29, 0xA0	; 160
    14ca:	91 f7       	brne	.-28     	; 0x14b0 <lcd12864_clrGDRAM+0x2c>
    14cc:	d0 e8       	ldi	r29, 0x80	; 128
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
    14ce:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
    14d0:	8d 2f       	mov	r24, r29
    14d2:	b3 de       	rcall	.-666    	; 0x123a <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    14d4:	88 e8       	ldi	r24, 0x88	; 136
    14d6:	b1 de       	rcall	.-670    	; 0x123a <lcd12864_send_cmd>
    14d8:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	9e de       	rcall	.-708    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	9c de       	rcall	.-712    	; 0x121a <lcd12864_send_data>
    14e2:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x80+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    14e4:	d1 f7       	brne	.-12     	; 0x14da <lcd12864_clrGDRAM+0x56>
    14e6:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    14e8:	d0 39       	cpi	r29, 0x90	; 144
    14ea:	91 f7       	brne	.-28     	; 0x14d0 <lcd12864_clrGDRAM+0x4c>
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
    14ec:	10 e1       	ldi	r17, 0x10	; 16
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
    14ee:	8d 2f       	mov	r24, r29
    14f0:	a4 de       	rcall	.-696    	; 0x123a <lcd12864_send_cmd>
		lcd12864_send_cmd(0x88);
    14f2:	88 e8       	ldi	r24, 0x88	; 136
    14f4:	a2 de       	rcall	.-700    	; 0x123a <lcd12864_send_cmd>
    14f6:	c1 2f       	mov	r28, r17
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	8f de       	rcall	.-738    	; 0x121a <lcd12864_send_data>
			lcd12864_send_data(0x00);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	8d de       	rcall	.-742    	; 0x121a <lcd12864_send_data>
    1500:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	for(i=0;i<16;i++){
		lcd12864_send_cmd(0x90+i);
		lcd12864_send_cmd(0x88);
		for(j=0;j<16;j++){
    1502:	d1 f7       	brne	.-12     	; 0x14f8 <lcd12864_clrGDRAM+0x74>
    1504:	df 5f       	subi	r29, 0xFF	; 255
		for(j=0;j<16;j++){
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	for(i=0;i<16;i++){
    1506:	d0 3a       	cpi	r29, 0xA0	; 160
    1508:	91 f7       	brne	.-28     	; 0x14ee <lcd12864_clrGDRAM+0x6a>
			lcd12864_send_data(0x00);
			lcd12864_send_data(0x00);
		}
	}
	
	lcd12864_send_cmd(0x30);
    150a:	80 e3       	ldi	r24, 0x30	; 48
    150c:	96 de       	rcall	.-724    	; 0x123a <lcd12864_send_cmd>
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	08 95       	ret

00001516 <lcd12864_init>:
#include <stdlib.h>
#define DELAY 150


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
    1516:	82 b1       	in	r24, 0x02	; 2
    1518:	88 6f       	ori	r24, 0xF8	; 248
    151a:	82 b9       	out	0x02, r24	; 2
	LCD12864_RESET_0;
    151c:	1d 98       	cbi	0x03, 5	; 3
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	81 15       	cp	r24, r1
    1526:	20 ef       	ldi	r18, 0xF0	; 240
    1528:	92 07       	cpc	r25, r18
    152a:	d9 f7       	brne	.-10     	; 0x1522 <lcd12864_init+0xc>
	delay_ms(50);
	LCD12864_RESET;
    152c:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
    152e:	1f 98       	cbi	0x03, 7	; 3
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	81 15       	cp	r24, r1
    1538:	20 e3       	ldi	r18, 0x30	; 48
    153a:	92 07       	cpc	r25, r18
    153c:	d9 f7       	brne	.-10     	; 0x1534 <lcd12864_init+0x1e>
	delay_ms(10);
	lcd12864_send_cmd(0x30);
    153e:	80 e3       	ldi	r24, 0x30	; 48
    1540:	7c de       	rcall	.-776    	; 0x123a <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1542:	8c e0       	ldi	r24, 0x0C	; 12
    1544:	7a de       	rcall	.-780    	; 0x123a <lcd12864_send_cmd>
	lcd12864_send_cmd(0x01);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	78 de       	rcall	.-784    	; 0x123a <lcd12864_send_cmd>
	lcd12864_send_cmd(0x02);
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	76 de       	rcall	.-788    	; 0x123a <lcd12864_send_cmd>

	lcd12864_send_cmd(0x80);
    154e:	80 e8       	ldi	r24, 0x80	; 128
    1550:	74 de       	rcall	.-792    	; 0x123a <lcd12864_send_cmd>

	lcd12864_send_cmd(0x04);
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	72 de       	rcall	.-796    	; 0x123a <lcd12864_send_cmd>
	lcd12864_send_cmd(0x0C);
    1556:	8c e0       	ldi	r24, 0x0C	; 12
    1558:	70 de       	rcall	.-800    	; 0x123a <lcd12864_send_cmd>
	lcd12864_clrGDRAM();
    155a:	94 cf       	rjmp	.-216    	; 0x1484 <lcd12864_clrGDRAM>
    155c:	08 95       	ret

0000155e <__subsf3>:
    155e:	50 58       	subi	r21, 0x80	; 128

00001560 <__addsf3>:
    1560:	bb 27       	eor	r27, r27
    1562:	aa 27       	eor	r26, r26
    1564:	0e d0       	rcall	.+28     	; 0x1582 <__addsf3x>
    1566:	e5 c0       	rjmp	.+458    	; 0x1732 <__fp_round>
    1568:	d6 d0       	rcall	.+428    	; 0x1716 <__fp_pscA>
    156a:	30 f0       	brcs	.+12     	; 0x1578 <__addsf3+0x18>
    156c:	db d0       	rcall	.+438    	; 0x1724 <__fp_pscB>
    156e:	20 f0       	brcs	.+8      	; 0x1578 <__addsf3+0x18>
    1570:	31 f4       	brne	.+12     	; 0x157e <__addsf3+0x1e>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	11 f4       	brne	.+4      	; 0x157a <__addsf3+0x1a>
    1576:	1e f4       	brtc	.+6      	; 0x157e <__addsf3+0x1e>
    1578:	cb c0       	rjmp	.+406    	; 0x1710 <__fp_nan>
    157a:	0e f4       	brtc	.+2      	; 0x157e <__addsf3+0x1e>
    157c:	e0 95       	com	r30
    157e:	e7 fb       	bst	r30, 7
    1580:	c1 c0       	rjmp	.+386    	; 0x1704 <__fp_inf>

00001582 <__addsf3x>:
    1582:	e9 2f       	mov	r30, r25
    1584:	e7 d0       	rcall	.+462    	; 0x1754 <__fp_split3>
    1586:	80 f3       	brcs	.-32     	; 0x1568 <__addsf3+0x8>
    1588:	ba 17       	cp	r27, r26
    158a:	62 07       	cpc	r22, r18
    158c:	73 07       	cpc	r23, r19
    158e:	84 07       	cpc	r24, r20
    1590:	95 07       	cpc	r25, r21
    1592:	18 f0       	brcs	.+6      	; 0x159a <__addsf3x+0x18>
    1594:	71 f4       	brne	.+28     	; 0x15b2 <__addsf3x+0x30>
    1596:	9e f5       	brtc	.+102    	; 0x15fe <__addsf3x+0x7c>
    1598:	ff c0       	rjmp	.+510    	; 0x1798 <__fp_zero>
    159a:	0e f4       	brtc	.+2      	; 0x159e <__addsf3x+0x1c>
    159c:	e0 95       	com	r30
    159e:	0b 2e       	mov	r0, r27
    15a0:	ba 2f       	mov	r27, r26
    15a2:	a0 2d       	mov	r26, r0
    15a4:	0b 01       	movw	r0, r22
    15a6:	b9 01       	movw	r22, r18
    15a8:	90 01       	movw	r18, r0
    15aa:	0c 01       	movw	r0, r24
    15ac:	ca 01       	movw	r24, r20
    15ae:	a0 01       	movw	r20, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	ff 27       	eor	r31, r31
    15b4:	59 1b       	sub	r21, r25
    15b6:	99 f0       	breq	.+38     	; 0x15de <__addsf3x+0x5c>
    15b8:	59 3f       	cpi	r21, 0xF9	; 249
    15ba:	50 f4       	brcc	.+20     	; 0x15d0 <__addsf3x+0x4e>
    15bc:	50 3e       	cpi	r21, 0xE0	; 224
    15be:	68 f1       	brcs	.+90     	; 0x161a <__addsf3x+0x98>
    15c0:	1a 16       	cp	r1, r26
    15c2:	f0 40       	sbci	r31, 0x00	; 0
    15c4:	a2 2f       	mov	r26, r18
    15c6:	23 2f       	mov	r18, r19
    15c8:	34 2f       	mov	r19, r20
    15ca:	44 27       	eor	r20, r20
    15cc:	58 5f       	subi	r21, 0xF8	; 248
    15ce:	f3 cf       	rjmp	.-26     	; 0x15b6 <__addsf3x+0x34>
    15d0:	46 95       	lsr	r20
    15d2:	37 95       	ror	r19
    15d4:	27 95       	ror	r18
    15d6:	a7 95       	ror	r26
    15d8:	f0 40       	sbci	r31, 0x00	; 0
    15da:	53 95       	inc	r21
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__addsf3x+0x4e>
    15de:	7e f4       	brtc	.+30     	; 0x15fe <__addsf3x+0x7c>
    15e0:	1f 16       	cp	r1, r31
    15e2:	ba 0b       	sbc	r27, r26
    15e4:	62 0b       	sbc	r22, r18
    15e6:	73 0b       	sbc	r23, r19
    15e8:	84 0b       	sbc	r24, r20
    15ea:	ba f0       	brmi	.+46     	; 0x161a <__addsf3x+0x98>
    15ec:	91 50       	subi	r25, 0x01	; 1
    15ee:	a1 f0       	breq	.+40     	; 0x1618 <__addsf3x+0x96>
    15f0:	ff 0f       	add	r31, r31
    15f2:	bb 1f       	adc	r27, r27
    15f4:	66 1f       	adc	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	c2 f7       	brpl	.-16     	; 0x15ec <__addsf3x+0x6a>
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <__addsf3x+0x98>
    15fe:	ba 0f       	add	r27, r26
    1600:	62 1f       	adc	r22, r18
    1602:	73 1f       	adc	r23, r19
    1604:	84 1f       	adc	r24, r20
    1606:	48 f4       	brcc	.+18     	; 0x161a <__addsf3x+0x98>
    1608:	87 95       	ror	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	b7 95       	ror	r27
    1610:	f7 95       	ror	r31
    1612:	9e 3f       	cpi	r25, 0xFE	; 254
    1614:	08 f0       	brcs	.+2      	; 0x1618 <__addsf3x+0x96>
    1616:	b3 cf       	rjmp	.-154    	; 0x157e <__addsf3+0x1e>
    1618:	93 95       	inc	r25
    161a:	88 0f       	add	r24, r24
    161c:	08 f0       	brcs	.+2      	; 0x1620 <__addsf3x+0x9e>
    161e:	99 27       	eor	r25, r25
    1620:	ee 0f       	add	r30, r30
    1622:	97 95       	ror	r25
    1624:	87 95       	ror	r24
    1626:	08 95       	ret

00001628 <__fixsfsi>:
    1628:	04 d0       	rcall	.+8      	; 0x1632 <__fixunssfsi>
    162a:	68 94       	set
    162c:	b1 11       	cpse	r27, r1
    162e:	b5 c0       	rjmp	.+362    	; 0x179a <__fp_szero>
    1630:	08 95       	ret

00001632 <__fixunssfsi>:
    1632:	98 d0       	rcall	.+304    	; 0x1764 <__fp_splitA>
    1634:	88 f0       	brcs	.+34     	; 0x1658 <__fixunssfsi+0x26>
    1636:	9f 57       	subi	r25, 0x7F	; 127
    1638:	90 f0       	brcs	.+36     	; 0x165e <__fixunssfsi+0x2c>
    163a:	b9 2f       	mov	r27, r25
    163c:	99 27       	eor	r25, r25
    163e:	b7 51       	subi	r27, 0x17	; 23
    1640:	a0 f0       	brcs	.+40     	; 0x166a <__fixunssfsi+0x38>
    1642:	d1 f0       	breq	.+52     	; 0x1678 <__fixunssfsi+0x46>
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a f0       	brmi	.+6      	; 0x1654 <__fixunssfsi+0x22>
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__fixunssfsi+0x12>
    1652:	12 c0       	rjmp	.+36     	; 0x1678 <__fixunssfsi+0x46>
    1654:	b1 30       	cpi	r27, 0x01	; 1
    1656:	81 f0       	breq	.+32     	; 0x1678 <__fixunssfsi+0x46>
    1658:	9f d0       	rcall	.+318    	; 0x1798 <__fp_zero>
    165a:	b1 e0       	ldi	r27, 0x01	; 1
    165c:	08 95       	ret
    165e:	9c c0       	rjmp	.+312    	; 0x1798 <__fp_zero>
    1660:	67 2f       	mov	r22, r23
    1662:	78 2f       	mov	r23, r24
    1664:	88 27       	eor	r24, r24
    1666:	b8 5f       	subi	r27, 0xF8	; 248
    1668:	39 f0       	breq	.+14     	; 0x1678 <__fixunssfsi+0x46>
    166a:	b9 3f       	cpi	r27, 0xF9	; 249
    166c:	cc f3       	brlt	.-14     	; 0x1660 <__fixunssfsi+0x2e>
    166e:	86 95       	lsr	r24
    1670:	77 95       	ror	r23
    1672:	67 95       	ror	r22
    1674:	b3 95       	inc	r27
    1676:	d9 f7       	brne	.-10     	; 0x166e <__fixunssfsi+0x3c>
    1678:	3e f4       	brtc	.+14     	; 0x1688 <__fixunssfsi+0x56>
    167a:	90 95       	com	r25
    167c:	80 95       	com	r24
    167e:	70 95       	com	r23
    1680:	61 95       	neg	r22
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__floatunsisf>:
    168a:	e8 94       	clt
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <__floatsisf+0x12>

0000168e <__floatsisf>:
    168e:	97 fb       	bst	r25, 7
    1690:	3e f4       	brtc	.+14     	; 0x16a0 <__floatsisf+0x12>
    1692:	90 95       	com	r25
    1694:	80 95       	com	r24
    1696:	70 95       	com	r23
    1698:	61 95       	neg	r22
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	99 23       	and	r25, r25
    16a2:	a9 f0       	breq	.+42     	; 0x16ce <__floatsisf+0x40>
    16a4:	f9 2f       	mov	r31, r25
    16a6:	96 e9       	ldi	r25, 0x96	; 150
    16a8:	bb 27       	eor	r27, r27
    16aa:	93 95       	inc	r25
    16ac:	f6 95       	lsr	r31
    16ae:	87 95       	ror	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b7 95       	ror	r27
    16b6:	f1 11       	cpse	r31, r1
    16b8:	f8 cf       	rjmp	.-16     	; 0x16aa <__floatsisf+0x1c>
    16ba:	fa f4       	brpl	.+62     	; 0x16fa <__floatsisf+0x6c>
    16bc:	bb 0f       	add	r27, r27
    16be:	11 f4       	brne	.+4      	; 0x16c4 <__floatsisf+0x36>
    16c0:	60 ff       	sbrs	r22, 0
    16c2:	1b c0       	rjmp	.+54     	; 0x16fa <__floatsisf+0x6c>
    16c4:	6f 5f       	subi	r22, 0xFF	; 255
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	16 c0       	rjmp	.+44     	; 0x16fa <__floatsisf+0x6c>
    16ce:	88 23       	and	r24, r24
    16d0:	11 f0       	breq	.+4      	; 0x16d6 <__floatsisf+0x48>
    16d2:	96 e9       	ldi	r25, 0x96	; 150
    16d4:	11 c0       	rjmp	.+34     	; 0x16f8 <__floatsisf+0x6a>
    16d6:	77 23       	and	r23, r23
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <__floatsisf+0x54>
    16da:	9e e8       	ldi	r25, 0x8E	; 142
    16dc:	87 2f       	mov	r24, r23
    16de:	76 2f       	mov	r23, r22
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <__floatsisf+0x5e>
    16e2:	66 23       	and	r22, r22
    16e4:	71 f0       	breq	.+28     	; 0x1702 <__floatsisf+0x74>
    16e6:	96 e8       	ldi	r25, 0x86	; 134
    16e8:	86 2f       	mov	r24, r22
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	2a f0       	brmi	.+10     	; 0x16fa <__floatsisf+0x6c>
    16f0:	9a 95       	dec	r25
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	da f7       	brpl	.-10     	; 0x16f0 <__floatsisf+0x62>
    16fa:	88 0f       	add	r24, r24
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	97 f9       	bld	r25, 7
    1702:	08 95       	ret

00001704 <__fp_inf>:
    1704:	97 f9       	bld	r25, 7
    1706:	9f 67       	ori	r25, 0x7F	; 127
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	08 95       	ret

00001710 <__fp_nan>:
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	80 ec       	ldi	r24, 0xC0	; 192
    1714:	08 95       	ret

00001716 <__fp_pscA>:
    1716:	00 24       	eor	r0, r0
    1718:	0a 94       	dec	r0
    171a:	16 16       	cp	r1, r22
    171c:	17 06       	cpc	r1, r23
    171e:	18 06       	cpc	r1, r24
    1720:	09 06       	cpc	r0, r25
    1722:	08 95       	ret

00001724 <__fp_pscB>:
    1724:	00 24       	eor	r0, r0
    1726:	0a 94       	dec	r0
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	14 06       	cpc	r1, r20
    172e:	05 06       	cpc	r0, r21
    1730:	08 95       	ret

00001732 <__fp_round>:
    1732:	09 2e       	mov	r0, r25
    1734:	03 94       	inc	r0
    1736:	00 0c       	add	r0, r0
    1738:	11 f4       	brne	.+4      	; 0x173e <__fp_round+0xc>
    173a:	88 23       	and	r24, r24
    173c:	52 f0       	brmi	.+20     	; 0x1752 <__fp_round+0x20>
    173e:	bb 0f       	add	r27, r27
    1740:	40 f4       	brcc	.+16     	; 0x1752 <__fp_round+0x20>
    1742:	bf 2b       	or	r27, r31
    1744:	11 f4       	brne	.+4      	; 0x174a <__fp_round+0x18>
    1746:	60 ff       	sbrs	r22, 0
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__fp_round+0x20>
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__fp_split3>:
    1754:	57 fd       	sbrc	r21, 7
    1756:	90 58       	subi	r25, 0x80	; 128
    1758:	44 0f       	add	r20, r20
    175a:	55 1f       	adc	r21, r21
    175c:	59 f0       	breq	.+22     	; 0x1774 <__fp_splitA+0x10>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	71 f0       	breq	.+28     	; 0x177e <__fp_splitA+0x1a>
    1762:	47 95       	ror	r20

00001764 <__fp_splitA>:
    1764:	88 0f       	add	r24, r24
    1766:	97 fb       	bst	r25, 7
    1768:	99 1f       	adc	r25, r25
    176a:	61 f0       	breq	.+24     	; 0x1784 <__fp_splitA+0x20>
    176c:	9f 3f       	cpi	r25, 0xFF	; 255
    176e:	79 f0       	breq	.+30     	; 0x178e <__fp_splitA+0x2a>
    1770:	87 95       	ror	r24
    1772:	08 95       	ret
    1774:	12 16       	cp	r1, r18
    1776:	13 06       	cpc	r1, r19
    1778:	14 06       	cpc	r1, r20
    177a:	55 1f       	adc	r21, r21
    177c:	f2 cf       	rjmp	.-28     	; 0x1762 <__fp_split3+0xe>
    177e:	46 95       	lsr	r20
    1780:	f1 df       	rcall	.-30     	; 0x1764 <__fp_splitA>
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <__fp_splitA+0x30>
    1784:	16 16       	cp	r1, r22
    1786:	17 06       	cpc	r1, r23
    1788:	18 06       	cpc	r1, r24
    178a:	99 1f       	adc	r25, r25
    178c:	f1 cf       	rjmp	.-30     	; 0x1770 <__fp_splitA+0xc>
    178e:	86 95       	lsr	r24
    1790:	71 05       	cpc	r23, r1
    1792:	61 05       	cpc	r22, r1
    1794:	08 94       	sec
    1796:	08 95       	ret

00001798 <__fp_zero>:
    1798:	e8 94       	clt

0000179a <__fp_szero>:
    179a:	bb 27       	eor	r27, r27
    179c:	66 27       	eor	r22, r22
    179e:	77 27       	eor	r23, r23
    17a0:	cb 01       	movw	r24, r22
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <__mulsf3>:
    17a6:	0b d0       	rcall	.+22     	; 0x17be <__mulsf3x>
    17a8:	c4 cf       	rjmp	.-120    	; 0x1732 <__fp_round>
    17aa:	b5 df       	rcall	.-150    	; 0x1716 <__fp_pscA>
    17ac:	28 f0       	brcs	.+10     	; 0x17b8 <__mulsf3+0x12>
    17ae:	ba df       	rcall	.-140    	; 0x1724 <__fp_pscB>
    17b0:	18 f0       	brcs	.+6      	; 0x17b8 <__mulsf3+0x12>
    17b2:	95 23       	and	r25, r21
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <__mulsf3+0x12>
    17b6:	a6 cf       	rjmp	.-180    	; 0x1704 <__fp_inf>
    17b8:	ab cf       	rjmp	.-170    	; 0x1710 <__fp_nan>
    17ba:	11 24       	eor	r1, r1
    17bc:	ee cf       	rjmp	.-36     	; 0x179a <__fp_szero>

000017be <__mulsf3x>:
    17be:	ca df       	rcall	.-108    	; 0x1754 <__fp_split3>
    17c0:	a0 f3       	brcs	.-24     	; 0x17aa <__mulsf3+0x4>

000017c2 <__mulsf3_pse>:
    17c2:	95 9f       	mul	r25, r21
    17c4:	d1 f3       	breq	.-12     	; 0x17ba <__mulsf3+0x14>
    17c6:	95 0f       	add	r25, r21
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	55 1f       	adc	r21, r21
    17cc:	62 9f       	mul	r22, r18
    17ce:	f0 01       	movw	r30, r0
    17d0:	72 9f       	mul	r23, r18
    17d2:	bb 27       	eor	r27, r27
    17d4:	f0 0d       	add	r31, r0
    17d6:	b1 1d       	adc	r27, r1
    17d8:	63 9f       	mul	r22, r19
    17da:	aa 27       	eor	r26, r26
    17dc:	f0 0d       	add	r31, r0
    17de:	b1 1d       	adc	r27, r1
    17e0:	aa 1f       	adc	r26, r26
    17e2:	64 9f       	mul	r22, r20
    17e4:	66 27       	eor	r22, r22
    17e6:	b0 0d       	add	r27, r0
    17e8:	a1 1d       	adc	r26, r1
    17ea:	66 1f       	adc	r22, r22
    17ec:	82 9f       	mul	r24, r18
    17ee:	22 27       	eor	r18, r18
    17f0:	b0 0d       	add	r27, r0
    17f2:	a1 1d       	adc	r26, r1
    17f4:	62 1f       	adc	r22, r18
    17f6:	73 9f       	mul	r23, r19
    17f8:	b0 0d       	add	r27, r0
    17fa:	a1 1d       	adc	r26, r1
    17fc:	62 1f       	adc	r22, r18
    17fe:	83 9f       	mul	r24, r19
    1800:	a0 0d       	add	r26, r0
    1802:	61 1d       	adc	r22, r1
    1804:	22 1f       	adc	r18, r18
    1806:	74 9f       	mul	r23, r20
    1808:	33 27       	eor	r19, r19
    180a:	a0 0d       	add	r26, r0
    180c:	61 1d       	adc	r22, r1
    180e:	23 1f       	adc	r18, r19
    1810:	84 9f       	mul	r24, r20
    1812:	60 0d       	add	r22, r0
    1814:	21 1d       	adc	r18, r1
    1816:	82 2f       	mov	r24, r18
    1818:	76 2f       	mov	r23, r22
    181a:	6a 2f       	mov	r22, r26
    181c:	11 24       	eor	r1, r1
    181e:	9f 57       	subi	r25, 0x7F	; 127
    1820:	50 40       	sbci	r21, 0x00	; 0
    1822:	8a f0       	brmi	.+34     	; 0x1846 <__mulsf3_pse+0x84>
    1824:	e1 f0       	breq	.+56     	; 0x185e <__mulsf3_pse+0x9c>
    1826:	88 23       	and	r24, r24
    1828:	4a f0       	brmi	.+18     	; 0x183c <__mulsf3_pse+0x7a>
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	bb 1f       	adc	r27, r27
    1830:	66 1f       	adc	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	91 50       	subi	r25, 0x01	; 1
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	a9 f7       	brne	.-22     	; 0x1826 <__mulsf3_pse+0x64>
    183c:	9e 3f       	cpi	r25, 0xFE	; 254
    183e:	51 05       	cpc	r21, r1
    1840:	70 f0       	brcs	.+28     	; 0x185e <__mulsf3_pse+0x9c>
    1842:	60 cf       	rjmp	.-320    	; 0x1704 <__fp_inf>
    1844:	aa cf       	rjmp	.-172    	; 0x179a <__fp_szero>
    1846:	5f 3f       	cpi	r21, 0xFF	; 255
    1848:	ec f3       	brlt	.-6      	; 0x1844 <__mulsf3_pse+0x82>
    184a:	98 3e       	cpi	r25, 0xE8	; 232
    184c:	dc f3       	brlt	.-10     	; 0x1844 <__mulsf3_pse+0x82>
    184e:	86 95       	lsr	r24
    1850:	77 95       	ror	r23
    1852:	67 95       	ror	r22
    1854:	b7 95       	ror	r27
    1856:	f7 95       	ror	r31
    1858:	e7 95       	ror	r30
    185a:	9f 5f       	subi	r25, 0xFF	; 255
    185c:	c1 f7       	brne	.-16     	; 0x184e <__mulsf3_pse+0x8c>
    185e:	fe 2b       	or	r31, r30
    1860:	88 0f       	add	r24, r24
    1862:	91 1d       	adc	r25, r1
    1864:	96 95       	lsr	r25
    1866:	87 95       	ror	r24
    1868:	97 f9       	bld	r25, 7
    186a:	08 95       	ret

0000186c <__umulhisi3>:
    186c:	a2 9f       	mul	r26, r18
    186e:	b0 01       	movw	r22, r0
    1870:	b3 9f       	mul	r27, r19
    1872:	c0 01       	movw	r24, r0
    1874:	a3 9f       	mul	r26, r19
    1876:	70 0d       	add	r23, r0
    1878:	81 1d       	adc	r24, r1
    187a:	11 24       	eor	r1, r1
    187c:	91 1d       	adc	r25, r1
    187e:	b2 9f       	mul	r27, r18
    1880:	70 0d       	add	r23, r0
    1882:	81 1d       	adc	r24, r1
    1884:	11 24       	eor	r1, r1
    1886:	91 1d       	adc	r25, r1
    1888:	08 95       	ret

0000188a <__itoa_ncheck>:
    188a:	bb 27       	eor	r27, r27
    188c:	4a 30       	cpi	r20, 0x0A	; 10
    188e:	31 f4       	brne	.+12     	; 0x189c <__itoa_ncheck+0x12>
    1890:	99 23       	and	r25, r25
    1892:	22 f4       	brpl	.+8      	; 0x189c <__itoa_ncheck+0x12>
    1894:	bd e2       	ldi	r27, 0x2D	; 45
    1896:	90 95       	com	r25
    1898:	81 95       	neg	r24
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <__utoa_common>

0000189e <__utoa_ncheck>:
    189e:	bb 27       	eor	r27, r27

000018a0 <__utoa_common>:
    18a0:	fb 01       	movw	r30, r22
    18a2:	55 27       	eor	r21, r21
    18a4:	aa 27       	eor	r26, r26
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	aa 1f       	adc	r26, r26
    18ac:	a4 17       	cp	r26, r20
    18ae:	10 f0       	brcs	.+4      	; 0x18b4 <__utoa_common+0x14>
    18b0:	a4 1b       	sub	r26, r20
    18b2:	83 95       	inc	r24
    18b4:	50 51       	subi	r21, 0x10	; 16
    18b6:	b9 f7       	brne	.-18     	; 0x18a6 <__utoa_common+0x6>
    18b8:	a0 5d       	subi	r26, 0xD0	; 208
    18ba:	aa 33       	cpi	r26, 0x3A	; 58
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <__utoa_common+0x20>
    18be:	a9 5d       	subi	r26, 0xD9	; 217
    18c0:	a1 93       	st	Z+, r26
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	79 f7       	brne	.-34     	; 0x18a4 <__utoa_common+0x4>
    18c6:	b1 11       	cpse	r27, r1
    18c8:	b1 93       	st	Z+, r27
    18ca:	11 92       	st	Z+, r1
    18cc:	cb 01       	movw	r24, r22
    18ce:	00 c0       	rjmp	.+0      	; 0x18d0 <strrev>

000018d0 <strrev>:
    18d0:	dc 01       	movw	r26, r24
    18d2:	fc 01       	movw	r30, r24
    18d4:	67 2f       	mov	r22, r23
    18d6:	71 91       	ld	r23, Z+
    18d8:	77 23       	and	r23, r23
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <strrev+0x4>
    18dc:	32 97       	sbiw	r30, 0x02	; 2
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <strrev+0x18>
    18e0:	7c 91       	ld	r23, X
    18e2:	6d 93       	st	X+, r22
    18e4:	70 83       	st	Z, r23
    18e6:	62 91       	ld	r22, -Z
    18e8:	ae 17       	cp	r26, r30
    18ea:	bf 07       	cpc	r27, r31
    18ec:	c8 f3       	brcs	.-14     	; 0x18e0 <strrev+0x10>
    18ee:	08 95       	ret

000018f0 <_exit>:
    18f0:	f8 94       	cli

000018f2 <__stop_program>:
    18f2:	ff cf       	rjmp	.-2      	; 0x18f2 <__stop_program>


AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800146  00800146  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa6  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048f  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cc1  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000feea  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b8b  00000000  00000000  0001369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00014229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000a2c  00000000  00000000  00014319  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	1e c1       	rjmp	.+572    	; 0x252 <__vector_5>
  16:	00 00       	nop
  18:	47 c1       	rjmp	.+654    	; 0x2a8 <__vector_6>
  1a:	00 00       	nop
  1c:	70 c1       	rjmp	.+736    	; 0x2fe <__vector_7>
  1e:	00 00       	nop
  20:	99 c1       	rjmp	.+818    	; 0x354 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8b c0       	rjmp	.+278    	; 0x154 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 34       	cpi	r26, 0x46	; 70
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e4       	ldi	r26, 0x46	; 70
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 39       	cpi	r26, 0x93	; 147
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d2       	rcall	.+1192   	; 0x56c <main>
  c4:	71 c2       	rjmp	.+1250   	; 0x5a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Timer0_Init>:
uint8_t CountDownTimers[TIMER0_NUM_COUNTDOWNTIMERS];

void Timer0_Init(void){
		uint8_t i;
		for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
		CallbackFunc[i] = NULL;
  c8:	10 92 8c 01 	sts	0x018C, r1
  cc:	10 92 8b 01 	sts	0x018B, r1
  d0:	10 92 8e 01 	sts	0x018E, r1
  d4:	10 92 8d 01 	sts	0x018D, r1
  d8:	10 92 90 01 	sts	0x0190, r1
  dc:	10 92 8f 01 	sts	0x018F, r1
  e0:	10 92 92 01 	sts	0x0192, r1
  e4:	10 92 91 01 	sts	0x0191, r1
		for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
		CountDownTimers[i] = 0xff;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 93 87 01 	sts	0x0187, r24
  ee:	80 93 88 01 	sts	0x0188, r24
  f2:	80 93 89 01 	sts	0x0189, r24
  f6:	80 93 8a 01 	sts	0x018A, r24
		TCCR0 = 0x07;
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
  fe:	12 be       	out	0x32, r1	; 50
		TIFR |=_BV(TOV0);
 100:	86 b7       	in	r24, 0x36	; 54
 102:	81 60       	ori	r24, 0x01	; 1
 104:	86 bf       	out	0x36, r24	; 54
		TIMSK |= _BV(OCIE0);
 106:	87 b7       	in	r24, 0x37	; 55
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	87 bf       	out	0x37, r24	; 55
		sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <timer0_event>:
}

void timer0_event(void){
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cb e8       	ldi	r28, 0x8B	; 139
 11a:	d1 e0       	ldi	r29, 0x01	; 1
 11c:	03 e9       	ldi	r16, 0x93	; 147
 11e:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t i;
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	if (CallbackFunc[i] != NULL)
 120:	e9 91       	ld	r30, Y+
 122:	f9 91       	ld	r31, Y+
 124:	30 97       	sbiw	r30, 0x00	; 0
 126:	09 f0       	breq	.+2      	; 0x12a <timer0_event+0x1a>
	CallbackFunc[i]();
 128:	09 95       	icall
		sei();
}

void timer0_event(void){
	uint8_t i;
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
 12a:	c0 17       	cp	r28, r16
 12c:	d1 07       	cpc	r29, r17
 12e:	c1 f7       	brne	.-16     	; 0x120 <timer0_event+0x10>
 130:	e7 e8       	ldi	r30, 0x87	; 135
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	8b e8       	ldi	r24, 0x8B	; 139
 136:	91 e0       	ldi	r25, 0x01	; 1
	if (CallbackFunc[i] != NULL)
	CallbackFunc[i]();
	
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] != 0xff && CountDownTimers[i] != 0)
 138:	20 81       	ld	r18, Z
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	2e 3f       	cpi	r18, 0xFE	; 254
 13e:	08 f4       	brcc	.+2      	; 0x142 <timer0_event+0x32>
	CountDownTimers[i]--;
 140:	20 83       	st	Z, r18
 142:	31 96       	adiw	r30, 0x01	; 1
	uint8_t i;
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	if (CallbackFunc[i] != NULL)
	CallbackFunc[i]();
	
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
 144:	e8 17       	cp	r30, r24
 146:	f9 07       	cpc	r31, r25
 148:	b9 f7       	brne	.-18     	; 0x138 <timer0_event+0x28>
	if (CountDownTimers[i] != 0xff && CountDownTimers[i] != 0)
	CountDownTimers[i]--;
	
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <__vector_15>:

ISR(TIMER0_COMP_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31

	static uint8_t count=0;
	if(count++==30){
 17a:	80 91 46 01 	lds	r24, 0x0146
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	98 0f       	add	r25, r24
 182:	90 93 46 01 	sts	0x0146, r25
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_15+0x3c>
		timer0_event();
 18a:	c2 df       	rcall	.-124    	; 0x110 <timer0_event>
		count = 0;
 18c:	10 92 46 01 	sts	0x0146, r1
	}
	
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <Timer0_RegisterCallbackFunction>:
{
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (CallbackFunc[i] == pFunc)
 1b6:	40 91 8b 01 	lds	r20, 0x018B
 1ba:	50 91 8c 01 	lds	r21, 0x018C
 1be:	48 17       	cp	r20, r24
 1c0:	59 07       	cpc	r21, r25
 1c2:	81 f1       	breq	.+96     	; 0x224 <Timer0_RegisterCallbackFunction+0x6e>
 1c4:	20 91 8d 01 	lds	r18, 0x018D
 1c8:	30 91 8e 01 	lds	r19, 0x018E
 1cc:	28 17       	cp	r18, r24
 1ce:	39 07       	cpc	r19, r25
 1d0:	59 f1       	breq	.+86     	; 0x228 <Timer0_RegisterCallbackFunction+0x72>
 1d2:	60 91 8f 01 	lds	r22, 0x018F
 1d6:	70 91 90 01 	lds	r23, 0x0190
 1da:	68 17       	cp	r22, r24
 1dc:	79 07       	cpc	r23, r25
 1de:	31 f1       	breq	.+76     	; 0x22c <Timer0_RegisterCallbackFunction+0x76>
 1e0:	e0 91 91 01 	lds	r30, 0x0191
 1e4:	f0 91 92 01 	lds	r31, 0x0192
 1e8:	e8 17       	cp	r30, r24
 1ea:	f9 07       	cpc	r31, r25
 1ec:	09 f1       	breq	.+66     	; 0x230 <Timer0_RegisterCallbackFunction+0x7a>
		return true;
	}
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (CallbackFunc[i] == NULL)
 1ee:	45 2b       	or	r20, r21
 1f0:	79 f0       	breq	.+30     	; 0x210 <Timer0_RegisterCallbackFunction+0x5a>
 1f2:	23 2b       	or	r18, r19
 1f4:	39 f0       	breq	.+14     	; 0x204 <Timer0_RegisterCallbackFunction+0x4e>
 1f6:	67 2b       	or	r22, r23
 1f8:	41 f0       	breq	.+16     	; 0x20a <Timer0_RegisterCallbackFunction+0x54>
 1fa:	ef 2b       	or	r30, r31
 1fc:	d9 f4       	brne	.+54     	; 0x234 <Timer0_RegisterCallbackFunction+0x7e>
 1fe:	e3 e0       	ldi	r30, 0x03	; 3
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	08 c0       	rjmp	.+16     	; 0x214 <Timer0_RegisterCallbackFunction+0x5e>
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	05 c0       	rjmp	.+10     	; 0x214 <Timer0_RegisterCallbackFunction+0x5e>
 20a:	e2 e0       	ldi	r30, 0x02	; 2
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <Timer0_RegisterCallbackFunction+0x5e>
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	f0 e0       	ldi	r31, 0x00	; 0
		{
			CallbackFunc[i] = pFunc;
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e5 57       	subi	r30, 0x75	; 117
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	91 83       	std	Z+1, r25	; 0x01
 21e:	80 83       	st	Z, r24
			return true;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret
	uint8_t i;
	
	for (i=0; i<TIMER0_NUM_CALLBACKS; i++)
	{
		if (CallbackFunc[i] == pFunc)
		return true;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	08 95       	ret
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	08 95       	ret
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret
			CallbackFunc[i] = pFunc;
			return true;
		}
	}
	
	return false;
 234:	80 e0       	ldi	r24, 0x00	; 0
}
 236:	08 95       	ret

00000238 <buttons_init>:
#include <asf.h>
#include "buttons.h"
#include "modules/lcd12864.h"

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
 238:	80 ef       	ldi	r24, 0xF0	; 240
 23a:	82 b9       	out	0x02, r24	; 2
	BUTTON_PULLUP;
 23c:	83 b1       	in	r24, 0x03	; 3
 23e:	80 6f       	ori	r24, 0xF0	; 240
 240:	83 b9       	out	0x03, r24	; 3
	EICRB |= _BV(ISC41)|_BV(ISC51)|_BV(ISC61)|_BV(ISC71);
 242:	8a b7       	in	r24, 0x3a	; 58
 244:	8a 6a       	ori	r24, 0xAA	; 170
 246:	8a bf       	out	0x3a, r24	; 58
	
	EIMSK |= _BV(BUTTON1_INTRRUPT)|_BV(BUTTON2_INTRRUPT)|_BV(BUTTON3_INTRRUPT)|_BV(BUTTON4_INTRRUPT);
 248:	89 b7       	in	r24, 0x39	; 57
 24a:	80 6f       	ori	r24, 0xF0	; 240
 24c:	89 bf       	out	0x39, r24	; 57
	sei();
 24e:	78 94       	sei
 250:	08 95       	ret

00000252 <__vector_5>:
	
}

ISR(INT4_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	0b b6       	in	r0, 0x3b	; 59
 25e:	0f 92       	push	r0
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
cli();	
 278:	f8 94       	cli
lcd12864_loop("Button INT4");	
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	3d d1       	rcall	.+634    	; 0x4fa <lcd12864_loop>
sei();
 280:	78 94       	sei
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0b be       	out	0x3b, r0	; 59
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_6>:

ISR(INT5_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	0b b6       	in	r0, 0x3b	; 59
 2b4:	0f 92       	push	r0
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	cli();
 2ce:	f8 94       	cli
	lcd12864_loop("Button INT5");
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	12 d1       	rcall	.+548    	; 0x4fa <lcd12864_loop>
	sei();
 2d6:	78 94       	sei
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_7>:

ISR(INT6_vect){
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	0b b6       	in	r0, 0x3b	; 59
 30a:	0f 92       	push	r0
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	cli();
 324:	f8 94       	cli
	lcd12864_loop("Button INT6");
 326:	89 e1       	ldi	r24, 0x19	; 25
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	e7 d0       	rcall	.+462    	; 0x4fa <lcd12864_loop>
	sei();
 32c:	78 94       	sei
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0b be       	out	0x3b, r0	; 59
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_8>:

ISR(INT7_vect){
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	0b b6       	in	r0, 0x3b	; 59
 360:	0f 92       	push	r0
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
	cli();
 37a:	f8 94       	cli
	lcd12864_loop("Button INT7");
 37c:	85 e2       	ldi	r24, 0x25	; 37
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	bc d0       	rcall	.+376    	; 0x4fa <lcd12864_loop>
	sei();
 382:	78 94       	sei
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0b be       	out	0x3b, r0	; 59
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <lcd12864_send_data>:

}

void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
	lcd12864_wait_busy();
 3aa:	98 e0       	ldi	r25, 0x08	; 8
 3ac:	e5 e6       	ldi	r30, 0x65	; 101
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	88 23       	and	r24, r24
 3b2:	24 f4       	brge	.+8      	; 0x3bc <lcd12864_send_data+0x12>
 3b4:	20 81       	ld	r18, Z
 3b6:	28 60       	ori	r18, 0x08	; 8
 3b8:	20 83       	st	Z, r18
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <lcd12864_send_data+0x18>
 3bc:	20 81       	ld	r18, Z
 3be:	27 7f       	andi	r18, 0xF7	; 247
 3c0:	20 83       	st	Z, r18
 3c2:	88 0f       	add	r24, r24
 3c4:	20 81       	ld	r18, Z
 3c6:	20 61       	ori	r18, 0x10	; 16
 3c8:	20 83       	st	Z, r18
 3ca:	00 00       	nop
 3cc:	20 81       	ld	r18, Z
 3ce:	2f 7e       	andi	r18, 0xEF	; 239
 3d0:	20 83       	st	Z, r18
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	69 f7       	brne	.-38     	; 0x3b0 <lcd12864_send_data+0x6>
 3d6:	08 95       	ret

000003d8 <lcd12864_wait_busy>:
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	80 32       	cpi	r24, 0x20	; 32
 3e0:	23 e0       	ldi	r18, 0x03	; 3
 3e2:	92 07       	cpc	r25, r18
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <lcd12864_wait_busy+0x4>
 3e6:	08 95       	ret

000003e8 <lcd12864_send_cmd>:
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	18 2f       	mov	r17, r24
 3f0:	c5 e6       	ldi	r28, 0x65	; 101
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
 3f4:	88 81       	ld	r24, Y
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	88 83       	st	Y, r24
 3fa:	ee df       	rcall	.-36     	; 0x3d8 <lcd12864_wait_busy>
 3fc:	88 ef       	ldi	r24, 0xF8	; 248
 3fe:	d5 df       	rcall	.-86     	; 0x3aa <lcd12864_send_data>
 400:	81 2f       	mov	r24, r17
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	d2 df       	rcall	.-92     	; 0x3aa <lcd12864_send_data>
 406:	81 2f       	mov	r24, r17
 408:	82 95       	swap	r24
 40a:	80 7f       	andi	r24, 0xF0	; 240
 40c:	ce df       	rcall	.-100    	; 0x3aa <lcd12864_send_data>
 40e:	88 81       	ld	r24, Y
 410:	8b 7f       	andi	r24, 0xFB	; 251
 412:	88 83       	st	Y, r24
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	08 95       	ret

0000041c <lcd12864_init>:
 41c:	e4 e6       	ldi	r30, 0x64	; 100
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8e 61       	ori	r24, 0x1E	; 30
 424:	80 83       	st	Z, r24
 426:	e5 e6       	ldi	r30, 0x65	; 101
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	80 83       	st	Z, r24
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	85 31       	cpi	r24, 0x15	; 21
 438:	24 e3       	ldi	r18, 0x34	; 52
 43a:	92 07       	cpc	r25, r18
 43c:	d9 f7       	brne	.-10     	; 0x434 <lcd12864_init+0x18>
 43e:	80 e3       	ldi	r24, 0x30	; 48
 440:	d3 df       	rcall	.-90     	; 0x3e8 <lcd12864_send_cmd>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	d1 df       	rcall	.-94     	; 0x3e8 <lcd12864_send_cmd>
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	cf df       	rcall	.-98     	; 0x3e8 <lcd12864_send_cmd>
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	cd cf       	rjmp	.-102    	; 0x3e8 <lcd12864_send_cmd>
 44e:	08 95       	ret

00000450 <lcd12864_write_char>:
	

	
}

void lcd12864_write_char(char data){
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	18 2f       	mov	r17, r24
		LCD12864_ENABLE;
 458:	c5 e6       	ldi	r28, 0x65	; 101
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	88 81       	ld	r24, Y
 45e:	84 60       	ori	r24, 0x04	; 4
 460:	88 83       	st	Y, r24
		lcd12864_wait_busy();
 462:	ba df       	rcall	.-140    	; 0x3d8 <lcd12864_wait_busy>
		lcd12864_send_data(0xfa);
 464:	8a ef       	ldi	r24, 0xFA	; 250
 466:	a1 df       	rcall	.-190    	; 0x3aa <lcd12864_send_data>
		lcd12864_send_data(0xf0&data);
 468:	81 2f       	mov	r24, r17
 46a:	80 7f       	andi	r24, 0xF0	; 240
 46c:	9e df       	rcall	.-196    	; 0x3aa <lcd12864_send_data>
		lcd12864_send_data(0xf0&data<<4);
 46e:	81 2f       	mov	r24, r17
 470:	82 95       	swap	r24
 472:	80 7f       	andi	r24, 0xF0	; 240
 474:	9a df       	rcall	.-204    	; 0x3aa <lcd12864_send_data>
		LCD12864_DISABLE;
 476:	88 81       	ld	r24, Y
 478:	8b 7f       	andi	r24, 0xFB	; 251
 47a:	88 83       	st	Y, r24
	
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	08 95       	ret

00000484 <lcd12864_set_pos>:
	lcd12864_send_data(cmd & 0xf0);
	lcd12864_send_data(cmd<<4);
	LCD12864_DISABLE;
}

void lcd12864_set_pos(uint8_t x, uint8_t y){
 484:	cf 93       	push	r28
 486:	c8 2f       	mov	r28, r24
	uint8_t tmp;
	switch(y){
 488:	62 30       	cpi	r22, 0x02	; 2
 48a:	89 f0       	breq	.+34     	; 0x4ae <lcd12864_set_pos+0x2a>
 48c:	18 f4       	brcc	.+6      	; 0x494 <lcd12864_set_pos+0x10>
 48e:	61 30       	cpi	r22, 0x01	; 1
 490:	31 f0       	breq	.+12     	; 0x49e <lcd12864_set_pos+0x1a>
 492:	0b c0       	rjmp	.+22     	; 0x4aa <lcd12864_set_pos+0x26>
 494:	63 30       	cpi	r22, 0x03	; 3
 496:	29 f0       	breq	.+10     	; 0x4a2 <lcd12864_set_pos+0x1e>
 498:	64 30       	cpi	r22, 0x04	; 4
 49a:	29 f0       	breq	.+10     	; 0x4a6 <lcd12864_set_pos+0x22>
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <lcd12864_set_pos+0x26>
		case 1:
			tmp=0x80; break;
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <lcd12864_set_pos+0x2c>
		case 2:
			tmp=0x90; break;
		case 3:
			tmp=0x88; break;
 4a2:	88 e8       	ldi	r24, 0x88	; 136
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <lcd12864_set_pos+0x2c>
		case 4:
			tmp=0x98; break;
 4a6:	88 e9       	ldi	r24, 0x98	; 152
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <lcd12864_set_pos+0x2c>
		default:
			tmp=0x98;
 4aa:	88 e9       	ldi	r24, 0x98	; 152
			break;
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <lcd12864_set_pos+0x2c>
	uint8_t tmp;
	switch(y){
		case 1:
			tmp=0x80; break;
		case 2:
			tmp=0x90; break;
 4ae:	80 e9       	ldi	r24, 0x90	; 144
			tmp=0x98;
			break;
				
	}
	
	if(x>16) return; 
 4b0:	c1 31       	cpi	r28, 0x11	; 17
 4b2:	68 f4       	brcc	.+26     	; 0x4ce <lcd12864_set_pos+0x4a>
	
	lcd12864_send_cmd(tmp+(x+1)/2-1);
 4b4:	2c 2f       	mov	r18, r28
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	2f 5f       	subi	r18, 0xFF	; 255
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	35 95       	asr	r19
 4be:	27 95       	ror	r18
 4c0:	21 50       	subi	r18, 0x01	; 1
 4c2:	82 0f       	add	r24, r18
 4c4:	91 df       	rcall	.-222    	; 0x3e8 <lcd12864_send_cmd>
	if(x%2==0)
 4c6:	c0 fd       	sbrc	r28, 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <lcd12864_set_pos+0x4a>
		lcd12864_write_char(0x20);
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	c1 df       	rcall	.-126    	; 0x450 <lcd12864_write_char>
	

	
}
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <lcd12864_write_str>:
		LCD12864_DISABLE;
	
}


void lcd12864_write_str(char *str){
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
 4da:	88 81       	ld	r24, Y
 4dc:	88 23       	and	r24, r24
 4de:	49 f0       	breq	.+18     	; 0x4f2 <lcd12864_write_str+0x20>
 4e0:	10 e0       	ldi	r17, 0x00	; 0
		lcd12864_write_char(str[i]);
 4e2:	b6 df       	rcall	.-148    	; 0x450 <lcd12864_write_char>
}


void lcd12864_write_str(char *str){
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
 4e4:	1f 5f       	subi	r17, 0xFF	; 255
 4e6:	fe 01       	movw	r30, r28
 4e8:	e1 0f       	add	r30, r17
 4ea:	f1 1d       	adc	r31, r1
 4ec:	80 81       	ld	r24, Z
 4ee:	81 11       	cpse	r24, r1
 4f0:	f8 cf       	rjmp	.-16     	; 0x4e2 <lcd12864_write_str+0x10>
		lcd12864_write_char(str[i]);
	}
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <lcd12864_loop>:



void lcd12864_loop(char *str){
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	7c 01       	movw	r14, r24
 508:	07 e8       	ldi	r16, 0x87	; 135
 50a:	11 e0       	ldi	r17, 0x01	; 1
 50c:	87 e4       	ldi	r24, 0x47	; 71
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	ec 01       	movw	r28, r24
 512:	60 96       	adiw	r28, 0x10	; 16
	static char buffer[4][16];
	uint8_t i;
	for(i=0;i<4;i++){
		strcpy(buffer[i],buffer[i+1]);
 514:	be 01       	movw	r22, r28
 516:	41 d0       	rcall	.+130    	; 0x59a <strcpy>


void lcd12864_loop(char *str){
	static char buffer[4][16];
	uint8_t i;
	for(i=0;i<4;i++){
 518:	c0 17       	cp	r28, r16
 51a:	d1 07       	cpc	r29, r17
 51c:	11 f0       	breq	.+4      	; 0x522 <lcd12864_loop+0x28>
 51e:	ce 01       	movw	r24, r28
 520:	f7 cf       	rjmp	.-18     	; 0x510 <lcd12864_loop+0x16>
		strcpy(buffer[i],buffer[i+1]);
	}
	strcpy(buffer[3],str);
 522:	b7 01       	movw	r22, r14
 524:	87 e7       	ldi	r24, 0x77	; 119
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	38 d0       	rcall	.+112    	; 0x59a <strcpy>
 52a:	c7 e4       	ldi	r28, 0x47	; 71
 52c:	d1 e0       	ldi	r29, 0x01	; 1
	
	for (i=0;i<4;i++)
 52e:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd12864_set_pos(1,i+1);
 530:	1f 5f       	subi	r17, 0xFF	; 255
 532:	61 2f       	mov	r22, r17
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	a6 df       	rcall	.-180    	; 0x484 <lcd12864_set_pos>
		lcd12864_write_str(buffer[i]);
 538:	ce 01       	movw	r24, r28
 53a:	cb df       	rcall	.-106    	; 0x4d2 <lcd12864_write_str>
 53c:	60 96       	adiw	r28, 0x10	; 16
	for(i=0;i<4;i++){
		strcpy(buffer[i],buffer[i+1]);
	}
	strcpy(buffer[3],str);
	
	for (i=0;i<4;i++)
 53e:	14 30       	cpi	r17, 0x04	; 4
 540:	b9 f7       	brne	.-18     	; 0x530 <lcd12864_loop+0x36>
		
	}
	
	
	
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	08 95       	ret

00000550 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 550:	08 95       	ret

00000552 <toggle_led>:
#include "modules/buttons.h"
#include "modules/timer0.h"

static void toggle_led(void){
	static bool i=true;
	if(i){
 552:	80 91 00 01 	lds	r24, 0x0100
 556:	88 23       	and	r24, r24
 558:	21 f0       	breq	.+8      	; 0x562 <toggle_led+0x10>
		PORTC |=_BV(1);
 55a:	a9 9a       	sbi	0x15, 1	; 21
		i=false;
 55c:	10 92 00 01 	sts	0x0100, r1
 560:	08 95       	ret
	}
	else{
		PORTC &=~_BV(1);
 562:	a9 98       	cbi	0x15, 1	; 21
		i=true;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 00 01 	sts	0x0100, r24
 56a:	08 95       	ret

0000056c <main>:

int main (void)
{
	
	/* Insert system clock initialization code here (sysclk_init()). */
	DDRC = 0xff;
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
 570:	85 bb       	out	0x15, r24	; 21
	board_init();
 572:	ee df       	rcall	.-36     	; 0x550 <board_init>

	lcd12864_init();
 574:	53 df       	rcall	.-346    	; 0x41c <lcd12864_init>
	buttons_init();
 576:	60 de       	rcall	.-832    	; 0x238 <buttons_init>
	
	lcd12864_set_pos(1,1);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	83 df       	rcall	.-250    	; 0x484 <lcd12864_set_pos>
	lcd12864_write_str("Hello, World!");
 57e:	81 e3       	ldi	r24, 0x31	; 49
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	a7 df       	rcall	.-178    	; 0x4d2 <lcd12864_write_str>
	Timer0_Init();
 584:	a1 dd       	rcall	.-1214   	; 0xc8 <Timer0_Init>
	
	if(!Timer0_RegisterCallbackFunction(toggle_led))
 586:	89 ea       	ldi	r24, 0xA9	; 169
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	15 de       	rcall	.-982    	; 0x1b6 <Timer0_RegisterCallbackFunction>
 58c:	81 11       	cpse	r24, r1
 58e:	04 c0       	rjmp	.+8      	; 0x598 <main+0x2c>
	lcd12864_loop("error");
 590:	8f e3       	ldi	r24, 0x3F	; 63
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	b2 df       	rcall	.-156    	; 0x4fa <lcd12864_loop>
 596:	fb cf       	rjmp	.-10     	; 0x58e <main+0x22>
 598:	ff cf       	rjmp	.-2      	; 0x598 <main+0x2c>

0000059a <strcpy>:
 59a:	fb 01       	movw	r30, r22
 59c:	dc 01       	movw	r26, r24
 59e:	01 90       	ld	r0, Z+
 5a0:	0d 92       	st	X+, r0
 5a2:	00 20       	and	r0, r0
 5a4:	e1 f7       	brne	.-8      	; 0x59e <strcpy+0x4>
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>

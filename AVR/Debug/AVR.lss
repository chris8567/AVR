
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000332  00800100  00000d2a  00000dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800432  00800432  000010f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001566  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000885  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002fac  00000000  00000000  0000310b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000438  00000000  00000000  000060b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010c5e  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae8  00000000  00000000  0001714e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00017c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000f77  00000000  00000000  00017db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	d3 c5       	rjmp	.+2982   	; 0xbb0 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f3 c4       	rjmp	.+2534   	; 0xa24 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	14 e0       	ldi	r17, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b4 e0       	ldi	r27, 0x04	; 4
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 37       	cpi	r26, 0x79	; 121
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	29 d6       	rcall	.+3154   	; 0xd16 <main>
  c4:	30 c6       	rjmp	.+3168   	; 0xd26 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Act_Update_Main>:
 *  Author: 305031727
 */ 

#include "actions.h"

void Act_Update_Main(void){
  c8:	08 95       	ret

000000ca <emv_ports_init>:
uint16_t emv_control_word = 0xff;
bool emv_working = false;
uint8_t blower_on_time_ms = 100;
uint8_t blower_interval_s = 2; 
void emv_ports_init(void){
	DDRB |= _BV(7)|_BV(6)|_BV(5);
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	80 6e       	ori	r24, 0xE0	; 224
  ce:	87 bb       	out	0x17, r24	; 23
	DDRG |= _BV(3)|_BV(4);
  d0:	e4 e6       	ldi	r30, 0x64	; 100
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 61       	ori	r24, 0x18	; 24
  d8:	80 83       	st	Z, r24
	SCK_LOW;
  da:	e5 e6       	ldi	r30, 0x65	; 101
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	80 83       	st	Z, r24
	RCK_LOW;
  e4:	c7 98       	cbi	0x18, 7	; 24
	MR_HIGH;
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
	OEn_LOW;
  ec:	c6 98       	cbi	0x18, 6	; 24
  ee:	08 95       	ret

000000f0 <init_IO>:
 */ 
#include <asf.h>
#include "modules/io.h"

void init_IO(void){
	DDRB |=_BV(0); 
  f0:	b8 9a       	sbi	0x17, 0	; 23
	DDRF |=_BV(3);
  f2:	e1 e6       	ldi	r30, 0x61	; 97
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	DDRG |=_BV(0);
  fc:	e4 e6       	ldi	r30, 0x64	; 100
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	
	PORTB |= _BV(0);
 106:	c0 9a       	sbi	0x18, 0	; 24
	PORTF |= _BV(3);
 108:	e2 e6       	ldi	r30, 0x62	; 98
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	PORTG &= ~_BV(0);
 112:	e5 e6       	ldi	r30, 0x65	; 101
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <DrawScreen>:
//	CurrentState				UP_NEXT					DOWN_NEXT						LEFT_NEXT					RIGHT_NEXT					ENT_NEXT					UP_ACTION		DOWN_ACTION			LEFT_ACTION		RIGHT_ACTION		ENT_ACTION		TIMER_ACTI
	  


	void DrawScreen(void){
		lcd12864_clear();
 11e:	ba d5       	rcall	.+2932   	; 0xc94 <lcd12864_clear>
		lcd12864_set_pos(0,1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	bb d5       	rcall	.+2934   	; 0xc9c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[0]);
 126:	80 91 37 04 	lds	r24, 0x0437
 12a:	90 91 38 04 	lds	r25, 0x0438
 12e:	df d5       	rcall	.+3006   	; 0xcee <lcd12864_write_str>
		lcd12864_set_pos(0,2);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	b3 d5       	rcall	.+2918   	; 0xc9c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[1]);
 136:	80 91 39 04 	lds	r24, 0x0439
 13a:	90 91 3a 04 	lds	r25, 0x043A
 13e:	d7 d5       	rcall	.+2990   	; 0xcee <lcd12864_write_str>
		lcd12864_set_pos(0,3);
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	ab d5       	rcall	.+2902   	; 0xc9c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[2]);
 146:	80 91 3b 04 	lds	r24, 0x043B
 14a:	90 91 3c 04 	lds	r25, 0x043C
 14e:	cf d5       	rcall	.+2974   	; 0xcee <lcd12864_write_str>
		lcd12864_set_pos(0,4);
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	a3 d5       	rcall	.+2886   	; 0xc9c <lcd12864_set_pos>
		lcd12864_write_str(SYS_Screen_Buffer.line[3]);
 156:	80 91 3d 04 	lds	r24, 0x043D
 15a:	90 91 3e 04 	lds	r25, 0x043E
 15e:	c7 d5       	rcall	.+2958   	; 0xcee <lcd12864_write_str>
		switch(SYS_Screen_Buffer.white_index){
 160:	80 91 3f 04 	lds	r24, 0x043F
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	51 f0       	breq	.+20     	; 0x17c <DrawScreen+0x5e>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	71 f0       	breq	.+28     	; 0x188 <DrawScreen+0x6a>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	89 f4       	brne	.+34     	; 0x192 <DrawScreen+0x74>
			case 1:
				lcd12864_set_pos(0,1); 
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	93 d5       	rcall	.+2854   	; 0xc9c <lcd12864_set_pos>
				lcd12864_write_char('*');
 176:	8a e2       	ldi	r24, 0x2A	; 42
 178:	aa c5       	rjmp	.+2900   	; 0xcce <lcd12864_write_char>
				break;
 17a:	08 95       	ret
			case 2:
				lcd12864_set_pos(0,2);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	8d d5       	rcall	.+2842   	; 0xc9c <lcd12864_set_pos>
				lcd12864_write_char('*');
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	a4 c5       	rjmp	.+2888   	; 0xcce <lcd12864_write_char>
				break;
 186:	08 95       	ret
			case 3:
				lcd12864_set_pos(0,3);
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	87 d5       	rcall	.+2830   	; 0xc9c <lcd12864_set_pos>
				lcd12864_write_char('*');
 18e:	8a e2       	ldi	r24, 0x2A	; 42
 190:	9e c5       	rjmp	.+2876   	; 0xcce <lcd12864_write_char>
 192:	08 95       	ret

00000194 <FindState>:
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
			if(State_List[i].Current_State == statename)
 194:	20 91 00 01 	lds	r18, 0x0100
 198:	30 91 01 01 	lds	r19, 0x0101
 19c:	28 17       	cp	r18, r24
 19e:	39 07       	cpc	r19, r25
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <FindState+0x24>
 1a2:	e8 e1       	ldi	r30, 0x18	; 24
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	40 81       	ld	r20, Z
 1ae:	51 81       	ldd	r21, Z+1	; 0x01
 1b0:	48 17       	cp	r20, r24
 1b2:	59 07       	cpc	r21, r25
 1b4:	91 f4       	brne	.+36     	; 0x1da <FindState+0x46>
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <FindState+0x28>
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
			return &State_List[i];
 1bc:	cb 01       	movw	r24, r22
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	68 0f       	add	r22, r24
 1c4:	79 1f       	adc	r23, r25
 1c6:	cb 01       	movw	r24, r22
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	80 50       	subi	r24, 0x00	; 0
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	08 95       	ret
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	78 96       	adiw	r30, 0x18	; 24
		}
		
	}
	
Type_State *FindState(uint16_t statename){
		for(uint8_t i=0; i<STATE_LIST_LENGTH;i++){
 1e0:	21 31       	cpi	r18, 0x11	; 17
 1e2:	31 05       	cpc	r19, r1
 1e4:	11 f7       	brne	.-60     	; 0x1aa <FindState+0x16>
			if(State_List[i].Current_State == statename)
			return &State_List[i];
		}
		return NULL;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
		
	}
 1ea:	08 95       	ret

000001ec <State_Update>:
		State_Update();
		DrawScreen();
	}
	
	void State_Update(void){
		switch(SYS_State->Current_State){
 1ec:	e0 91 32 04 	lds	r30, 0x0432
 1f0:	f0 91 33 04 	lds	r31, 0x0433
 1f4:	80 81       	ld	r24, Z
 1f6:	91 81       	ldd	r25, Z+1	; 0x01
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	20 e2       	ldi	r18, 0x20	; 32
 1fc:	92 07       	cpc	r25, r18
 1fe:	09 f4       	brne	.+2      	; 0x202 <State_Update+0x16>
 200:	a4 c1       	rjmp	.+840    	; 0x54a <State_Update+0x35e>
 202:	78 f5       	brcc	.+94     	; 0x262 <State_Update+0x76>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	20 e1       	ldi	r18, 0x10	; 16
 208:	92 07       	cpc	r25, r18
 20a:	09 f4       	brne	.+2      	; 0x20e <State_Update+0x22>
 20c:	ea c0       	rjmp	.+468    	; 0x3e2 <State_Update+0x1f6>
 20e:	a0 f4       	brcc	.+40     	; 0x238 <State_Update+0x4c>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	20 e1       	ldi	r18, 0x10	; 16
 214:	92 07       	cpc	r25, r18
 216:	09 f4       	brne	.+2      	; 0x21a <State_Update+0x2e>
 218:	78 c0       	rjmp	.+240    	; 0x30a <State_Update+0x11e>
 21a:	20 f4       	brcc	.+8      	; 0x224 <State_Update+0x38>
 21c:	89 2b       	or	r24, r25
 21e:	09 f4       	brne	.+2      	; 0x222 <State_Update+0x36>
 220:	51 c0       	rjmp	.+162    	; 0x2c4 <State_Update+0xd8>
 222:	08 95       	ret
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	20 e1       	ldi	r18, 0x10	; 16
 228:	92 07       	cpc	r25, r18
 22a:	09 f4       	brne	.+2      	; 0x22e <State_Update+0x42>
 22c:	92 c0       	rjmp	.+292    	; 0x352 <State_Update+0x166>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	90 41       	sbci	r25, 0x10	; 16
 232:	09 f4       	brne	.+2      	; 0x236 <State_Update+0x4a>
 234:	b2 c0       	rjmp	.+356    	; 0x39a <State_Update+0x1ae>
 236:	08 95       	ret
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	20 e2       	ldi	r18, 0x20	; 32
 23c:	92 07       	cpc	r25, r18
 23e:	09 f4       	brne	.+2      	; 0x242 <State_Update+0x56>
 240:	18 c1       	rjmp	.+560    	; 0x472 <State_Update+0x286>
 242:	28 f4       	brcc	.+10     	; 0x24e <State_Update+0x62>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	90 41       	sbci	r25, 0x10	; 16
 248:	09 f4       	brne	.+2      	; 0x24c <State_Update+0x60>
 24a:	ef c0       	rjmp	.+478    	; 0x42a <State_Update+0x23e>
 24c:	08 95       	ret
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	20 e2       	ldi	r18, 0x20	; 32
 252:	92 07       	cpc	r25, r18
 254:	09 f4       	brne	.+2      	; 0x258 <State_Update+0x6c>
 256:	31 c1       	rjmp	.+610    	; 0x4ba <State_Update+0x2ce>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	90 42       	sbci	r25, 0x20	; 32
 25c:	09 f4       	brne	.+2      	; 0x260 <State_Update+0x74>
 25e:	51 c1       	rjmp	.+674    	; 0x502 <State_Update+0x316>
 260:	08 95       	ret
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	20 e3       	ldi	r18, 0x30	; 48
 266:	92 07       	cpc	r25, r18
 268:	09 f4       	brne	.+2      	; 0x26c <State_Update+0x80>
 26a:	23 c2       	rjmp	.+1094   	; 0x6b2 <State_Update+0x4c6>
 26c:	88 f4       	brcc	.+34     	; 0x290 <State_Update+0xa4>
 26e:	86 30       	cpi	r24, 0x06	; 6
 270:	20 e2       	ldi	r18, 0x20	; 32
 272:	92 07       	cpc	r25, r18
 274:	09 f4       	brne	.+2      	; 0x278 <State_Update+0x8c>
 276:	b1 c1       	rjmp	.+866    	; 0x5da <State_Update+0x3ee>
 278:	08 f4       	brcc	.+2      	; 0x27c <State_Update+0x90>
 27a:	8b c1       	rjmp	.+790    	; 0x592 <State_Update+0x3a6>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	20 e3       	ldi	r18, 0x30	; 48
 280:	92 07       	cpc	r25, r18
 282:	09 f4       	brne	.+2      	; 0x286 <State_Update+0x9a>
 284:	ce c1       	rjmp	.+924    	; 0x622 <State_Update+0x436>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	90 43       	sbci	r25, 0x30	; 48
 28a:	09 f4       	brne	.+2      	; 0x28e <State_Update+0xa2>
 28c:	ee c1       	rjmp	.+988    	; 0x66a <State_Update+0x47e>
 28e:	08 95       	ret
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	21 e3       	ldi	r18, 0x31	; 49
 294:	92 07       	cpc	r25, r18
 296:	09 f4       	brne	.+2      	; 0x29a <State_Update+0xae>
 298:	78 c2       	rjmp	.+1264   	; 0x78a <State_Update+0x59e>
 29a:	50 f4       	brcc	.+20     	; 0x2b0 <State_Update+0xc4>
 29c:	84 30       	cpi	r24, 0x04	; 4
 29e:	20 e3       	ldi	r18, 0x30	; 48
 2a0:	92 07       	cpc	r25, r18
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <State_Update+0xba>
 2a4:	2a c2       	rjmp	.+1108   	; 0x6fa <State_Update+0x50e>
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	90 43       	sbci	r25, 0x30	; 48
 2aa:	09 f4       	brne	.+2      	; 0x2ae <State_Update+0xc2>
 2ac:	4a c2       	rjmp	.+1172   	; 0x742 <State_Update+0x556>
 2ae:	08 95       	ret
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	21 e3       	ldi	r18, 0x31	; 49
 2b4:	92 07       	cpc	r25, r18
 2b6:	09 f4       	brne	.+2      	; 0x2ba <State_Update+0xce>
 2b8:	99 c2       	rjmp	.+1330   	; 0x7ec <State_Update+0x600>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	91 43       	sbci	r25, 0x31	; 49
 2be:	09 f4       	brne	.+2      	; 0x2c2 <State_Update+0xd6>
 2c0:	c6 c2       	rjmp	.+1420   	; 0x84e <State_Update+0x662>
 2c2:	08 95       	ret
			case MENU_STATE_MAIN:
				SYS_Screen_Buffer.line[0] = Display_Strings[0];
 2c4:	80 91 98 02 	lds	r24, 0x0298
 2c8:	90 91 99 02 	lds	r25, 0x0299
 2cc:	90 93 38 04 	sts	0x0438, r25
 2d0:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[1];
 2d4:	80 91 9a 02 	lds	r24, 0x029A
 2d8:	90 91 9b 02 	lds	r25, 0x029B
 2dc:	90 93 3a 04 	sts	0x043A, r25
 2e0:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[2];
 2e4:	80 91 9c 02 	lds	r24, 0x029C
 2e8:	90 91 9d 02 	lds	r25, 0x029D
 2ec:	90 93 3c 04 	sts	0x043C, r25
 2f0:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[3];
 2f4:	80 91 9e 02 	lds	r24, 0x029E
 2f8:	90 91 9f 02 	lds	r25, 0x029F
 2fc:	90 93 3e 04 	sts	0x043E, r25
 300:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 0;
 304:	10 92 3f 04 	sts	0x043F, r1
				break;
 308:	08 95       	ret
			case MENU_STATE_ITEMLIST_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[5]; 
 30a:	80 91 a2 02 	lds	r24, 0x02A2
 30e:	90 91 a3 02 	lds	r25, 0x02A3
 312:	90 93 38 04 	sts	0x0438, r25
 316:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
 31a:	80 91 a4 02 	lds	r24, 0x02A4
 31e:	90 91 a5 02 	lds	r25, 0x02A5
 322:	90 93 3a 04 	sts	0x043A, r25
 326:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
 32a:	80 91 a6 02 	lds	r24, 0x02A6
 32e:	90 91 a7 02 	lds	r25, 0x02A7
 332:	90 93 3c 04 	sts	0x043C, r25
 336:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 33a:	80 91 d0 02 	lds	r24, 0x02D0
 33e:	90 91 d1 02 	lds	r25, 0x02D1
 342:	90 93 3e 04 	sts	0x043E, r25
 346:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 3f 04 	sts	0x043F, r24
				break;
 350:	08 95       	ret
			case MENU_STATE_ITEMLIST_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
 352:	80 91 a2 02 	lds	r24, 0x02A2
 356:	90 91 a3 02 	lds	r25, 0x02A3
 35a:	90 93 38 04 	sts	0x0438, r25
 35e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
 362:	80 91 a4 02 	lds	r24, 0x02A4
 366:	90 91 a5 02 	lds	r25, 0x02A5
 36a:	90 93 3a 04 	sts	0x043A, r25
 36e:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
 372:	80 91 a6 02 	lds	r24, 0x02A6
 376:	90 91 a7 02 	lds	r25, 0x02A7
 37a:	90 93 3c 04 	sts	0x043C, r25
 37e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 382:	80 91 d0 02 	lds	r24, 0x02D0
 386:	90 91 d1 02 	lds	r25, 0x02D1
 38a:	90 93 3e 04 	sts	0x043E, r25
 38e:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	80 93 3f 04 	sts	0x043F, r24
				break;
 398:	08 95       	ret
			case MENU_STATE_ITEMLIST_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[5];
 39a:	80 91 a2 02 	lds	r24, 0x02A2
 39e:	90 91 a3 02 	lds	r25, 0x02A3
 3a2:	90 93 38 04 	sts	0x0438, r25
 3a6:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[6];
 3aa:	80 91 a4 02 	lds	r24, 0x02A4
 3ae:	90 91 a5 02 	lds	r25, 0x02A5
 3b2:	90 93 3a 04 	sts	0x043A, r25
 3b6:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[7];
 3ba:	80 91 a6 02 	lds	r24, 0x02A6
 3be:	90 91 a7 02 	lds	r25, 0x02A7
 3c2:	90 93 3c 04 	sts	0x043C, r25
 3c6:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 3ca:	80 91 d0 02 	lds	r24, 0x02D0
 3ce:	90 91 d1 02 	lds	r25, 0x02D1
 3d2:	90 93 3e 04 	sts	0x043E, r25
 3d6:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 3;
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	80 93 3f 04 	sts	0x043F, r24
				break;
 3e0:	08 95       	ret
			case MENU_STATE_ITEMLIST_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
 3e2:	80 91 a8 02 	lds	r24, 0x02A8
 3e6:	90 91 a9 02 	lds	r25, 0x02A9
 3ea:	90 93 38 04 	sts	0x0438, r25
 3ee:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
 3f2:	80 91 aa 02 	lds	r24, 0x02AA
 3f6:	90 91 ab 02 	lds	r25, 0x02AB
 3fa:	90 93 3a 04 	sts	0x043A, r25
 3fe:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
 402:	80 91 98 02 	lds	r24, 0x0298
 406:	90 91 99 02 	lds	r25, 0x0299
 40a:	90 93 3c 04 	sts	0x043C, r25
 40e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 412:	80 91 d0 02 	lds	r24, 0x02D0
 416:	90 91 d1 02 	lds	r25, 0x02D1
 41a:	90 93 3e 04 	sts	0x043E, r25
 41e:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 3f 04 	sts	0x043F, r24
				break;
 428:	08 95       	ret
			case MENU_STATE_ITEMLIST_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[8];
 42a:	80 91 a8 02 	lds	r24, 0x02A8
 42e:	90 91 a9 02 	lds	r25, 0x02A9
 432:	90 93 38 04 	sts	0x0438, r25
 436:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[9];
 43a:	80 91 aa 02 	lds	r24, 0x02AA
 43e:	90 91 ab 02 	lds	r25, 0x02AB
 442:	90 93 3a 04 	sts	0x043A, r25
 446:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
 44a:	80 91 98 02 	lds	r24, 0x0298
 44e:	90 91 99 02 	lds	r25, 0x0299
 452:	90 93 3c 04 	sts	0x043C, r25
 456:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 45a:	80 91 d0 02 	lds	r24, 0x02D0
 45e:	90 91 d1 02 	lds	r25, 0x02D1
 462:	90 93 3e 04 	sts	0x043E, r25
 466:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	80 93 3f 04 	sts	0x043F, r24
				break;
 470:	08 95       	ret
			case MENU_STATE_SYS_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
 472:	80 91 ac 02 	lds	r24, 0x02AC
 476:	90 91 ad 02 	lds	r25, 0x02AD
 47a:	90 93 38 04 	sts	0x0438, r25
 47e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
 482:	80 91 ae 02 	lds	r24, 0x02AE
 486:	90 91 af 02 	lds	r25, 0x02AF
 48a:	90 93 3a 04 	sts	0x043A, r25
 48e:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
 492:	80 91 b0 02 	lds	r24, 0x02B0
 496:	90 91 b1 02 	lds	r25, 0x02B1
 49a:	90 93 3c 04 	sts	0x043C, r25
 49e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 4a2:	80 91 d0 02 	lds	r24, 0x02D0
 4a6:	90 91 d1 02 	lds	r25, 0x02D1
 4aa:	90 93 3e 04 	sts	0x043E, r25
 4ae:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 93 3f 04 	sts	0x043F, r24
				break;
 4b8:	08 95       	ret
			case MENU_STATE_SYS_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
 4ba:	80 91 ac 02 	lds	r24, 0x02AC
 4be:	90 91 ad 02 	lds	r25, 0x02AD
 4c2:	90 93 38 04 	sts	0x0438, r25
 4c6:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
 4ca:	80 91 ae 02 	lds	r24, 0x02AE
 4ce:	90 91 af 02 	lds	r25, 0x02AF
 4d2:	90 93 3a 04 	sts	0x043A, r25
 4d6:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
 4da:	80 91 b0 02 	lds	r24, 0x02B0
 4de:	90 91 b1 02 	lds	r25, 0x02B1
 4e2:	90 93 3c 04 	sts	0x043C, r25
 4e6:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 4ea:	80 91 d0 02 	lds	r24, 0x02D0
 4ee:	90 91 d1 02 	lds	r25, 0x02D1
 4f2:	90 93 3e 04 	sts	0x043E, r25
 4f6:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	80 93 3f 04 	sts	0x043F, r24
				break;
 500:	08 95       	ret
			case MENU_STATE_SYS_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[10];
 502:	80 91 ac 02 	lds	r24, 0x02AC
 506:	90 91 ad 02 	lds	r25, 0x02AD
 50a:	90 93 38 04 	sts	0x0438, r25
 50e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[11];
 512:	80 91 ae 02 	lds	r24, 0x02AE
 516:	90 91 af 02 	lds	r25, 0x02AF
 51a:	90 93 3a 04 	sts	0x043A, r25
 51e:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[12];
 522:	80 91 b0 02 	lds	r24, 0x02B0
 526:	90 91 b1 02 	lds	r25, 0x02B1
 52a:	90 93 3c 04 	sts	0x043C, r25
 52e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 532:	80 91 d0 02 	lds	r24, 0x02D0
 536:	90 91 d1 02 	lds	r25, 0x02D1
 53a:	90 93 3e 04 	sts	0x043E, r25
 53e:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 3;
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	80 93 3f 04 	sts	0x043F, r24
				break;
 548:	08 95       	ret
			case MENU_STATE_SYS_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
 54a:	80 91 b2 02 	lds	r24, 0x02B2
 54e:	90 91 b3 02 	lds	r25, 0x02B3
 552:	90 93 38 04 	sts	0x0438, r25
 556:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
 55a:	80 91 b4 02 	lds	r24, 0x02B4
 55e:	90 91 b5 02 	lds	r25, 0x02B5
 562:	90 93 3a 04 	sts	0x043A, r25
 566:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
 56a:	80 91 b6 02 	lds	r24, 0x02B6
 56e:	90 91 b7 02 	lds	r25, 0x02B7
 572:	90 93 3c 04 	sts	0x043C, r25
 576:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 57a:	80 91 d0 02 	lds	r24, 0x02D0
 57e:	90 91 d1 02 	lds	r25, 0x02D1
 582:	90 93 3e 04 	sts	0x043E, r25
 586:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 3f 04 	sts	0x043F, r24
				break;
 590:	08 95       	ret
			case MENU_STATE_SYS_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
 592:	80 91 b2 02 	lds	r24, 0x02B2
 596:	90 91 b3 02 	lds	r25, 0x02B3
 59a:	90 93 38 04 	sts	0x0438, r25
 59e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
 5a2:	80 91 b4 02 	lds	r24, 0x02B4
 5a6:	90 91 b5 02 	lds	r25, 0x02B5
 5aa:	90 93 3a 04 	sts	0x043A, r25
 5ae:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
 5b2:	80 91 b6 02 	lds	r24, 0x02B6
 5b6:	90 91 b7 02 	lds	r25, 0x02B7
 5ba:	90 93 3c 04 	sts	0x043C, r25
 5be:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 5c2:	80 91 d0 02 	lds	r24, 0x02D0
 5c6:	90 91 d1 02 	lds	r25, 0x02D1
 5ca:	90 93 3e 04 	sts	0x043E, r25
 5ce:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 93 3f 04 	sts	0x043F, r24
				break;
 5d8:	08 95       	ret
			case MENU_STATE_SYS_P6:
				SYS_Screen_Buffer.line[0] = Display_Strings[13];
 5da:	80 91 b2 02 	lds	r24, 0x02B2
 5de:	90 91 b3 02 	lds	r25, 0x02B3
 5e2:	90 93 38 04 	sts	0x0438, r25
 5e6:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[14];
 5ea:	80 91 b4 02 	lds	r24, 0x02B4
 5ee:	90 91 b5 02 	lds	r25, 0x02B5
 5f2:	90 93 3a 04 	sts	0x043A, r25
 5f6:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[15];
 5fa:	80 91 b6 02 	lds	r24, 0x02B6
 5fe:	90 91 b7 02 	lds	r25, 0x02B7
 602:	90 93 3c 04 	sts	0x043C, r25
 606:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 60a:	80 91 d0 02 	lds	r24, 0x02D0
 60e:	90 91 d1 02 	lds	r25, 0x02D1
 612:	90 93 3e 04 	sts	0x043E, r25
 616:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 3;
 61a:	83 e0       	ldi	r24, 0x03	; 3
 61c:	80 93 3f 04 	sts	0x043F, r24
				break;
 620:	08 95       	ret
			case MENU_STATE_MODESEL_P1:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
 622:	80 91 b8 02 	lds	r24, 0x02B8
 626:	90 91 b9 02 	lds	r25, 0x02B9
 62a:	90 93 38 04 	sts	0x0438, r25
 62e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
 632:	80 91 ba 02 	lds	r24, 0x02BA
 636:	90 91 bb 02 	lds	r25, 0x02BB
 63a:	90 93 3a 04 	sts	0x043A, r25
 63e:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
 642:	80 91 bc 02 	lds	r24, 0x02BC
 646:	90 91 bd 02 	lds	r25, 0x02BD
 64a:	90 93 3c 04 	sts	0x043C, r25
 64e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 652:	80 91 d0 02 	lds	r24, 0x02D0
 656:	90 91 d1 02 	lds	r25, 0x02D1
 65a:	90 93 3e 04 	sts	0x043E, r25
 65e:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1; 
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	80 93 3f 04 	sts	0x043F, r24
				break;
 668:	08 95       	ret
			case MENU_STATE_MODESEL_P2:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
 66a:	80 91 b8 02 	lds	r24, 0x02B8
 66e:	90 91 b9 02 	lds	r25, 0x02B9
 672:	90 93 38 04 	sts	0x0438, r25
 676:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
 67a:	80 91 ba 02 	lds	r24, 0x02BA
 67e:	90 91 bb 02 	lds	r25, 0x02BB
 682:	90 93 3a 04 	sts	0x043A, r25
 686:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
 68a:	80 91 bc 02 	lds	r24, 0x02BC
 68e:	90 91 bd 02 	lds	r25, 0x02BD
 692:	90 93 3c 04 	sts	0x043C, r25
 696:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 69a:	80 91 d0 02 	lds	r24, 0x02D0
 69e:	90 91 d1 02 	lds	r25, 0x02D1
 6a2:	90 93 3e 04 	sts	0x043E, r25
 6a6:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	80 93 3f 04 	sts	0x043F, r24
				break;
 6b0:	08 95       	ret
			case MENU_STATE_MODESEL_P3:
				SYS_Screen_Buffer.line[0] = Display_Strings[16];
 6b2:	80 91 b8 02 	lds	r24, 0x02B8
 6b6:	90 91 b9 02 	lds	r25, 0x02B9
 6ba:	90 93 38 04 	sts	0x0438, r25
 6be:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[17];
 6c2:	80 91 ba 02 	lds	r24, 0x02BA
 6c6:	90 91 bb 02 	lds	r25, 0x02BB
 6ca:	90 93 3a 04 	sts	0x043A, r25
 6ce:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[18];
 6d2:	80 91 bc 02 	lds	r24, 0x02BC
 6d6:	90 91 bd 02 	lds	r25, 0x02BD
 6da:	90 93 3c 04 	sts	0x043C, r25
 6de:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 6e2:	80 91 d0 02 	lds	r24, 0x02D0
 6e6:	90 91 d1 02 	lds	r25, 0x02D1
 6ea:	90 93 3e 04 	sts	0x043E, r25
 6ee:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 3;
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	80 93 3f 04 	sts	0x043F, r24
				break;
 6f8:	08 95       	ret
			case MENU_STATE_MODESEL_P4:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
 6fa:	80 91 be 02 	lds	r24, 0x02BE
 6fe:	90 91 bf 02 	lds	r25, 0x02BF
 702:	90 93 38 04 	sts	0x0438, r25
 706:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
 70a:	80 91 c0 02 	lds	r24, 0x02C0
 70e:	90 91 c1 02 	lds	r25, 0x02C1
 712:	90 93 3a 04 	sts	0x043A, r25
 716:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
 71a:	80 91 98 02 	lds	r24, 0x0298
 71e:	90 91 99 02 	lds	r25, 0x0299
 722:	90 93 3c 04 	sts	0x043C, r25
 726:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 72a:	80 91 d0 02 	lds	r24, 0x02D0
 72e:	90 91 d1 02 	lds	r25, 0x02D1
 732:	90 93 3e 04 	sts	0x043E, r25
 736:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 1;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	80 93 3f 04 	sts	0x043F, r24
				break;
 740:	08 95       	ret
			case MENU_STATE_MODESEL_P5:
				SYS_Screen_Buffer.line[0] = Display_Strings[19];
 742:	80 91 be 02 	lds	r24, 0x02BE
 746:	90 91 bf 02 	lds	r25, 0x02BF
 74a:	90 93 38 04 	sts	0x0438, r25
 74e:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[20];
 752:	80 91 c0 02 	lds	r24, 0x02C0
 756:	90 91 c1 02 	lds	r25, 0x02C1
 75a:	90 93 3a 04 	sts	0x043A, r25
 75e:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[0];
 762:	80 91 98 02 	lds	r24, 0x0298
 766:	90 91 99 02 	lds	r25, 0x0299
 76a:	90 93 3c 04 	sts	0x043C, r25
 76e:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 772:	80 91 d0 02 	lds	r24, 0x02D0
 776:	90 91 d1 02 	lds	r25, 0x02D1
 77a:	90 93 3e 04 	sts	0x043E, r25
 77e:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index = 2;
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	80 93 3f 04 	sts	0x043F, r24
				break;
 788:	08 95       	ret
			case MENU_STATE_PD_MODE1_P1:
				if(PD_Mode == 1) 
 78a:	80 91 d2 02 	lds	r24, 0x02D2
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	49 f4       	brne	.+18     	; 0x7a4 <State_Update+0x5b8>
					SYS_Screen_Buffer.line[0] = Display_Strings[21];
 792:	80 91 c2 02 	lds	r24, 0x02C2
 796:	90 91 c3 02 	lds	r25, 0x02C3
 79a:	90 93 38 04 	sts	0x0438, r25
 79e:	80 93 37 04 	sts	0x0437, r24
 7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <State_Update+0x5c8>
				else
					SYS_Screen_Buffer.line[0] = Display_Strings[22];
 7a4:	80 91 c4 02 	lds	r24, 0x02C4
 7a8:	90 91 c5 02 	lds	r25, 0x02C5
 7ac:	90 93 38 04 	sts	0x0438, r25
 7b0:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
 7b4:	80 91 c6 02 	lds	r24, 0x02C6
 7b8:	90 91 c7 02 	lds	r25, 0x02C7
 7bc:	90 93 3a 04 	sts	0x043A, r25
 7c0:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
 7c4:	80 91 c8 02 	lds	r24, 0x02C8
 7c8:	90 91 c9 02 	lds	r25, 0x02C9
 7cc:	90 93 3c 04 	sts	0x043C, r25
 7d0:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 7d4:	80 91 d0 02 	lds	r24, 0x02D0
 7d8:	90 91 d1 02 	lds	r25, 0x02D1
 7dc:	90 93 3e 04 	sts	0x043E, r25
 7e0:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index=1;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	80 93 3f 04 	sts	0x043F, r24
				break;
 7ea:	08 95       	ret
			case MENU_STATE_PD_MODE1_P2:
				if(PD_Mode == 1)
 7ec:	80 91 d2 02 	lds	r24, 0x02D2
 7f0:	81 30       	cpi	r24, 0x01	; 1
 7f2:	49 f4       	brne	.+18     	; 0x806 <State_Update+0x61a>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
 7f4:	80 91 c2 02 	lds	r24, 0x02C2
 7f8:	90 91 c3 02 	lds	r25, 0x02C3
 7fc:	90 93 38 04 	sts	0x0438, r25
 800:	80 93 37 04 	sts	0x0437, r24
 804:	08 c0       	rjmp	.+16     	; 0x816 <State_Update+0x62a>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
 806:	80 91 c4 02 	lds	r24, 0x02C4
 80a:	90 91 c5 02 	lds	r25, 0x02C5
 80e:	90 93 38 04 	sts	0x0438, r25
 812:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
 816:	80 91 c6 02 	lds	r24, 0x02C6
 81a:	90 91 c7 02 	lds	r25, 0x02C7
 81e:	90 93 3a 04 	sts	0x043A, r25
 822:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
 826:	80 91 c8 02 	lds	r24, 0x02C8
 82a:	90 91 c9 02 	lds	r25, 0x02C9
 82e:	90 93 3c 04 	sts	0x043C, r25
 832:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 836:	80 91 d0 02 	lds	r24, 0x02D0
 83a:	90 91 d1 02 	lds	r25, 0x02D1
 83e:	90 93 3e 04 	sts	0x043E, r25
 842:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index=2;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	80 93 3f 04 	sts	0x043F, r24
				break;
 84c:	08 95       	ret
			case MENU_STATE_PD_MODE1_P3:
				if(PD_Mode == 1)
 84e:	80 91 d2 02 	lds	r24, 0x02D2
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	49 f4       	brne	.+18     	; 0x868 <State_Update+0x67c>
				SYS_Screen_Buffer.line[0] = Display_Strings[21];
 856:	80 91 c2 02 	lds	r24, 0x02C2
 85a:	90 91 c3 02 	lds	r25, 0x02C3
 85e:	90 93 38 04 	sts	0x0438, r25
 862:	80 93 37 04 	sts	0x0437, r24
 866:	08 c0       	rjmp	.+16     	; 0x878 <State_Update+0x68c>
				else
				SYS_Screen_Buffer.line[0] = Display_Strings[22];
 868:	80 91 c4 02 	lds	r24, 0x02C4
 86c:	90 91 c5 02 	lds	r25, 0x02C5
 870:	90 93 38 04 	sts	0x0438, r25
 874:	80 93 37 04 	sts	0x0437, r24
				SYS_Screen_Buffer.line[1] = Display_Strings[23];
 878:	80 91 c6 02 	lds	r24, 0x02C6
 87c:	90 91 c7 02 	lds	r25, 0x02C7
 880:	90 93 3a 04 	sts	0x043A, r25
 884:	80 93 39 04 	sts	0x0439, r24
				SYS_Screen_Buffer.line[2] = Display_Strings[24];
 888:	80 91 c8 02 	lds	r24, 0x02C8
 88c:	90 91 c9 02 	lds	r25, 0x02C9
 890:	90 93 3c 04 	sts	0x043C, r25
 894:	80 93 3b 04 	sts	0x043B, r24
				SYS_Screen_Buffer.line[3] = Display_Strings[28];
 898:	80 91 d0 02 	lds	r24, 0x02D0
 89c:	90 91 d1 02 	lds	r25, 0x02D1
 8a0:	90 93 3e 04 	sts	0x043E, r25
 8a4:	80 93 3d 04 	sts	0x043D, r24
				SYS_Screen_Buffer.white_index=1;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 3f 04 	sts	0x043F, r24
 8ae:	08 95       	ret

000008b0 <Menu_Init>:
		return NULL;
		
	}
	
	void Menu_Init(void){
		SYS_State = FindState(MENU_STATE_MAIN);
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	6f dc       	rcall	.-1826   	; 0x194 <FindState>
 8b6:	90 93 33 04 	sts	0x0433, r25
 8ba:	80 93 32 04 	sts	0x0432, r24
		State_Update();
 8be:	96 dc       	rcall	.-1748   	; 0x1ec <State_Update>
		DrawScreen();
 8c0:	2e cc       	rjmp	.-1956   	; 0x11e <DrawScreen>
 8c2:	08 95       	ret

000008c4 <Menu_Poll>:
		}
			
	}
	
	void Menu_Poll(void){
		uint8_t key = getkey();
 8c4:	9e d1       	rcall	.+828    	; 0xc02 <getkey>
		switch(key){
 8c6:	82 30       	cpi	r24, 0x02	; 2
 8c8:	71 f0       	breq	.+28     	; 0x8e6 <Menu_Poll+0x22>
 8ca:	38 f4       	brcc	.+14     	; 0x8da <Menu_Poll+0x16>
 8cc:	88 23       	and	r24, r24
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <Menu_Poll+0xe>
 8d0:	3f c0       	rjmp	.+126    	; 0x950 <Menu_Poll+0x8c>
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <Menu_Poll+0x14>
 8d6:	54 c0       	rjmp	.+168    	; 0x980 <Menu_Poll+0xbc>
 8d8:	08 95       	ret
 8da:	83 30       	cpi	r24, 0x03	; 3
 8dc:	09 f1       	breq	.+66     	; 0x920 <Menu_Poll+0x5c>
 8de:	84 30       	cpi	r24, 0x04	; 4
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <Menu_Poll+0x20>
 8e2:	66 c0       	rjmp	.+204    	; 0x9b0 <Menu_Poll+0xec>
 8e4:	08 95       	ret
			case BUTTON_RIGHT:
				if(SYS_State->Right_Action!=NULL)
 8e6:	e0 91 32 04 	lds	r30, 0x0432
 8ea:	f0 91 33 04 	lds	r31, 0x0433
 8ee:	02 88       	ldd	r0, Z+18	; 0x12
 8f0:	f3 89       	ldd	r31, Z+19	; 0x13
 8f2:	e0 2d       	mov	r30, r0
 8f4:	30 97       	sbiw	r30, 0x00	; 0
 8f6:	09 f0       	breq	.+2      	; 0x8fa <Menu_Poll+0x36>
					SYS_State->Right_Action();
 8f8:	09 95       	icall
				SYS_State = FindState(SYS_State->Right_Next_State);
 8fa:	e0 91 32 04 	lds	r30, 0x0432
 8fe:	f0 91 33 04 	lds	r31, 0x0433
 902:	80 85       	ldd	r24, Z+8	; 0x08
 904:	91 85       	ldd	r25, Z+9	; 0x09
 906:	46 dc       	rcall	.-1908   	; 0x194 <FindState>
 908:	90 93 33 04 	sts	0x0433, r25
 90c:	80 93 32 04 	sts	0x0432, r24
				lcd12864_set_pos(1,1);
 910:	61 e0       	ldi	r22, 0x01	; 1
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	c3 d1       	rcall	.+902    	; 0xc9c <lcd12864_set_pos>
				lcd12864_write_char('>');
 916:	8e e3       	ldi	r24, 0x3E	; 62
 918:	da d1       	rcall	.+948    	; 0xcce <lcd12864_write_char>
				State_Update();
 91a:	68 dc       	rcall	.-1840   	; 0x1ec <State_Update>
				DrawScreen();
 91c:	00 cc       	rjmp	.-2048   	; 0x11e <DrawScreen>
				break;
 91e:	08 95       	ret
			case BUTTON_LEFT:
				if(SYS_State->Left_Action!= NULL)
 920:	e0 91 32 04 	lds	r30, 0x0432
 924:	f0 91 33 04 	lds	r31, 0x0433
 928:	00 88       	ldd	r0, Z+16	; 0x10
 92a:	f1 89       	ldd	r31, Z+17	; 0x11
 92c:	e0 2d       	mov	r30, r0
 92e:	30 97       	sbiw	r30, 0x00	; 0
 930:	09 f0       	breq	.+2      	; 0x934 <Menu_Poll+0x70>
					SYS_State->Left_Action();
 932:	09 95       	icall
				SYS_State = FindState(SYS_State->Left_Next_State);
 934:	e0 91 32 04 	lds	r30, 0x0432
 938:	f0 91 33 04 	lds	r31, 0x0433
 93c:	86 81       	ldd	r24, Z+6	; 0x06
 93e:	97 81       	ldd	r25, Z+7	; 0x07
 940:	29 dc       	rcall	.-1966   	; 0x194 <FindState>
 942:	90 93 33 04 	sts	0x0433, r25
 946:	80 93 32 04 	sts	0x0432, r24
				State_Update();
 94a:	50 dc       	rcall	.-1888   	; 0x1ec <State_Update>
				DrawScreen();
 94c:	e8 cb       	rjmp	.-2096   	; 0x11e <DrawScreen>
				break;
 94e:	08 95       	ret
			case BUTTON_UP:
				if(SYS_State->Up_Action!= NULL)
 950:	e0 91 32 04 	lds	r30, 0x0432
 954:	f0 91 33 04 	lds	r31, 0x0433
 958:	04 84       	ldd	r0, Z+12	; 0x0c
 95a:	f5 85       	ldd	r31, Z+13	; 0x0d
 95c:	e0 2d       	mov	r30, r0
 95e:	30 97       	sbiw	r30, 0x00	; 0
 960:	09 f0       	breq	.+2      	; 0x964 <Menu_Poll+0xa0>
				SYS_State->Up_Action();
 962:	09 95       	icall
				SYS_State = FindState(SYS_State->Up_Next_State);
 964:	e0 91 32 04 	lds	r30, 0x0432
 968:	f0 91 33 04 	lds	r31, 0x0433
 96c:	82 81       	ldd	r24, Z+2	; 0x02
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	11 dc       	rcall	.-2014   	; 0x194 <FindState>
 972:	90 93 33 04 	sts	0x0433, r25
 976:	80 93 32 04 	sts	0x0432, r24
				State_Update();
 97a:	38 dc       	rcall	.-1936   	; 0x1ec <State_Update>
				DrawScreen();
 97c:	d0 cb       	rjmp	.-2144   	; 0x11e <DrawScreen>
				break;
 97e:	08 95       	ret
			case BUTTON_DOWN:
				if(SYS_State->Down_Action!= NULL)
 980:	e0 91 32 04 	lds	r30, 0x0432
 984:	f0 91 33 04 	lds	r31, 0x0433
 988:	06 84       	ldd	r0, Z+14	; 0x0e
 98a:	f7 85       	ldd	r31, Z+15	; 0x0f
 98c:	e0 2d       	mov	r30, r0
 98e:	30 97       	sbiw	r30, 0x00	; 0
 990:	09 f0       	breq	.+2      	; 0x994 <Menu_Poll+0xd0>
				SYS_State->Down_Action();
 992:	09 95       	icall
				SYS_State = FindState(SYS_State->Down_Next_State);
 994:	e0 91 32 04 	lds	r30, 0x0432
 998:	f0 91 33 04 	lds	r31, 0x0433
 99c:	84 81       	ldd	r24, Z+4	; 0x04
 99e:	95 81       	ldd	r25, Z+5	; 0x05
 9a0:	f9 db       	rcall	.-2062   	; 0x194 <FindState>
 9a2:	90 93 33 04 	sts	0x0433, r25
 9a6:	80 93 32 04 	sts	0x0432, r24
				State_Update();
 9aa:	20 dc       	rcall	.-1984   	; 0x1ec <State_Update>
				DrawScreen();
 9ac:	b8 cb       	rjmp	.-2192   	; 0x11e <DrawScreen>
				break;
 9ae:	08 95       	ret
			case BUTTON_ENTER:
				if(SYS_State->Ent_Action!= NULL)
 9b0:	e0 91 32 04 	lds	r30, 0x0432
 9b4:	f0 91 33 04 	lds	r31, 0x0433
 9b8:	06 88       	ldd	r0, Z+22	; 0x16
 9ba:	f7 89       	ldd	r31, Z+23	; 0x17
 9bc:	e0 2d       	mov	r30, r0
 9be:	30 97       	sbiw	r30, 0x00	; 0
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <Menu_Poll+0x100>
				SYS_State->Ent_Action();
 9c2:	09 95       	icall
				SYS_State = FindState(SYS_State->Ent_Next_State);
 9c4:	e0 91 32 04 	lds	r30, 0x0432
 9c8:	f0 91 33 04 	lds	r31, 0x0433
 9cc:	82 85       	ldd	r24, Z+10	; 0x0a
 9ce:	93 85       	ldd	r25, Z+11	; 0x0b
 9d0:	e1 db       	rcall	.-2110   	; 0x194 <FindState>
 9d2:	90 93 33 04 	sts	0x0433, r25
 9d6:	80 93 32 04 	sts	0x0432, r24
				State_Update();
 9da:	08 dc       	rcall	.-2032   	; 0x1ec <State_Update>
				DrawScreen();
 9dc:	a0 cb       	rjmp	.-2240   	; 0x11e <DrawScreen>
 9de:	08 95       	ret

000009e0 <Timer0_Init>:
			return true;
		}
	}
	
	return false;
}
 9e0:	e8 e4       	ldi	r30, 0x48	; 72
 9e2:	f4 e0       	ldi	r31, 0x04	; 4
 9e4:	88 e7       	ldi	r24, 0x78	; 120
 9e6:	94 e0       	ldi	r25, 0x04	; 4
 9e8:	11 82       	std	Z+1, r1	; 0x01
 9ea:	10 82       	st	Z, r1
 9ec:	13 82       	std	Z+3, r1	; 0x03
 9ee:	12 82       	std	Z+2, r1	; 0x02
 9f0:	15 82       	std	Z+5, r1	; 0x05
 9f2:	14 82       	std	Z+4, r1	; 0x04
 9f4:	36 96       	adiw	r30, 0x06	; 6
 9f6:	e8 17       	cp	r30, r24
 9f8:	f9 07       	cpc	r31, r25
 9fa:	b1 f7       	brne	.-20     	; 0x9e8 <Timer0_Init+0x8>
 9fc:	e0 e4       	ldi	r30, 0x40	; 64
 9fe:	f4 e0       	ldi	r31, 0x04	; 4
 a00:	88 e4       	ldi	r24, 0x48	; 72
 a02:	94 e0       	ldi	r25, 0x04	; 4
 a04:	2f ef       	ldi	r18, 0xFF	; 255
 a06:	21 93       	st	Z+, r18
 a08:	e8 17       	cp	r30, r24
 a0a:	f9 07       	cpc	r31, r25
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <Timer0_Init+0x26>
 a0e:	88 e4       	ldi	r24, 0x48	; 72
 a10:	83 bf       	out	0x33, r24	; 51
 a12:	12 be       	out	0x32, r1	; 50
 a14:	86 b7       	in	r24, 0x36	; 54
 a16:	81 60       	ori	r24, 0x01	; 1
 a18:	86 bf       	out	0x36, r24	; 54
 a1a:	87 b7       	in	r24, 0x37	; 55
 a1c:	82 60       	ori	r24, 0x02	; 2
 a1e:	87 bf       	out	0x37, r24	; 55
 a20:	78 94       	sei
 a22:	08 95       	ret

00000a24 <__vector_15>:
 a24:	1f 92       	push	r1
 a26:	0f 92       	push	r0
 a28:	0f b6       	in	r0, 0x3f	; 63
 a2a:	0f 92       	push	r0
 a2c:	11 24       	eor	r1, r1
 a2e:	0b b6       	in	r0, 0x3b	; 59
 a30:	0f 92       	push	r0
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	2f 93       	push	r18
 a38:	3f 93       	push	r19
 a3a:	4f 93       	push	r20
 a3c:	5f 93       	push	r21
 a3e:	6f 93       	push	r22
 a40:	7f 93       	push	r23
 a42:	8f 93       	push	r24
 a44:	9f 93       	push	r25
 a46:	af 93       	push	r26
 a48:	bf 93       	push	r27
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31
 a52:	c8 e4       	ldi	r28, 0x48	; 72
 a54:	d4 e0       	ldi	r29, 0x04	; 4
 a56:	08 e7       	ldi	r16, 0x78	; 120
 a58:	14 e0       	ldi	r17, 0x04	; 4
 a5a:	88 81       	ld	r24, Y
 a5c:	99 81       	ldd	r25, Y+1	; 0x01
 a5e:	89 2b       	or	r24, r25
 a60:	81 f0       	breq	.+32     	; 0xa82 <__vector_15+0x5e>
 a62:	8c 81       	ldd	r24, Y+4	; 0x04
 a64:	9d 81       	ldd	r25, Y+5	; 0x05
 a66:	2a 81       	ldd	r18, Y+2	; 0x02
 a68:	3b 81       	ldd	r19, Y+3	; 0x03
 a6a:	82 17       	cp	r24, r18
 a6c:	93 07       	cpc	r25, r19
 a6e:	31 f4       	brne	.+12     	; 0xa7c <__vector_15+0x58>
 a70:	1d 82       	std	Y+5, r1	; 0x05
 a72:	1c 82       	std	Y+4, r1	; 0x04
 a74:	e8 81       	ld	r30, Y
 a76:	f9 81       	ldd	r31, Y+1	; 0x01
 a78:	09 95       	icall
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <__vector_15+0x5e>
 a7c:	01 96       	adiw	r24, 0x01	; 1
 a7e:	9d 83       	std	Y+5, r25	; 0x05
 a80:	8c 83       	std	Y+4, r24	; 0x04
 a82:	26 96       	adiw	r28, 0x06	; 6
 a84:	c0 17       	cp	r28, r16
 a86:	d1 07       	cpc	r29, r17
 a88:	41 f7       	brne	.-48     	; 0xa5a <__vector_15+0x36>
 a8a:	80 91 34 04 	lds	r24, 0x0434
 a8e:	90 91 35 04 	lds	r25, 0x0435
 a92:	9c 01       	movw	r18, r24
 a94:	2f 5f       	subi	r18, 0xFF	; 255
 a96:	3f 4f       	sbci	r19, 0xFF	; 255
 a98:	30 93 35 04 	sts	0x0435, r19
 a9c:	20 93 34 04 	sts	0x0434, r18
 aa0:	84 36       	cpi	r24, 0x64	; 100
 aa2:	91 05       	cpc	r25, r1
 aa4:	89 f4       	brne	.+34     	; 0xac8 <__vector_15+0xa4>
 aa6:	e0 e4       	ldi	r30, 0x40	; 64
 aa8:	f4 e0       	ldi	r31, 0x04	; 4
 aaa:	88 e4       	ldi	r24, 0x48	; 72
 aac:	94 e0       	ldi	r25, 0x04	; 4
 aae:	20 81       	ld	r18, Z
 ab0:	21 50       	subi	r18, 0x01	; 1
 ab2:	2e 3f       	cpi	r18, 0xFE	; 254
 ab4:	08 f4       	brcc	.+2      	; 0xab8 <__vector_15+0x94>
 ab6:	20 83       	st	Z, r18
 ab8:	31 96       	adiw	r30, 0x01	; 1
 aba:	e8 17       	cp	r30, r24
 abc:	f9 07       	cpc	r31, r25
 abe:	b9 f7       	brne	.-18     	; 0xaae <__vector_15+0x8a>
 ac0:	10 92 35 04 	sts	0x0435, r1
 ac4:	10 92 34 04 	sts	0x0434, r1
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	0f 90       	pop	r0
 aea:	0b be       	out	0x3b, r0	; 59
 aec:	0f 90       	pop	r0
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	0f 90       	pop	r0
 af2:	1f 90       	pop	r1
 af4:	18 95       	reti

00000af6 <Timer0_AllocateCountdownTimer>:

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
	if (CountDownTimers[i] == 255)
 af6:	80 91 40 04 	lds	r24, 0x0440
 afa:	8f 3f       	cpi	r24, 0xFF	; 255
 afc:	51 f0       	breq	.+20     	; 0xb12 <Timer0_AllocateCountdownTimer+0x1c>
 afe:	e1 e4       	ldi	r30, 0x41	; 65
 b00:	f4 e0       	ldi	r31, 0x04	; 4
 b02:	21 e0       	ldi	r18, 0x01	; 1
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	82 2f       	mov	r24, r18
 b08:	a9 01       	movw	r20, r18
 b0a:	91 91       	ld	r25, Z+
 b0c:	9f 3f       	cpi	r25, 0xFF	; 255
 b0e:	51 f4       	brne	.+20     	; 0xb24 <Timer0_AllocateCountdownTimer+0x2e>
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <Timer0_AllocateCountdownTimer+0x22>
 b12:	40 e0       	ldi	r20, 0x00	; 0
 b14:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
 b16:	80 e0       	ldi	r24, 0x00	; 0
	if (CountDownTimers[i] == 255)
	{
		CountDownTimers[i] = 0;
 b18:	fa 01       	movw	r30, r20
 b1a:	e0 5c       	subi	r30, 0xC0	; 192
 b1c:	fb 4f       	sbci	r31, 0xFB	; 251
 b1e:	10 82       	st	Z, r1
		return i+1;
 b20:	8f 5f       	subi	r24, 0xFF	; 255
 b22:	08 95       	ret
 b24:	2f 5f       	subi	r18, 0xFF	; 255
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t Timer0_AllocateCountdownTimer(void)
{
	uint8_t i;
	for (i=0; i<TIMER0_NUM_COUNTDOWNTIMERS; i++)
 b28:	28 30       	cpi	r18, 0x08	; 8
 b2a:	31 05       	cpc	r19, r1
 b2c:	61 f7       	brne	.-40     	; 0xb06 <Timer0_AllocateCountdownTimer+0x10>
	{
		CountDownTimers[i] = 0;
		return i+1;
	}

	return 0;
 b2e:	80 e0       	ldi	r24, 0x00	; 0
}
 b30:	08 95       	ret

00000b32 <buttons_init>:
uint8_t KEY = KEY_NULL;

uint8_t CountdownTimerHandler;

void buttons_init(void){
	BUTTON_SWITCH_IO_IN;
 b32:	1a ba       	out	0x1a, r1	; 26
	BUTTON_IO_PULLUP;
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	8b bb       	out	0x1b, r24	; 27

	EICRA |= _BV(ISC11);
 b38:	ea e6       	ldi	r30, 0x6A	; 106
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	80 81       	ld	r24, Z
 b3e:	88 60       	ori	r24, 0x08	; 8
 b40:	80 83       	st	Z, r24
	EIMSK |= _BV(1); 
 b42:	89 b7       	in	r24, 0x39	; 57
 b44:	82 60       	ori	r24, 0x02	; 2
 b46:	89 bf       	out	0x39, r24	; 57
	DDRD &=~_BV(1);
 b48:	89 98       	cbi	0x11, 1	; 17
	PORTD |= _BV(1);
 b4a:	91 9a       	sbi	0x12, 1	; 18
	
	sei();
 b4c:	78 94       	sei
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();
 b4e:	d3 df       	rcall	.-90     	; 0xaf6 <Timer0_AllocateCountdownTimer>
 b50:	80 93 78 04 	sts	0x0478, r24
 b54:	08 95       	ret

00000b56 <button_interrupt>:




void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
 b56:	89 b3       	in	r24, 0x19	; 25
	uint8_t key;
	key_byte = ~key_byte;
 b58:	80 95       	com	r24
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
 b5a:	80 fd       	sbrc	r24, 0
 b5c:	15 c0       	rjmp	.+42     	; 0xb88 <button_interrupt+0x32>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
 b5e:	81 fd       	sbrc	r24, 1
 b60:	15 c0       	rjmp	.+42     	; 0xb8c <button_interrupt+0x36>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
 b62:	82 fd       	sbrc	r24, 2
 b64:	15 c0       	rjmp	.+42     	; 0xb90 <button_interrupt+0x3a>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
 b66:	83 fd       	sbrc	r24, 3
 b68:	15 c0       	rjmp	.+42     	; 0xb94 <button_interrupt+0x3e>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
 b6a:	84 fd       	sbrc	r24, 4
 b6c:	15 c0       	rjmp	.+42     	; 0xb98 <button_interrupt+0x42>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
 b6e:	85 fd       	sbrc	r24, 5
 b70:	15 c0       	rjmp	.+42     	; 0xb9c <button_interrupt+0x46>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
 b72:	86 fd       	sbrc	r24, 6
 b74:	15 c0       	rjmp	.+42     	; 0xba0 <button_interrupt+0x4a>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
 b76:	88 23       	and	r24, r24
 b78:	d4 f4       	brge	.+52     	; 0xbae <button_interrupt+0x58>
 b7a:	14 c0       	rjmp	.+40     	; 0xba4 <button_interrupt+0x4e>
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
			KEY = key; KEY_VALID = true; 
 b7c:	90 93 d3 02 	sts	0x02D3, r25
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	80 93 36 04 	sts	0x0436, r24
 b86:	08 95       	ret
void button_interrupt(){
	uint8_t key_byte = BUTTON_IO_PIN;
	uint8_t key;
	key_byte = ~key_byte;
	
	if(key_byte & _BV(0)) key = BUTTON_DEM;
 b88:	95 e0       	ldi	r25, 0x05	; 5
 b8a:	0d c0       	rjmp	.+26     	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(1)) key = BUTTON_ALMRST;
 b8c:	97 e0       	ldi	r25, 0x07	; 7
 b8e:	0b c0       	rjmp	.+22     	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(2)) key=BUTTON_ENTER;
 b90:	94 e0       	ldi	r25, 0x04	; 4
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(3)) key=BUTTON_MENU;
 b94:	96 e0       	ldi	r25, 0x06	; 6
 b96:	07 c0       	rjmp	.+14     	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(4)) key=BUTTON_RIGHT;
 b98:	92 e0       	ldi	r25, 0x02	; 2
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(5)) key=BUTTON_LEFT;
 b9c:	93 e0       	ldi	r25, 0x03	; 3
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(6)) key=BUTTON_UP;
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <button_interrupt+0x50>
	else if(key_byte & _BV(7)) key=BUTTON_DOWN;
 ba4:	91 e0       	ldi	r25, 0x01	; 1
	else key=KEY_NULL;
	
	if(key!=KEY_NULL){
		if(!KEY_VALID){
 ba6:	80 91 36 04 	lds	r24, 0x0436
 baa:	88 23       	and	r24, r24
 bac:	39 f3       	breq	.-50     	; 0xb7c <button_interrupt+0x26>
 bae:	08 95       	ret

00000bb0 <__vector_2>:
	sei();
	CountdownTimerHandler = Timer0_AllocateCountdownTimer();

}

ISR(INT1_vect){
 bb0:	1f 92       	push	r1
 bb2:	0f 92       	push	r0
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	0f 92       	push	r0
 bb8:	11 24       	eor	r1, r1
 bba:	0b b6       	in	r0, 0x3b	; 59
 bbc:	0f 92       	push	r0
 bbe:	2f 93       	push	r18
 bc0:	3f 93       	push	r19
 bc2:	4f 93       	push	r20
 bc4:	5f 93       	push	r21
 bc6:	6f 93       	push	r22
 bc8:	7f 93       	push	r23
 bca:	8f 93       	push	r24
 bcc:	9f 93       	push	r25
 bce:	af 93       	push	r26
 bd0:	bf 93       	push	r27
 bd2:	ef 93       	push	r30
 bd4:	ff 93       	push	r31
cli();	
 bd6:	f8 94       	cli
button_interrupt();
 bd8:	be df       	rcall	.-132    	; 0xb56 <button_interrupt>
sei();
 bda:	78 94       	sei
}
 bdc:	ff 91       	pop	r31
 bde:	ef 91       	pop	r30
 be0:	bf 91       	pop	r27
 be2:	af 91       	pop	r26
 be4:	9f 91       	pop	r25
 be6:	8f 91       	pop	r24
 be8:	7f 91       	pop	r23
 bea:	6f 91       	pop	r22
 bec:	5f 91       	pop	r21
 bee:	4f 91       	pop	r20
 bf0:	3f 91       	pop	r19
 bf2:	2f 91       	pop	r18
 bf4:	0f 90       	pop	r0
 bf6:	0b be       	out	0x3b, r0	; 59
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	0f 90       	pop	r0
 bfe:	1f 90       	pop	r1
 c00:	18 95       	reti

00000c02 <getkey>:
	
}

uint8_t getkey(void){
	uint8_t k;
	cli();
 c02:	f8 94       	cli
	if(KEY_VALID){
 c04:	80 91 36 04 	lds	r24, 0x0436
 c08:	88 23       	and	r24, r24
 c0a:	29 f0       	breq	.+10     	; 0xc16 <getkey+0x14>
		k = KEY;
 c0c:	80 91 d3 02 	lds	r24, 0x02D3
		KEY_VALID = false;
 c10:	10 92 36 04 	sts	0x0436, r1
 c14:	01 c0       	rjmp	.+2      	; 0xc18 <getkey+0x16>
		
	}
	else k=KEY_NULL;
 c16:	8f ef       	ldi	r24, 0xFF	; 255
	sei();
 c18:	78 94       	sei
	
	return k;
	
	
	
 c1a:	08 95       	ret

00000c1c <lcd12864_send_data>:
void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
	lcd12864_wait_busy();
}

void lcd12864_send_data(uint8_t data){
 c1c:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t i;

	for (i=0;i<8;i++){
		if(data & 0x80)
 c1e:	88 23       	and	r24, r24
 c20:	14 f4       	brge	.+4      	; 0xc26 <lcd12864_send_data+0xa>
			LCD12864_SID_1;
 c22:	1c 9a       	sbi	0x03, 4	; 3
 c24:	01 c0       	rjmp	.+2      	; 0xc28 <lcd12864_send_data+0xc>
		else
			LCD12864_SID_0;
 c26:	1c 98       	cbi	0x03, 4	; 3
			data<<=1;
 c28:	88 0f       	add	r24, r24
		LCD12864_CLK_H;
 c2a:	1b 9a       	sbi	0x03, 3	; 3
		nop();nop();nop();
 c2c:	00 00       	nop
 c2e:	00 00       	nop
 c30:	00 00       	nop
		LCD12864_CLK_L;	
 c32:	1b 98       	cbi	0x03, 3	; 3
 c34:	91 50       	subi	r25, 0x01	; 1
}

void lcd12864_send_data(uint8_t data){
	uint8_t i;

	for (i=0;i<8;i++){
 c36:	99 f7       	brne	.-26     	; 0xc1e <lcd12864_send_data+0x2>
		nop();nop();nop();
		LCD12864_CLK_L;	
	}

	
}
 c38:	08 95       	ret

00000c3a <lcd12864_wait_busy>:

void lcd12864_wait_busy(void){
 c3a:	80 e0       	ldi	r24, 0x00	; 0
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	80 37       	cpi	r24, 0x70	; 112
 c42:	21 e0       	ldi	r18, 0x01	; 1
 c44:	92 07       	cpc	r25, r18
 c46:	d9 f7       	brne	.-10     	; 0xc3e <lcd12864_wait_busy+0x4>
delay_us(300);
}
 c48:	08 95       	ret

00000c4a <lcd12864_send_cmd>:

void lcd12864_send_cmd(uint8_t cmd){
 c4a:	cf 93       	push	r28
 c4c:	c8 2f       	mov	r28, r24
	LCD12864_ENABLE;
 c4e:	1e 9a       	sbi	0x03, 6	; 3
	lcd12864_wait_busy();
 c50:	f4 df       	rcall	.-24     	; 0xc3a <lcd12864_wait_busy>
	lcd12864_send_data(0xf8);
 c52:	88 ef       	ldi	r24, 0xF8	; 248
 c54:	e3 df       	rcall	.-58     	; 0xc1c <lcd12864_send_data>
	lcd12864_send_data(cmd & 0xf0);
 c56:	8c 2f       	mov	r24, r28
 c58:	80 7f       	andi	r24, 0xF0	; 240
 c5a:	e0 df       	rcall	.-64     	; 0xc1c <lcd12864_send_data>
	lcd12864_send_data(cmd<<4);
 c5c:	8c 2f       	mov	r24, r28
 c5e:	82 95       	swap	r24
 c60:	80 7f       	andi	r24, 0xF0	; 240
 c62:	dc df       	rcall	.-72     	; 0xc1c <lcd12864_send_data>
	LCD12864_DISABLE;
 c64:	1e 98       	cbi	0x03, 6	; 3
}
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <lcd12864_init>:
#include <string.h>
#include <stdlib.h>


void lcd12864_init(void){
	SWITCH_LCD_IO_OUT;
 c6a:	82 b1       	in	r24, 0x02	; 2
 c6c:	88 6f       	ori	r24, 0xF8	; 248
 c6e:	82 b9       	out	0x02, r24	; 2

	LCD12864_RESET;
 c70:	1d 9a       	sbi	0x03, 5	; 3
	LCD12864_BACKLIGHT_ENABLE;
 c72:	1f 98       	cbi	0x03, 7	; 3
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	01 96       	adiw	r24, 0x01	; 1
 c7a:	81 15       	cp	r24, r1
 c7c:	20 e3       	ldi	r18, 0x30	; 48
 c7e:	92 07       	cpc	r25, r18
 c80:	d9 f7       	brne	.-10     	; 0xc78 <lcd12864_init+0xe>

	delay_ms(10);
	lcd12864_send_cmd(0x30);
 c82:	80 e3       	ldi	r24, 0x30	; 48
 c84:	e2 df       	rcall	.-60     	; 0xc4a <lcd12864_send_cmd>

	lcd12864_send_cmd(0x01);
 c86:	81 e0       	ldi	r24, 0x01	; 1
 c88:	e0 df       	rcall	.-64     	; 0xc4a <lcd12864_send_cmd>

	lcd12864_send_cmd(0x06);
 c8a:	86 e0       	ldi	r24, 0x06	; 6
 c8c:	de df       	rcall	.-68     	; 0xc4a <lcd12864_send_cmd>

	lcd12864_send_cmd(0x0c);
 c8e:	8c e0       	ldi	r24, 0x0C	; 12
 c90:	dc cf       	rjmp	.-72     	; 0xc4a <lcd12864_send_cmd>
 c92:	08 95       	ret

00000c94 <lcd12864_clear>:

}

void lcd12864_clear(void){
	lcd12864_send_cmd(0x01);
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	d9 df       	rcall	.-78     	; 0xc4a <lcd12864_send_cmd>
	lcd12864_wait_busy();
 c98:	d0 cf       	rjmp	.-96     	; 0xc3a <lcd12864_wait_busy>
 c9a:	08 95       	ret

00000c9c <lcd12864_set_pos>:
	LCD12864_DISABLE;
}

void lcd12864_set_pos(uint8_t x, uint8_t y){
	uint8_t tmp;
	switch(y){
 c9c:	62 30       	cpi	r22, 0x02	; 2
 c9e:	89 f0       	breq	.+34     	; 0xcc2 <lcd12864_set_pos+0x26>
 ca0:	18 f4       	brcc	.+6      	; 0xca8 <lcd12864_set_pos+0xc>
 ca2:	61 30       	cpi	r22, 0x01	; 1
 ca4:	31 f0       	breq	.+12     	; 0xcb2 <lcd12864_set_pos+0x16>
 ca6:	0b c0       	rjmp	.+22     	; 0xcbe <lcd12864_set_pos+0x22>
 ca8:	63 30       	cpi	r22, 0x03	; 3
 caa:	29 f0       	breq	.+10     	; 0xcb6 <lcd12864_set_pos+0x1a>
 cac:	64 30       	cpi	r22, 0x04	; 4
 cae:	29 f0       	breq	.+10     	; 0xcba <lcd12864_set_pos+0x1e>
 cb0:	06 c0       	rjmp	.+12     	; 0xcbe <lcd12864_set_pos+0x22>
		case 1:
			tmp=0x80; break;
 cb2:	90 e8       	ldi	r25, 0x80	; 128
 cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <lcd12864_set_pos+0x28>
		case 2:
			tmp=0x90; break;
		case 3:
			tmp=0x88; break;
 cb6:	98 e8       	ldi	r25, 0x88	; 136
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <lcd12864_set_pos+0x28>
		case 4:
			tmp=0x98; break;
 cba:	98 e9       	ldi	r25, 0x98	; 152
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <lcd12864_set_pos+0x28>
		default:
			tmp=0x98;
 cbe:	98 e9       	ldi	r25, 0x98	; 152
			break;
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <lcd12864_set_pos+0x28>
	uint8_t tmp;
	switch(y){
		case 1:
			tmp=0x80; break;
		case 2:
			tmp=0x90; break;
 cc2:	90 e9       	ldi	r25, 0x90	; 144
			tmp=0x98;
			break;
				
	}
	
	if(x>16) return; 
 cc4:	81 31       	cpi	r24, 0x11	; 17
 cc6:	10 f4       	brcc	.+4      	; 0xccc <lcd12864_set_pos+0x30>
	
	lcd12864_send_cmd(tmp+x);
 cc8:	89 0f       	add	r24, r25
 cca:	bf cf       	rjmp	.-130    	; 0xc4a <lcd12864_send_cmd>
 ccc:	08 95       	ret

00000cce <lcd12864_write_char>:
	

	
}

void lcd12864_write_char(char data){
 cce:	cf 93       	push	r28
 cd0:	c8 2f       	mov	r28, r24
		LCD12864_ENABLE;
 cd2:	1e 9a       	sbi	0x03, 6	; 3
		lcd12864_wait_busy();
 cd4:	b2 df       	rcall	.-156    	; 0xc3a <lcd12864_wait_busy>
		lcd12864_send_data(0xfa);
 cd6:	8a ef       	ldi	r24, 0xFA	; 250
 cd8:	a1 df       	rcall	.-190    	; 0xc1c <lcd12864_send_data>
		lcd12864_send_data(0xf0&data);
 cda:	8c 2f       	mov	r24, r28
 cdc:	80 7f       	andi	r24, 0xF0	; 240
 cde:	9e df       	rcall	.-196    	; 0xc1c <lcd12864_send_data>
		lcd12864_send_data(0xf0&data<<4);
 ce0:	8c 2f       	mov	r24, r28
 ce2:	82 95       	swap	r24
 ce4:	80 7f       	andi	r24, 0xF0	; 240
 ce6:	9a df       	rcall	.-204    	; 0xc1c <lcd12864_send_data>
		LCD12864_DISABLE;
 ce8:	1e 98       	cbi	0x03, 6	; 3
	
}
 cea:	cf 91       	pop	r28
 cec:	08 95       	ret

00000cee <lcd12864_write_str>:

void lcd12864_write_str(char *str){
 cee:	1f 93       	push	r17
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
 cf6:	88 81       	ld	r24, Y
 cf8:	88 23       	and	r24, r24
 cfa:	49 f0       	breq	.+18     	; 0xd0e <lcd12864_write_str+0x20>
 cfc:	10 e0       	ldi	r17, 0x00	; 0
		lcd12864_write_char(str[i]);
 cfe:	e7 df       	rcall	.-50     	; 0xcce <lcd12864_write_char>
	
}

void lcd12864_write_str(char *str){
	uint8_t i;
	for(i=0;str[i]!='\0';i++){
 d00:	1f 5f       	subi	r17, 0xFF	; 255
 d02:	fe 01       	movw	r30, r28
 d04:	e1 0f       	add	r30, r17
 d06:	f1 1d       	adc	r31, r1
 d08:	80 81       	ld	r24, Z
 d0a:	81 11       	cpse	r24, r1
 d0c:	f8 cf       	rjmp	.-16     	; 0xcfe <lcd12864_write_str+0x10>
		lcd12864_write_char(str[i]);
	}
}
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	1f 91       	pop	r17
 d14:	08 95       	ret

00000d16 <main>:

int main (void)
{

	/* Insert system clock initialization code here (sysclk_init()). */
	buttons_init(); 
 d16:	0d df       	rcall	.-486    	; 0xb32 <buttons_init>
	lcd12864_init();
 d18:	a8 df       	rcall	.-176    	; 0xc6a <lcd12864_init>
	init_IO();
 d1a:	ea d9       	rcall	.-3116   	; 0xf0 <init_IO>
	emv_ports_init();
 d1c:	d6 d9       	rcall	.-3156   	; 0xca <emv_ports_init>
	Timer0_Init();
 d1e:	60 de       	rcall	.-832    	; 0x9e0 <Timer0_Init>
	Menu_Init();
 d20:	c7 dd       	rcall	.-1138   	; 0x8b0 <Menu_Init>
	
	

	
	while(1){
	Menu_Poll();
 d22:	d0 dd       	rcall	.-1120   	; 0x8c4 <Menu_Poll>
 d24:	fe cf       	rjmp	.-4      	; 0xd22 <main+0xc>

00000d26 <_exit>:
 d26:	f8 94       	cli

00000d28 <__stop_program>:
 d28:	ff cf       	rjmp	.-2      	; 0xd28 <__stop_program>
